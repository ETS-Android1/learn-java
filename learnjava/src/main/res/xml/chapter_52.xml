<?xml version="1.0" encoding="utf-8"?>

<!-- 'File extensions and project structure', belongs to course 'The basics' -->

<resources>
    <chapterdata>
        <id>52</id>
        <name>File extensions and project structure</name>
    </chapterdata>
    <text>
        <![CDATA[
        There are multiple file types which can come into play when we are developing Java
        applications.
        ]]>
    </text>
   <title text=".java files"/>
    <text>
        <![CDATA[
        These are simple text files, marked with the <b>.java</b> extension, so that it's clear that
        they aren't just any text files, but java source files. Their content is is easily readable.
        ]]>
    </text>
    <image name="simple_java_file"/>
    <text>
        <![CDATA[
        As you can see, Notepad++ not only opens this simple .java file, but it also recognizes and
        colors certain keywords.
        ]]>
    </text>
    <boxed title="Naming rules">
        <![CDATA[
        A java source file can't just have any name. Such a file can contain at most one <b>public class</b>
        and the filename must be the same as this class' name. As for what a public class is, it will be
        covered in a later chapter, but for now take a look at the image above.
        <br><br>
        You can see that the file contains <b>public class Main</b> part, and in the top left corner
        the filename can be seen, which is indeed <b>Main.java</b>.
        <br><br>
        We don't really have to give too much thought to this rule, as our IDE will always enforce it
        for us.
        ]]>
    </boxed>
    <title text=".class files"/>
    <text>
        <![CDATA[
        These files contain compiled Java source code, also called <b>bytecode</b>. Unlike .java files,
        these aren't text files, but binary ones, and they can be given to the Java Virtual Machine
        for execution. Notepad++ can still open these files, but the result is far from readable:
        ]]>
    </text>
    <image name="bytecode"/>
    <text>
        <![CDATA[
        This is our previous source file, <b>Main.java</b>, now compiled into <b>Main.class</b>
        ]]>
    </text>
    <advanced title="Compile and run from the command line">
        <![CDATA[
        Our IDE will handle the compilation and execution of all our source files, but by default
        they are done from the command line, by using the <b>javac</b> and the </b>java</b> commands.
        <br></br>
        See the guide for links about how to compile and run Java code without an IDE.
        ]]>
    </advanced>
    <title text=".jar files"/>
    <text>
        <![CDATA[
        These are compressed files, much like a <i>.zip</i> or a <i>.rar</i>. They are used to package
        and deploy Java libraries or applications, hence the name, <b>J</b>ava <b>AR</b>chive.
        ]]>
    </text>
    <text>
        <![CDATA[
        <u>Here are a few things that a JAR file can contain:</u>
        ]]>
    </text>
    <list>
        <![CDATA[
        <ul>
        <li>A <b>manifest file</b>, inside the META-INF folder, which contains information about the JAR file</li>
        <li>Compiled java code (<b>.class files</b>) organized into <b>packages</b></li>
        <li>Other resources, for example images</li>
        </ul>
        ]]>
    </list>
    <boxed title="Executable JAR files">
        <![CDATA[
        JAR files also provide a way to start a Java application easily, without the command line. To make
        a JAR executable all we need to do is add the <b>fully qualified name</b> of the main class to the manifest, like so:
        <br><br>
        <i>Main-Class: com.learnjava.Main</i>
        ]]>
    </boxed>
    <title text="packages"/>
    <text>
        <![CDATA[
        Packages are a way to structure our Java projects. Imagine an application with dozens of source
        files, all in the same folder. Instead, the recommended way is to organize the <b>classes</b> by function.
        Packages can not only contain source files, but also other packages as well!
        ]]>
    </text>
    <text>
        Here is an example project with two packages and two classes (you can think of the class like it's
        the same as the source file, for now):
    </text>
    <image name="project_structure"/>
    <boxed title="Naming conventions">
        <![CDATA[
        Package names should contain only lower case letters.
        <br><br>
        The top level package is usually some domain name, like <b>com</> or <b>org</b>,
        then the next package is often the name of the organization, the programmer, or the project itself.
        After that, the packages are named by the functionality of the <b>classes</b> inside them.
        <br><br>
        If you examine the above image you can see that it adheres to these conventions.
        ]]>
    </boxed>
    <text>
        <![CDATA[
        <u>Important:</u> Some package names are restricted for packages in the Java language. These names are <b>java</b>
        and <b>javax</b>. Avoid naming a package any of these words, or the compiler will refuse to compile
        your source files.
        ]]>
    </text>
    <advanced title="More then just structure">
        Packages provide much more then just structuring the project. They can hide classes inside them,
        or allow the programmer to have multiple classes with the same name, in different packages.
    </advanced>
    <title text="Packages in the code, import"/>
    <text>
        <![CDATA[
        At the first line of a source file, the containing packages <i>should</i> be declared, with the <b>package</b>
        keyword. For example, if our source file (<i>Main.java</b>) is inside package <i>learnjava</i>, and this package is inside
        <i>com</i>, the the first line must be:
        ]]>
    </text>
    <code>
        <![CDATA[
        <font color="#E65100">package</font> com.learnjava;
        ]]>
    </code>
    <text>
        <![CDATA[
        As we can see, the package hierarchy can be resolved with dot characters. The package declaration
        must <b>always be in the first line</b> of the source code!
        ]]>
    </text>
    <text>
        <![CDATA[
        If we wish to use code (a class) from another package, we must <b>import</b> it, without this
        step our code won't compile. Assume we are in the package of the last example (<i>com.learnjava</i>),
        and we want to use the class <i>Date</i> from the package <i>java.util</i>. The following code shows
        what we must write:
        ]]>
    </text>
    <code>
        <![CDATA[
        <font color="#E65100">package </font>com.learnjava;
        <br/>
        <br/><font color="#E65100">import </font>java.util.<font color="#999900">Date</font>;
        <br/>
        <br/>...
        ]]>
    </code>
    <text>
        <![CDATA[
        We already know that the <i>package</i> line must be the first line. By convention, the <i>import</i>
        lines follow after that line, at the beginning of the file.
        ]]>
    </text>
    <boxed title="The default package">
        <![CDATA[
        We don't necessarily need to declare a package. If we don't, the <b>default package</b> will be used,
        however, this is discouraged, for multiple reasons.
        <br><br>
        Most importantly, the default package can't be referenced, and so we won't be able to import classes
        from it!
        <br><br>
        For very simple applications with only one package, it's OK to use the default package.
        ]]>
    </boxed>
</resources>