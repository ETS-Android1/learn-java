<?xml version="1.0" encoding="utf-8"?>

<!-- Exam of course 'Data structures' -->

<resources>
    <examdata>
        <id>20</id>
        <questionAmount>25</questionAmount>
        <timeLimit>30</timeLimit>
        <finished>true</finished>
    </examdata>

    <!-- Questions for 'problems with arrays' -->
    <question type="single_choice">
        <text>What is the difference between arrays and collections?</text>
        <answer>Arrays don't support primitive types, while collections do.</answer>
        <answer>Collections are always unordered, while arrays keep an order of their elements.</answer>
        <answer>Arrays are a built in concept of Java, while the collections are classes.</answer>
        <answer>Collections have no size limit, while arrays can only support up to 1000 elements.</answer>
        <correct>2</correct>
    </question>
    <question type="multi_choice">
        <text>What is true about JDK collections?</text>
        <answer>They support any type of element.</answer>
        <answer>They're generic classes.</answer>
        <answer>The size of them is fixed.</answer>
        <answer>They don't support primitive element types.</answer>
        <correct>1</correct>
        <correct>3</correct>
    </question>
    <question type="multi_choice">
        <text>What are limiting factors of arrays?</text>
        <answer>Their size is fixed after creation.</answer>
        <answer>Arrays can't be used efficiently when the amount of elements is unknown beforehand.</answer>
        <answer>They only support primitive types.</answer>
        <answer>Arrays can only store up to 1000 elements.</answer>
        <correct>0</correct>
        <correct>1</correct>
    </question>
    <question type="multi_choice">
        <text>Which one these are data structures?</text>
        <answer>Arrays.</answer>
        <answer>Lists.</answer>
        <answer>Files.</answer>
        <answer>Maps.</answer>
        <correct>0</correct>
        <correct>1</correct>
        <correct>3</correct>
    </question>
    <question type="text">
        <text>Declare and initialize an empty array list of strings called 'lines'. Use the diamond operator!</text>
        <correct>ArrayList&lt;String> lines = new ArrayList&lt;>();</correct>
        <correct>ArrayList&lt;String> lines= new ArrayList&lt;>();</correct>
        <correct>ArrayList&lt;String> lines =new ArrayList&lt;>();</correct>
        <correct>ArrayList&lt;String> lines=new ArrayList&lt;>();</correct>
        <correct>List&lt;String> lines = new ArrayList&lt;>();</correct>
        <correct>List&lt;String> lines= new ArrayList&lt;>();</correct>
        <correct>List&lt;String> lines =new ArrayList&lt;>();</correct>
        <correct>List&lt;String> lines=new ArrayList&lt;>();</correct>
    </question>
    <question type="text">
        <text>Declare and initialize an empty linked list of integers called 'nums'. Use the diamond operator!</text>
        <correct>LinkedList&lt;Integer> nums = new LinkedList&lt;>();</correct>
        <correct>LinkedList&lt;Integer> nums= new LinkedList&lt;>();</correct>
        <correct>LinkedList&lt;Integer> nums =new LinkedList&lt;>();</correct>
        <correct>LinkedList&lt;Integer> nums=new LinkedList&lt;>();</correct>
        <correct>List&lt;Integer> nums = new LinkedList&lt;>();</correct>
        <correct>List&lt;Integer> nums= new LinkedList&lt;>();</correct>
        <correct>List&lt;Integer> nums =new LinkedList&lt;>();</correct>
        <correct>List&lt;Integer> nums=new LinkedList&lt;>();</correct>
    </question>
    <question type="text">
        <text>Enter the 'diamond operator'.</text>
        <correct>&lt;></correct>
    </question>
    <question type="true_false">
        <text>Generic collections directly support primitive types.</text>
        <correct>false</correct>
    </question>
    <question type="true_false">
        <text>Generic classes indirectly (through some utility classes) support primitives.</text>
        <correct>true</correct>
    </question>
    <question type="text">
        <text>What is the common interface of the JDK data structures?</text>
        <correct>Collection</correct>
        <correct>java.util.Collection</correct>
    </question>

    <!-- Questions for lists -->
    <question type="multi_choice">
        <text>Which of these interfaces do lists in the JDK implement?</text>
        <answer>java.util.List</answer>
        <answer>java.util.Map</answer>
        <answer>java.lang.Runnable</answer>
        <answer>java.util.Collection</answer>
        <correct>0</correct>
        <correct>3</correct>
    </question>
    <question type="text">
        <text>Which JDK list implementation uses an internal array?</text>
        <correct>ArrayList</correct>
        <correct>java.util.ArrayList</correct>
    </question>
    <question type="text">
        <text>Which JDK list implementation uses a chain of element references to store it's data?</text>
        <correct>LinkedList</correct>
        <correct>java.util.LinkedList</correct>
    </question>
    <question type="single_choice">
        <text>What is the difference between array lists and linked lists?</text>
        <answer>The JDK only has linked list implementations.</answer>
        <answer>Only array lists can dynamically make space for any amount of elements.</answer>
        <answer>Their internal workings.</answer>
        <answer>Nothing, an array list is just an alias for linked list.</answer>
        <correct>2</correct>
    </question>
    <question type="single_choice">
        <text>What operation can array lists efficiently perform?</text>
        <answer>Getting an element by index.</answer>
        <answer>Resizing their internal array.</answer>
        <answer>Injecting elements to any position.</answer>
        <answer>Removing elements from any position.</answer>
        <correct>0</correct>
    </question>
    <question type="multi_choice">
        <text>What operations can linked lists efficiently perform?</text>
        <answer>Getting an element by index.</answer>
        <answer>Getting the first element.</answer>
        <answer>Injecting an element into any position.</answer>
        <correct>1</correct>
        <correct>2</correct>
    </question>
    <question type="single_choice">
        <text>What are doubly linked lists?</text>
        <answer>Linked lists for doubles.</answer>
        <answer>The list stores it's elements in two linked 'chains'.</answer>
        <answer>An element not only hold the reference to the next one, but also the previous one.</answer>
        <correct>2</correct>
    </question>
    <question type="true_false">
        <text>Doubly linked lists are more efficient than singly linked ones, but harder to implement.</text>
        <correct>true</correct>
    </question>
    <question type="true_false">
        <text>An array based list is more efficient then a linked list.</text>
        <correct>false</correct>
    </question>

    <!-- Questions about queues and stacks -->
    <question type="text">
        <text>Which acronym is used to describe queues?</text>
        <correct>FIFO</correct>
        <correct>fifo</correct>
    </question>
    <question type="text">
        <text>Which acronym is used to describe stacks?</text>
        <correct>LIFO</correct>
        <correct>lifo</correct>
    </question>
    <question type="multi_choice">
        <text>What is true about queues?</text>
        <answer>They are special lists.</answer>
        <answer>They are last-in-first-out data structures.</answer>
        <answer>They only allow adding and removing elements on the ends.</answer>
        <answer>They are special maps.</answer>
        <correct>0</correct>
        <correct>2</correct>
    </question>
    <question type="multi_choice">
        <text>What is true about stacks?</text>
        <answer>They are last-in-first-out data structures.</answer>
        <answer>They are special maps.</answer>
        <answer>They only allow adding and removing elements at the 'top'.</answer>
        <answer>They are first-in-first-out data structures.</answer>
        <correct>2</correct>
        <correct>3</correct>
    </question>
    <question type="true_false">
        <text>A stack is a FIFO data structure.</text>
        <correct>false</correct>
    </question>
    <question type="true_false">
        <text>A stack is a LIFO data structure.</text>
        <correct>true</correct>
    </question>
    <question type="true_false">
        <text>A queue is a FIFO data structure.</text>
        <correct>true</correct>
    </question>
    <question type="multi_choice">
        <text>Which of these methods does a stack usually have?</text>
        <answer>push</answer>
        <answer>collect</answer>
        <answer>pop</answer>
        <answer>peek</answer>
        <correct>0</correct>
        <correct>2</correct>
        <correct>3</correct>
    </question>
    <question type="single_choice">
        <text>What is the difference between double ended and standard queues?</text>
        <answer>A double ended queue is a data structure which only accepts and removes elements from one side.</answer>
        <answer>Double ended queues can accept and remove elements at both sides.</answer>
        <answer>A double ended queue is a data structure which consists of two queues.</answer>
        <correct>1</correct>
    </question>
    <question type="text">
        <text>What is the name of the interface in the JDK for double ended queues?</text>
        <correct>Deque</correct>
        <correct>java.util.Deque</correct>
    </question>
    <question type="true_false">
        <text>Stacks cannot be generic.</text>
        <correct>false</correct>
    </question>

    <!-- Questions about maps -->
    <question type="single_choice">
        <text>What is the difference between lists and maps?</text>
        <answer>Maps are not data structures, lists are.</answer>
        <answer>JDK maps are not generic, but lists are.</answer>
        <answer>Maps contain pairs of elements, while lists contain single elements.</answer>
        <correct>2</correct>
    </question>
    <question type="single_choice">
        <text>What is another name for maps?</text>
        <answer>stack</answer>
        <answer>dictionary</answer>
        <answer>queue</answer>
        <answer>pair</answer>
        <correct>1</correct>
    </question>
    <question type="true_false">
        <text>In Java, maps are built into the language itself, map classes are not needed.</text>
        <correct>false</correct>
    </question>
    <question type="true_false">
        <text>In Java, lists are built into the language, list classes are not needed.</text>
        <correct>false</correct>
    </question>
    <question type="text">
        <text>What interface do dictionaries in the JDK implement?</text>
        <correct>Map</correct>
        <correct>java.util.Map</correct>
    </question>
    <question type="multi_choice">
        <text>Which of these can a map contain?</text>
        <answer>keys</answer>
        <answer>collections</answer>
        <answer>lists</answer>
        <answer>pairs</answer>
        <correct>0</correct>
        <correct>3</correct>
    </question>
    <question type="multi_choice">
        <text>What is true about maps?</text>
        <answer>They hold pairs of elements.</answer>
        <answer>Duplicate keys are allowed.</answer>
        <answer>Duplicate values are allowed.</answer>
        <answer>The keys of a map are always integers.</answer>
        <correct>0</correct>
        <correct>2</correct>
    </question>
    <question type="true_false">
        <text>Maps can efficiently retrieve a value, given a key.</text>
        <correct>true</correct>
    </question>

    <!-- Questions about collection utilities -->
    <question type="true_false">
        <text>Immutable collections are readonly.</text>
        <correct>true</correct>
    </question>
    <question type="text">
        <text>Which class provides utility methods for data structures?</text>
        <correct>Collections</correct>
        <correct>java.util.Collections</correct>
    </question>
    <question type="text">
        <text>Which interface can be implemented if we want to define an ordering between objects?</text>
        <correct>Comparable</correct>
        <correct>java.lang.Comparable</correct>
    </question>
    <question type="true_false">
        <text>Methods that require an ordering of elements will work for primitives and their wrappers.</text>
        <correct>true</correct>
    </question>
    <question type="true_false">
        <text>Methods that require an ordering of elements will work for strings.</text>
        <correct>true</correct>
    </question>
    <question type="true_false">
        <text>Methods that require an ordering of elements will work for any class.</text>
        <correct>false</correct>
    </question>
    <question type="text">
        <text>We're comparing the current object with another one, and we find they're equal. What should we return?</text>
        <correct>0</correct>
    </question>
    <question type="multi_choice">
        <text>Which interfaces are part of the Java collections framework?</text>
        <answer>java.util.List</answer>
        <answer>java.lang.Comparable</answer>
        <answer>java.util.Map</answer>
        <answer>java.io.Serializable</answer>
        <correct>0</correct>
        <correct>2</correct>
    </question>
    <question type="multi_choice">
        <text>Which collections maintain an ordering of their elements?</text>
        <answer>Lists.</answer>
        <answer>Sets.</answer>
        <answer>Maps.</answer>
        <answer>Stacks.</answer>
        <correct>0</correct>
        <correct>3</correct>
    </question>

    <!--
    <question type="single_choice">
        <text></text>
        <answer></answer>
        <answer></answer>
        <answer></answer>
        <answer></answer>
        <correct></correct>
    </question>

    <question type="multi_choice">
        <text></text>
        <answer></answer>
        <answer></answer>
        <answer></answer>
        <answer></answer>
        <correct></correct>
        <correct></correct>
    </question>

    <question type="true_false">
        <text></text>
        <correct></correct>
    </question>

    <question type="text">
        <text></text>
        <correct></correct>
        <correct></correct>
    </question>
    -->
</resources>