<?xml version="1.0" encoding="utf-8"?>

<!--Belongs to course 'Primitives, control flow and I/O' -->

<resources>
    <chapterdata>
        <id>103</id>
        <name>Controlling the flow: loops</name>
    </chapterdata>
    <text>
        <![CDATA[
        There are cases when we want to execute statements multiple times. This is when we should use
        <b>loops</b>. Consider the following example:
        ]]>
    </text>
    <boxed title="Example">
        <![CDATA[
        We would like to print the first 10 natural numbers, 0-9, each in their own line.
        ]]>
    </boxed>
    <text>
        <![CDATA[
        You may think 'wait a minute, I can already do this'. Simply calling the <b>println</b> method
        10 times is going to to do exactly what we want:
        ]]>
    </text>
    <code>
        <![CDATA[
         <font color="#999900">System</font>.out.println(0);
<br/><font color="#999900">System</font>.out.println(1);
<br/><font color="#999900">System</font>.out.println(2);
<br/><font color="#999900">System</font>.out.println(3);
<br/><font color="#999900">System</font>.out.println(4);
<br/><font color="#999900">System</font>.out.println(5);
<br/><font color="#999900">System</font>.out.println(6);
<br/><font color="#999900">System</font>.out.println(7);
<br/><font color="#999900">System</font>.out.println(8);
<br/><font color="#999900">System</font>.out.println(9);
        ]]>
    </code>
    <text>
        <![CDATA[
        This code is, however, very long and ugly. Now we will take a look at the different <b>loops</b>
        in Java, and we will solve our example using the loop best suited to it.
        ]]>
    </text>
    <title text="for loop"/>
    <text>
        <![CDATA[
        The for loop should be used when we would like to execute statements repeatedly, and we <b>know
        exactly how many times we must execute the statements</b>. Thus, this loops offers the best solution
        for the example, as we know that the print method must be called 10 times!
        <br><br>
        Here is the solution. The syntax of the for loop is analyzed below.
        ]]>
    </text>
    <code>
        <![CDATA[
<font color="#E65100">for</font>(<font color="#DF7401">int </font>i=0; i&lt;10; i++) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.out.println(i);
<br/>}
        ]]>
    </code>
    <text>
        <![CDATA[
        As you can see, 3 things can be specified when creating a for loop, and these are separated
        by semi colons.
        ]]>
    </text>
    <list>
        <![CDATA[
        <ul>
        <li> Declaring and initializing the <b>iterator variable</b> (or variables). In our case,
         this is <i>'int i=0</i>. This variable is only visible inside the loop.</li>
        <li> Giving a <b>terminating condition</b>. When this condition is true, the loop continues, as soon
        as it becomes false, it stops. These conditions are usually about the iterator variable. Our condition is '<i>i&lt;10</i>'.</li>
        <li> <b>Updating the iterator variable</b>. This is done so that the terminating condition can eventually
        become false.</li>
        </ul>
        ]]>
    </list>
    <boxed title="i++, i--">
        <![CDATA[
        The <b>++</b> operator is not something we have seen before. It is, however, very simple. All it does is
        <b>increment</b> (add one to) the integer variable it's called on. Thus, it's just a short version of <b>i = i+1</b>.
        <br><br>
        Similarly, we can also <b>decrement</b> such a variable using the <b>--</b> operator. It is short for <b>i = i-1</b>.
        ]]>
    </boxed>
    <text>
        <![CDATA[
        By convention, the iterator variable is usually called <i>i</i>, or <i>j, k, etc</i> if <i>i</i> is taken.
        ]]>
    </text>
    <advanced title="Optional for loop components">
        <![CDATA[
        Surprisingly, none of the 3 listed components is actually required. For example, we can simply not
        update the value of the iterator variable in the for statement, like this:
        <br><br>
        <i>for(int j=-3; j>=-10;) { ... }</i>
        <br><br>
        We must be careful to manually update the value of <i>j</i> inside the loop, to eventually satisfy the
        terminating condition.
        ]]>
    </advanced>
    <title text="while loop"/>
    <text>
        <![CDATA[
        The while loop is for cases when we <b>don't know how many times the statements must be executed</b>. This loop,
        unlike <i>for</i>, can't be used to declare an iterator variable. It can only have a terminating condition, which
        is going to be repeatedly checked. The loop is stopped when this condition becomes <b>false</b>, hence the name, <i>while</i>.
        ]]>
    </text>
    <code>
        <![CDATA[
<font color="#999900">String</font> text = "aabbbaaXaaaaaba";
<font color="#DF7401">
<br/>int </font>i = 0; <font color="gray">//iterator</font>
<br/><font color="#E65100">while</font>(i&lt;text.length() && text.charAt(i)!='X') {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.out.print(text.charAt(i));
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;i++;
<br/>}
        ]]>
    </code>
    <text>
        <![CDATA[
        This is a bit more advanced example. The while loop prints the characters of the <i>string</i>, until it finds
        an '<b>X</b>'. The first part of the condition, connected with the <b>AND</b> operator, is necessary to guarantee
        that the the code works, even if our text has no '<b>X</b>' in it.
        <br><br>
        We can now understand why this loop is used for this specific example: We don't know the position of '<b>X</b>' in the text
        (it isn't even sure if there is one), so we <b>don't know how many times we must print a character</b> beforehand.
        ]]>
    </text>
    <boxed title="Iterator in while">
        <![CDATA[
        This example shows that it's possible to use iterator variables with a while loop, we just can't use
        any special syntax to declare and update them like in the for loop. Thus, the variable must be <b>declared
        before</b> and <b>updated inside</b> the while loop.
        <br><br>
        We now also have a way to "convert" a for loop into a while loop. The iterator variable must be
        handled in the way described above, and the <i>for</i> keyword must be replaced with <i>while</i>.
        ]]>
    </boxed>
    <title text="do-while loop"/>
    <text>
        <![CDATA[
        This loop is very similar to the while loop, the only difference is that it checks the terminating condition
        <b>after</b> executing the statements inside. Due to this, it's guaranteed that the do-while loop executes its
        statements <b>at least once</b>.
        ]]>
    </text>
    <code>
        <![CDATA[
<font color="#DF7401">int </font>num = getInt();
<font color="#E65100">
<br/><font color="#E65100">do</font> </font>{
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.out.println(num);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;num--;
<br/>} <font color="#E65100">while</font>(num > 0);
        ]]>
    </code>
    <text>
        <![CDATA[
        Suppose that the <i>getInt</i> method returns some integer. The loop will keep printing and decrementing
        it, until it reaches zero. One line, however, will always the printed: the number that the method returned.
        Even if it's not positive, the statements are executed, and only then will the do-while loop check the
        condition and stop.
        ]]>
    </text>
    <title text="Stopping early: break"/>
    <text>
        <![CDATA[
        It is possible to use the <b>break</b> statement to stop looping immediately, to "break out" of the loop.
        Remember the example where we printed the characters of the text until an '<b>X</b>' is found? Here is the
        same example, this time with break:
        ]]>
    </text>
    <code>
        <![CDATA[
<font color="#999900">String</font> text = "aabbbaaXaaaaaba";
<font color="#DF7401">
<br/>int </font>i = 0; <font color="gray">//iterator
</font>
<br/><font color="#E65100">while</font>(i &lt; text.length()) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">if</font>(text.charAt(i) == 'X') {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">break</font>;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.out.print(text.charAt(i));
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;i++;
<br/>}
        ]]>
    </code>
    <text>
        <![CDATA[
        Instead of checking for an '<b>X</b>' within the terminating condition, we used a combination of
        the <b>if and break</b> statements.
        ]]>
    </text>
    <advanced title="Return from a loop">
        <![CDATA[
        It is possible to <b>return</b> from inside a loop. This will also stop the loop, just like the
        break statement. There is only one exception for this, the <b>finally block</b>, which will be covered in a later course.
        ]]>
    </advanced>
    <title text="To the next step: continue"/>
    <text>
        <![CDATA[
        There might be cases where we want to "skip" to the next iteration of a loop. Note that this isn't
        the same as breaking out of the loop! To achieve this, the <b>continue</b> statement can be used.
        <br><br>
        Suppose that we must print the characters of a string, but again, we really dislike '<b>X</b>', and so
        every time we see this character, we want to ignore it instead of printing!
        ]]>
    </text>
    <code>
        <![CDATA[
<font color="#999900">String</font> text = "aabbbaaXabaaaba";
<font color="#E65100">
<br/>for</font>(<font color="#DF7401">int </font>i=0; i&lt;text.length(); i++) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;if(text.charAt(i) == 'X') {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">continue</font>;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.out.print(text.charAt(i));
<br/>}
        ]]>
    </code>
    <text>
        <![CDATA[
        Note that this is very similar to the previous example, only in this case we choose to use a for loop instead
        of a while one. The <b>break</b> statement is replaced with <b>continue</b>. This guarantees that the characters
        after the despicable '<b>X</b>' are also printed!
        ]]>
    </text>
    <title text="Infinite loops"/>
    <text>
        <![CDATA[
        You may have already wondered about or experimented with the possibility of using a terminating condition
        that can <b>never become false</b>. In this case out loop will iterate ever onwards, unless explicitly using a break
        statement (or shutting down the program or the computer, of course).
        ]]>
    </text>
    <boxed title="Debugging">
        <![CDATA[
        You will most often encounter infinite loops when something is wrong with your terminating condition, and so
        your loop can't stop. If your program performs relatively simple tasks, yet it fails to halt for a very long time, it's likely
        that a loop "got stuck" and iterates infinitely. In case of printing inside the loop, you'll notice that the
        application repeatedly prints to the console.
        ]]>
    </boxed>
    <text>
        <![CDATA[
        Though rarely, there are actually cases when we want to use an infinite loop. One common
        example for this is a server application:
        ]]>
    </text>
    <code>
        <![CDATA[
<font color="#E65100">while</font>(<font color="#E65100">true</font>) {
<br/><font color="#E65100"> &nbsp;&nbsp;&nbsp;&nbsp;if</font>(connectionDetected()) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;processConnection();
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>}
        ]]>
    </code>
    <text>
        <![CDATA[
        Suppose that the <i>connectionDetected</i> and the <i>processConnection</i> methods are written somewhere else.
        We can see that the server waits indefinitely, and when it detects that someone want to connect it'll
        handle that connection request, and continue to wait, for the next request.
        ]]>
    </text>
</resources>