<?xml version="1.0" encoding="utf-8"?>

<!--Belongs to course 'Primitives, control flow and I/O' -->

<resources>
    <chapterdata>
        <id>106</id>
        <name>Providing output</name>
    </chapterdata>
    <text>
        <![CDATA[
        In the previous chapter we learned about receiving input from the user. It's equally important
        to display the results of our program.
        ]]>
    </text>
    <title text="Using System.out"/>
    <text>
        <![CDATA[
        This is the standard way of printing the the console. We've already used it many times.
        ]]>
    </text>
    <boxed title="PrintStream">
        <![CDATA[
        Just like <i>System.in</i>, <i>System.out</i> is also a kind of stream. It is however not an InputSteam,
        but an OutputStream, more specifically a <b>PrintStream</b>. This class turns primitive types and strings into
        bytes, before sending them to its output (in case of <i>System.out</i>, this is the console).
        ]]>
    </boxed>
    <text>
        <![CDATA[
        The <i>PrintStream</i> has <b>print methods</b> for each primitive type, and more. It also has a
        corresponding <b>println method</b> for each print method. These do almost the same, but they also
        insert a <b>line break</b> after printing their parameter (println is short for print line).
        ]]>
    </text>
    <boxed title="Escape characters">
        <![CDATA[
        We can use some special characters to manipulate strings. One is the <b>new line character</b>, which is
        <b>"\n"</b>. It inserts a line break where it's used.
        <p>
        Another one is the tabulator character, <b>"\t"</b>, which creates a tabulator space in the string.
        <p>
        For a full list, check the 'escape sequences' part of <a href="https://docs.oracle.com/javase/tutorial/java/data/characters.html">
        character documentation</a>.
        ]]>
    </boxed>
    <text>
        <![CDATA[
        So all the <i>println</i> methods do is calling the corresponding print method, but they add the <b>"\n"</b> character
        to the end of their parameter!
        <br><br>
        See this code sample and image for some examples:
        ]]>
    </text>
    <code>
        <![CDATA[
        <font color="#E65100">public</font> static <font color="#DF7401">void</font> main(<font color="#999900">String</font>[] args) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//usage of the line <font color="#E65100">break</font> character
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.out.println("Line 1\nLine 2");
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//this just prints a line <font color="#E65100">break</font>
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.out.println();
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//usage of the tab character
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.out.println("Tab1\tTab2");
<br/>}
        ]]>
    </code>
    <text>
        <![CDATA[
        When running this code, the text will indeed appear formatted in the console:
        ]]>
    </text>
    <image name="formatted_text"/>
    <advanced title="System.err">
        <![CDATA[
        <i>System.err</i> is another <i>PrintStream</i>, tuned to the standard error output. By default this also
        appears on the console, but with a red text color. You can test this yourself.
        ]]>
    </advanced>
    <title text="Writing to files"/>
    <text>
        <![CDATA[
        Another way of providing output is to write to files. The <b>PrintWriter</b> class is very useful, as we
        can use it not only to print to the console, but also to a file!
        ]]>
    </text>
    <code>
        <![CDATA[
<font color="#E65100">public</font> static <font color="#DF7401">void</font> main(<font color="#999900">String</font>[] args)
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">throws</font> <font color="#999900">Exception</font> {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//create the PrintWriter
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">PrintWriter</font> pw = <font color="#E65100">new</font> <font color="#999900">PrintWriter</font>("output.txt", "UTF-8");
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//print something to file
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;pw.println("This is a line");
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;pw.print("Here is another line");
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;pw.close();
<br/>}
        ]]>
    </code>
    <text>
        <![CDATA[
        Just as with reading from files, Java requires us to implement some exception handling, but we don't
        know how to do that yet, so the same hacky solution is used (<i>throws Exception</i>).
        <p>
        The second parameter of the PrintWriter specifies the <a href="https://en.wikipedia.org/wiki/Character_encoding">
        character encoding</a>. A solid choice is <b>UTF-8</b>.
        ]]>
    </text>
    <boxed title="Existing file">
        <![CDATA[
        If we give the name of a file that <b>doesn't exist</b> in the file system, the file will be created, and then
        our program will print to it.
        <p>
        If the file we gave to the PrintWriter <b>already exists</b>, then all its content will be erased, and only then will
        our program print to it.
        ]]>
    </boxed>
    <text>
        <![CDATA[
        In many cases, we don't want to erase the content of the file we are writing to, instead, we want to <b>append</b>
        lines to the end of it.
        <p>
        We must construct our <i>PrintWriter</i> a bit differently to achieve this behaviour:
        ]]>
    </text>
    <code>
        <![CDATA[
        <font color="#E65100">public</font> static <font color="#DF7401">void</font> main(<font color="#999900">String</font>[] args)
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">throws</font> <font color="#999900">Exception</font> {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">File</font> file = <font color="#E65100">new</font> <font color="#999900">File</font>("output.txt");
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">FileOutputStream</font> fos = <font color="#E65100">new</font> <font color="#999900">FileOutputStream</font>(file, true);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//this PrintWriter will append	&nbsp;&nbsp;&nbsp;&nbsp;
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">PrintWriter</font> pw = <font color="#E65100">new</font> <font color="#999900">PrintWriter</font>(fos);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//print something to file
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;pw.println("Line printed!");
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;pw.close();
<br/>}
        ]]>
    </code>
    <text>
        <![CDATA[
        The key is the second parameter of the <b>FileOutputSteam</b>. By setting it to true we enable the append mode.
        <p>
        Run the code multiple times, and note that the contents of <i>output.txt</i> will increase by one line
        after every run!
        ]]>
    </text>
    <title text="Another way to write to file"/>
    <text>
        <![CDATA[
        Similarly to how we read files, we can also use the <b>Files</b> utility class as well. This is useful when
        we already have out lines placed in a list or an array:
        ]]>
    </text>
    <code>
        <![CDATA[
        <font color="#E65100">public</font> static <font color="#DF7401">void</font> main(<font color="#999900">String</font>[] args)
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">throws</font> <font color="#999900">Exception</font> {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//create the lines
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">ArrayList</font>&lt;String> lines = createLines();
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//create path object
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">Path</font> filePath = <font color="#999900">Paths</font>.get("output.txt");
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">Files</font>.write(filePath, lines, <font color="#999900">StandardCharsets</font>.<font color="#999900">UTF_8</font>);
<br/>}
<br/>
<br/><font color="gray">/*
<br/>This method creates our lines,
<br/>placed in a list.
<br/>*/</font>
<br/><font color="#E65100">static</font> <font color="#999900">ArrayList</font>&lt;String> createLines() {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//construct list
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">ArrayList</font>&lt;String> l = <font color="#E65100">new</font> <font color="#999900">ArrayList</font>&lt;>();
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//add some lines
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;l.add("line 1");
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;l.add("line 2");
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;l.add("line 3");
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">return</font> l;
<br/>}
        ]]>
    </code>
    <text>
        <![CDATA[
        Note that this method does not append by default! To make is append lines to existing files we
        must add an additional parameter to the write method, like so:
        ]]>
    </text>
    <code>
        <![CDATA[
        <font color="#E65100">public</font> static <font color="#DF7401">void</font> main(<font color="#999900">String</font>[] args)
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">throws</font> <font color="#999900">Exception</font> {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//create the lines
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">ArrayList</font>&lt;String> lines = createLines();
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//create path object
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">Path</font> filePath = <font color="#999900">Paths</font>.get("output.txt");
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//this will now append
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">Files</font>.write(filePath, lines, <font color="#999900">StandardCharsets</font>.<font color="#999900">UTF_8</font>,
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">StandardOpenOption</font>.<font color="#999900">APPEND</font>);
<br/>}
<br/>
<br/><font color="gray">/*
<br/>This method creates our lines,
<br/>placed in a list.
<br/>*/</font>
<br/><font color="#E65100">static</font> <font color="#999900">ArrayList</font>&lt;String> createLines() {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//construct list
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">ArrayList</font>&lt;String> l = <font color="#E65100">new</font> <font color="#999900">ArrayList</font>&lt;>();
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//add some lines
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;l.add("line 1");
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;l.add("line 2");
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;l.add("line 3");
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">return</font> l;
<br/>}
        ]]>
    </code>
</resources>