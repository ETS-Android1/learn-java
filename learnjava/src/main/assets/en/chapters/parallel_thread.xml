<?xml version="1.0" encoding="utf-8" standalone="no"?>
<resources>
    <chapterdata>
        <id>252</id>
        <name>The Thread class</name>
    </chapterdata>

    <!-- Basic classes: Thread, Runnable, ...
     different ways to start threads -->

    <text>
        <![CDATA[
        In this chapter, we'll take a look at how can we start new threads in Java.
        ]]>
    </text>
    <title text="The Thread class"/>
    <text>
        <![CDATA[
        It's no surprise that multithreading is also implemented in an object oriented way. The most important class
        is <a href="https://docs.oracle.com/javase/7/docs/api/java/lang/Thread.html">java.lang.Thread</a>.
        ]]>
    </text>
    <code><![CDATA[
        
        <font color="gray">//create a thread</font>
<br/><font color="#999900">Thread</font> t1 = <font color="#E65100">new</font> <font color="#999900">Thread</font>();	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;
<br/><font color="gray">//start this thread</font>
<br/>t1.<font color="#ADD8E6">start</font>();
        
    ]]></code>
    <text>
        <![CDATA[
        So what will this thread do? Well, nothing. This is obvious, since we didn't specify anything that it
        could execute.
        ]]>
    </text>
    <boxed title="Thread lifecycle">
        <![CDATA[
        When you instantiate the <i>Thread</i> class, no execution is started yet. After the <i>start</i> method is called,
        the thread starts executing it's statements. This can be stopped and continued. When execution is finished the
        thread 'dies', and can not be started again.
        ]]>
    </boxed>
    <text>
        <![CDATA[
        To pass statements to execute to a thread, an interface is used: <a href="https://docs.oracle.com/javase/7/docs/api/java/lang/Runnable.html">java.lang.Runnable</a>. This interface
        only has one method, <i>run</i>, and what is inside this method will be executed by the thread.
        ]]>
    </text>
    <title text="Passing the runnable to the thread"/>
    <text>
        <![CDATA[
        There are multiple ways to pass the runnable the the thread object. The simplest (but not the shortest) is probably implementing the runnable
        interface in a separate class:
        ]]>
    </text>
    <code><![CDATA[
        
<font color="#E65100">class</font> <font color="#999900">GreetRunnable</font> <font color="#E65100">implements</font> <font color="#999900">Runnable</font> {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//override the run method to do something</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="red">@Override</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#DF7401">void</font> <font color="#ADD8E6">run</font>() {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(<font color="#2E8B57">"Hello from a thread!"</font>);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>}
        
    ]]></code>
    <text>
        <![CDATA[
        Then, we can instantiate this class, and pass it to a thread, since it's a runnable.
        ]]>
    </text>
    <code><![CDATA[
        
<font color="gray">//create a thread using the runnable</font>
<br/><font color="#999900">Thread</font> t1 = <font color="#E65100">new</font> <font color="#999900">Thread</font>(<font color="#E65100">new</font> <font color="#999900">GreetRunnable</font>());	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;
<br/><font color="gray">//start the thread</font>
<br/>t1.<font color="#ADD8E6">start</font>();
        
    ]]></code>
    <text>
        <![CDATA[
        As expected, this thread will print the greeting to the console.
        ]]>
    </text>
    <text>
        <![CDATA[
        Another, more preferred way to pass the runnable is to use an anonymous class.
        ]]>
    </text>
    <boxed title="Anonymous classes">
        <![CDATA[
        Java provides a way to quickly declare and use a class. Such classes can only be used be used once, because
        they won't have a name to reference them later (hence the expression anonymous). You'll see the syntax through the
        examples below, but if you need more explanation, plenty is provided <a href="https://docs.oracle.com/javase/tutorial/java/javaOO/anonymousclasses.html">here</a>.
        ]]>
    </boxed>
	 <text>
        <![CDATA[
        So we can implement the runnable with an anonymous class:
        ]]>
    </text>
    <code><![CDATA[
        
<font color="gray">//create a thread using an anonymous runnable</font>
<br/><font color="#999900">Thread</font> t1 = <font color="#E65100">new</font> <font color="#999900">Thread</font>(<font color="#E65100">new</font> <font color="#999900">Runnable</font>() {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="red">@Override</font> <font color="gray">//override the run method here</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#DF7401">void</font> <font color="#ADD8E6">run</font>() {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(<font color="#2E8B57">"Hello from an anonymous runnable!"</font>);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>});	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;
<br/><font color="gray">//start the thread
</font>
<br/>t1.<font color="#ADD8E6">start</font>();
        
    ]]></code>
    <text>
        <![CDATA[
        This does the same thing, but we did not need to declare a full-fledged custom class. If you'll only use
        the runnable once, this is the preferred way. If you plan to reuse it, just write a normal class, instead of
        placing the anonymous declaration everywhere.
        ]]>
    </text>
    <boxed title="Lambda expression">
        <![CDATA[
        Java 8 introduced a new way to pass the runnable, one that is even more 
		compact, lambda expressions. This is possible, because the <i>Runnable</i> is 
		actually a functional interface.
        ]]>
    </boxed>
	<text>
        <![CDATA[
        As a result, we can use a lambda to create the runnable in a very compact way:
        ]]>
    </text>
    <code><![CDATA[
        
        <font color="gray">//create a thread using a lambda expression</font>
<br/><font color="#999900">Thread</font> t1 = <font color="#E65100">new</font> <font color="#999900">Thread</font>(() -> <font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(<font color="#2E8B57">"Hello from a lambda!"</font>));
<br/><font color="gray">//start the thread</font>
<br/>t1.<font color="#ADD8E6">start</font>();
        
    ]]></code>
    <text>
        <![CDATA[
        No, it's still not over. Interestingly, the <i>Thread</i> class also implements <i>Runnable</i>, but it's <i>run</i> method
        is empty. This is why our first code sample did nothing. We can however subclass <i>Thread</i> and override the method
        there:
        ]]>
    </text>
    <code><![CDATA[
        
<font color="#E65100">class</font> <font color="#999900">GreetThread</font> <font color="#E65100">extends</font> <font color="#999900">Thread</font> {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="red">@Override</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#DF7401">void</font> <font color="#ADD8E6">run</font>() {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">String</font> name = <font color="#ADD8E6">getName</font>(); <font color="gray">//get the thread's name
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">for</font>(<font color="#DF7401">int</font> i=<font color="#F0E130">0</font>; i&lt;<font color="#F0E130">50</font>; i++) { <font color="gray">//greet us 50 times
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(<font color="#2E8B57">"Hello, I'm "</font> + name);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>}
        
    ]]></code>
    <text>
        <![CDATA[
        As you can see, thread objects have names, which you can get and set with the appropriate getters and setters.
        ]]>
    </text>
    <code><![CDATA[
        
 <font color="#999900">GreetThread</font> t1 = <font color="#E65100">new</font>  <font color="#999900">GreetThread</font>();
<br/>t1.<font color="#ADD8E6">setName</font>(<font color="#2E8B57">"Thread 1"</font>); <font color="gray">//set the thread's name
</font>
<br/>t1.<font color="#ADD8E6">start</font>();
        
    ]]></code>
    <interactive instruction="Create the thread using an anonymous runnable!">
        <data><![CDATA[

<font color="#999900">Thread</font> thread = <font color="#E65100">new</font> <font color="#999900">Thread</font>(<font color="#E65100">new</font> <font color="#ADD8E6">___</font>() {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="red">@Override</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#DF7401">void</font> <font color="#ADD8E6">___</font>() {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//do some long calculation here...
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>});

        ]]></data>
        <answer place="0">Runnable</answer>
        <answer place="1">run</answer>
    </interactive>
    <title text="Demonstration"/>
    <text>
        <![CDATA[
        All this effort, and we didn't even see a proper demonstration of parallel execution. Let's remedy this. I'll use
        the previously created <i>GreetThread</i> class.
        ]]>
    </text>
    <code><![CDATA[
        
<font color="gray">//create 2 threads, with different names</font>
<br/><font color="#999900">GreetThread</font> t1 = <font color="#E65100">new</font> <font color="#999900">GreetThread</font>();
<br/>t1.<font color="#ADD8E6">setName</font>(<font color="#2E8B57">"Thread 1"</font>);
<br/><font color="#999900">GreetThread</font> t2 = <font color="#E65100">new</font> <font color="#999900">GreetThread</font>();
<br/>t2.<font color="#ADD8E6">setName</font>(<font color="#2E8B57">"Thread 2"</font>);
<br/>
<br/><font color="gray">//start both</font>
<br/>t1.<font color="#ADD8E6">start</font>();
<br/>t2.<font color="#ADD8E6">start</font>();
        
    ]]></code>
    <text>
        <![CDATA[
        In a sequential program, you'd see thread 1 greeting us 50 times, then thread 2 doing the same. But if you run
        this, you'll note that the greetings are mixed together, thus the threads run and print in parallel.
        ]]>
    </text>
    <image name="thread_demonstration"/>
    <boxed title="Non-determinism">
        <![CDATA[
        This example also shows that parallel programs are actually non-deterministic. Run it a few times and you'll see
        that the exact order in which the two threads greet you varies each time. This is because the two threads "race" to
        access the console output, and the <i>OS</i> decides, in unpredictable ways which thread can access it.
        ]]>
    </boxed>
</resources>
