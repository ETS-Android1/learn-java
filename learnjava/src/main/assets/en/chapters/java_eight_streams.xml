<?xml version="1.0" encoding="utf-8" standalone="no"?>
<resources>
    <chapterdata>
        <id>354</id>
        <name>Folyamok</name>
    </chapterdata>
    <text>
        <![CDATA[
        A <i>Java 8</i>-ban bevezetett 
		<a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html">java.util.stream.Stream</a> (folyam) 
		interfész új lehetőségeket biztosít a kollekciókkal és más adatforrásokkal való munkához.
        ]]>
    </text>
    <boxed title="Lambda kifejezések">
        <![CDATA[
        A folyam műveletek a lambda kifejezésekre (és így a funkcionális interfészekre) támaszkodnak, hogy kompaktak legyenek. 
		Győződj meg róla, hogy megértetted ezeket a fogalmakat, mielőtt belevágsz ebbe a fejezetbe.
        ]]>
    </boxed>
    <text>
        <![CDATA[
        Általánosságban ez fog történni:
        ]]>
    </text>
    <list>
        <![CDATA[
        <ul>
            <li>Konvertáljuk a kollekciót egy folyammá, azaz egy <i>Stream</i> példánnyá.</li>
            <li>Műveleteket hajtunk végre ezen a folyamon.</li>
            <li>A műveletek eredményét kiolvassuk, vagy a módosított folyamot visszaalakítjuk kollekcióvá.</li>
        </ul>
        ]]>
    </list>
	<text>
		<![CDATA[
        Most bemutatom az átjárást a kollekciók és a folyamok között, oda-vissza.
        ]]>
    </text>
    <title text="Kollekciók folyammá alakítása"/>
    <text>
        <![CDATA[
        A <i>Collection</i> interfész <i>stream</i> metódusának meghívásával bármelyik gyűjtemény folyamját megkaphatjuk. 
		Vegyün ezt a példát, ahol egy listát használok (amely a <i>Collection</i>-t valósítja meg, ezért van <i>stream</i> 
		metódusa):
        ]]>
    </text>
    <code><![CDATA[
        
        <font color="gray">//create list
</font>
<br/><font color="#999900">List</font>&lt;<font color="#999900">Integer</font>> numbers = <font color="#999900">Arrays</font>.<font color="#ADD8E6">asList</font>(<font color="#F0E130">1</font>,<font color="#F0E130">-1,3</font>,<font color="#F0E130">2,4</font>);
<br/><font color="gray">//get a stream of this list
</font>
<br/><font color="#999900">Stream</font>&lt;<font color="#999900">Integer</font>> numStream = numbers.<font color="#ADD8E6">stream</font>();
        
    ]]></code>
    <text>
        <![CDATA[
        Megjegyzendő, hogy a <i>Stream</i> interfész is generikus, a típus paraméterének meg kell egyeznie a kollekcióbeli 
		elemek típusával.
        ]]>
    </text>
    <boxed title="Tömbök folyammá alakítása">
        <![CDATA[
        Maguk a tömbök közvetlenül nem alakíthatók át folyammá, de használhatjuk az <i>Arrays</i> segédosztályt.
        Ennek segítségével először kollekcióvá alakíthatjuk őket (mint a fenti példában), majd abból már lehet folyamot 
		létrehozni.
        ]]>
    </boxed>
    <title text="Folyamok kollekciókká alakítása"/>
    <text>
        <![CDATA[
        Ha egy adatfolyamból kollekciót szeretnél létrehozni, használjd a <i>collect</i> metódust. A metódus paramétere 
		dönti el, hogy milyen kollekcióvá alakítja át a folyamot (leggyakrabban listát használunk).
        ]]>
    </text>
    <boxed title="Collectors osztály">
        <![CDATA[
        Szerencsénkre számos előre definiált "gyűjtő" (<i>collector</i>) áll rendelkezésre a 
		<a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/Collectors.html">java.util.stream.Collectors</a> 
		segédosztályban. A kurzus során csak olyan egyszerű gyűjtőket fogok használni, mint a <i>toList</i>, de vannak 
		ennél fejlettebbek is gyűjtésére (csoportosítás, számlálás stb...).
        ]]>
    </boxed>
    <text>
        <![CDATA[
        Bővítsük ki az előző példát azzal, hogy a folyamot visszaalakítjuk először listává, majd halmazzá.
        ]]>
    </text>
    <code><![CDATA[
        
        <font color="gray">//create list
</font>
<br/><font color="#999900">List</font>&lt;<font color="#999900">Integer</font>> numbers = <font color="#999900">Arrays</font>.<font color="#ADD8E6">asList</font>(<font color="#F0E130">1</font>,<font color="#F0E130">-1,3</font>,<font color="#F0E130">2,4</font>);
<br/><font color="gray">//get a stream of this list
</font>
<br/><font color="#999900">Stream</font>&lt;<font color="#999900">Integer</font>> numStream = numbers.<font color="#ADD8E6">stream</font>();
<br/><font color="gray">//convert it back to a list (this is a new list!)
</font>
<br/><font color="#999900">List</font>&lt;<font color="#999900">Integer</font>> numbers2 = numStream.<font color="#ADD8E6">collect</font>(<font color="#999900">Collectors</font>.<font color="#ADD8E6">toList</font>());
<br/><font color="gray">//convert it to a new set
</font>
<br/><font color="#999900">Set</font>&lt;<font color="#999900">Integer</font>> numSet = numStream.<font color="#ADD8E6">collect</font>(<font color="#999900">Collectors</font>.<font color="#ADD8E6">toSet</font>());
        
    ]]></code>
    <text>
        <![CDATA[
        Az eredményül kapott lista és halmaz ugyanazokkal az elemekkel fog rendelkezni, mint az eredeti lista, mivel még nem 
		végeztünk műveleteket a folyamon.
        ]]>
    </text>
    <interactive instruction="Alakítsd a listát folyammá, majd vissza listává!">
        <data><![CDATA[
           
        <font color="#999900">List</font>&lt;<font color="#999900">Character</font>> letters = ___.<font color="#ADD8E6">asList</font>(<font color="#2E8B57">'c'</font>,<font color="#2E8B57">'a'</font>,<font color="#2E8B57">'b'</font>,<font color="#2E8B57">'d'</font>);
<br/>letters = letters.<font color="#ADD8E6">___</font>().<font color="#ADD8E6">collect</font>(___.<font color="#ADD8E6">toList</font>());
        
        ]]></data>
        <answer place="0">Arrays</answer>
        <answer place="1">stream</answer>
        <answer place="2">Collectors</answer>
    </interactive>
    <title text="Folyamműveletek"/>
    <text>
        <![CDATA[
        A folyamok által biztosított műveletekkel módosíthatjuk egy adatfolyam tartalmát, vagy kiolvashatjuk annak 
		valamilyen tulajdonságát.
        ]]>
    </text>
    <boxed title="Egy utasítás">
        <![CDATA[
        A következő példákban a konverziókat és a műveleteket egy utasításban végzem el,
        mivel a folyamokat leggyakrabban így használják. A folyamokat nem konvertálom vissza a
        kollekciókká, mivel erre most nem lesz szükség.
        ]]>
    </boxed>
    <text>
        <![CDATA[
        A halmaz olyan adatstruktúra, amiben az elemeknek nincs sorrendje, és minden elem csak egyszer szerepelhet. Ez 
		a matematikai halmaz implementációja, aminek osztálya a <i>JDK</i>-ban a <i>Set</i> kollekció. A példákat a következő 
		halmazon fogom bemutatni:
        ]]>
    </text>
    <code><![CDATA[
        
<font color="#999900">Set</font>&lt;<font color="#999900">String</font>> languages = <font color="#E65100">new</font> <font color="#999900">HashSet</font>&lt;>();
<br/>languages.<font color="#ADD8E6">add</font>(<font color="#2E8B57">"Java"</font>);
<br/>languages.<font color="#ADD8E6">add</font>(<font color="#2E8B57">"C++"</font>);
<br/>languages.<font color="#ADD8E6">add</font>(<font color="#2E8B57">"C#"</font>);
<br/>languages.<font color="#ADD8E6">add</font>(<font color="#2E8B57">"JavaScript"</font>);
<br/>languages.<font color="#ADD8E6">add</font>(<font color="#2E8B57">"Python"</font>);
<br/>languages.<font color="#ADD8E6">add</font>(<font color="#2E8B57">"PHP"</font>);
<br/>languages.<font color="#ADD8E6">add</font>(<font color="#2E8B57">"Kotlin"</font>);
<br/><font color="gray">//a forEach-et már ismerjük</font>
<br/><font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(<font color="#2E8B57">"Languages in the set: "</font>);
<br/>languages.<font color="#ADD8E6">forEach</font>(lang -> <font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">print</font>(lang + <font color="#2E8B57">", "</font>));
        
    ]]></code>
    <text>
        <![CDATA[
        Az első művelet a <b>szűrés</b> (<i>filter</i>). Ez lehetővé teszi számunkra, hogy egy feltétel alapján válasszuk 
		ki csak azokat az elemeket, amik kielégítik a feltételt. A feltételt az korábbi fejezetben már látott 
		<a href="https://docs.oracle.com/javase/8/docs/api/java/util/function/Predicate.html">Predicate</a> segítségével 
		adjuk meg. Mivel ez funkcionális interfész, ezért használhatunk lambdát:
        ]]>
    </text>
    <code><![CDATA[
        
        <font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(<font color="#2E8B57">"Languages which begin with 'C':"</font>);
<br/>languages.<font color="#ADD8E6">stream</font>().<font color="#ADD8E6">filter</font>(lang -> lang.<font color="#ADD8E6">startsWith</font>(<font color="#2E8B57">"C"</font>))
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;.<font color="#ADD8E6">forEach</font>(lang -> <font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">printf</font>(lang+<font color="#2E8B57">", "</font>));
        
    ]]></code>
    <text>
        <![CDATA[
        Ezúttal a 'C' karakterrel kezdődő elemeket válogattam ki, majd ezekez a <i>forEach</i> segítségével kiírtam. 
        ]]>
    </text>
    <interactive instruction="Hozz létre egy listát, amiben az 'a' és 'c' értékek már nincsenek benne!">
        <data><![CDATA[
            
            <font color="#999900">List</font>&lt;<font color="#999900">Character</font>> letters = <font color="#999900">Arrays</font>.<font color="#ADD8E6">asList</font>(<font color="#2E8B57"><font color="#2E8B57">'c'</font></font>,<font color="#2E8B57"><font color="#2E8B57"><font color="#2E8B57">'a'</font></font></font>,<font color="#2E8B57">'b'</font>,<font color="#2E8B57">'d'</font>,<font color="#2E8B57"><font color="#2E8B57"><font color="#2E8B57">'a'</font></font></font>);
<br/>letters = letters.<font color="#ADD8E6">stream</font>()
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;.<font color="#ADD8E6">___</font>(letter -> letter == <font color="#2E8B57"><font color="#2E8B57"><font color="#2E8B57">'a'</font></font></font> || letter == <font color="#2E8B57"><font color="#2E8B57">'c'</font></font>)
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;.<font color="#ADD8E6">collect</font>(<font color="#999900">Collectors</font>.<font color="#ADD8E6">___</font>());
            
        ]]></data>
        <answer place="0">filter</answer>
        <answer place="1">toList</answer>
    </interactive>
    <text>
        <![CDATA[
		Megszámolhatjuk a folyam elemekeit. Ezúttal az érdekel, hogy hány nyelv neve kezdődik <i>'Java'</i>-val. 
		Ez azt jelenti, hogy először szűrés kell, majd számolás:
        ]]>
    </text>
    <code><![CDATA[
        
<font color="#DF7401">long</font> res = languages.<font color="#ADD8E6">stream</font>()
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;.<font color="#ADD8E6">filter</font>(lang -> lang.<font color="#ADD8E6">startsWith</font>(<font color="#2E8B57">"Java"</font>))
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;.<font color="#ADD8E6">count</font>();
<br/><font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(<font color="#2E8B57">"Starts with Java: "</font> + res);
        
    ]]></code>
    <text>
        <![CDATA[
        Ismét nem kellett kollekcióvá alakítani a folyamot, mert csak a <i>count</i visszatérési értékére volt szükségünk.
        <br><br>
        A következő lépés a <b>leképezés</b> (<i>map</i>). Ez lehetővé teszi a folyam adatainak megváltoztatását egy 
		<i>Function</i> funkcionális interfész segítségével (amit lambda kifejezéssel meg tudunk adni).
        ]]>
    </text>
    <code><![CDATA[
        
              <font color="gray">//Írjuk ki a nevek hosszát, azaz String -> int leképezést végzünk
</font>
<br/>languages.<font color="#ADD8E6">stream</font>()
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;.<font color="#ADD8E6">map</font>(lang -> lang.<font color="#ADD8E6">length</font>()) <font color="gray">//or mapToInt
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;.<font color="#ADD8E6">forEach</font>(length -> <font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">print</font>(length+<font color="#2E8B57">", "</font>));
        
    ]]></code>
    <interactive instruction="Alakítsd a karakter (char) listát String listává!">
        <data><![CDATA[
            
            <font color="#999900">List</font>&lt;<font color="#999900">Character</font>> letters = <font color="#999900">Arrays</font>.<font color="#ADD8E6">asList</font>(<font color="#2E8B57">'c'</font>,<font color="#2E8B57"><font color="#2E8B57">'a'</font></font>,<font color="#2E8B57">'b'</font>,<font color="#2E8B57">'d'</font>,<font color="#2E8B57"><font color="#2E8B57">'a'</font></font>);
<br/><font color="#999900">List</font>&lt;<font color="#999900">String</font>> stringLetters = letters.<font color="#ADD8E6">___</font>()
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;.<font color="#ADD8E6">___</font>(letter -> <font color="#999900">String</font>.<font color="#ADD8E6">valueOf</font>(___))
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;.<font color="#ADD8E6">collect</font>(<font color="#999900">Collectors</font>.<font color="#ADD8E6">toList</font>());
            
        ]]></data>
        <answer place="0">stream</answer>
        <answer place="1">map</answer>
        <answer place="2">letter</answer>
        <default place="1">filter</default>
    </interactive>
    <text>
        <![CDATA[
        Érdemes megnézni az <i>anyMatch</i> metódust is, amely azt vizsgálja, hogy létezik-e legalább
        egy elem a folyamban, amely megfelel egy feltételnek (szintén <i>Predicate</i>-el van megadva).
        ]]>
    </text>
    <code><![CDATA[
        
        <font color="gray">//nézzük meg, hogy a 'Python' eleme-e a folyamnak
</font>
<br/><font color="#DF7401">boolean</font> includes = languages.<font color="#ADD8E6">stream</font>()
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;.<font color="#ADD8E6">anyMatch</font>(lang -> lang.<font color="#ADD8E6">equals</font>(<font color="#2E8B57">"Python"</font>));
<br/><font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(<font color="#2E8B57">"Python is in the set: "</font> + includes);
        
    ]]></code>
    <text>
        <![CDATA[
        Ennek a metódusnak van egy párja is, az <i>allMatch</i>, amely csak akkor ad vissza igazat, ha minden 
		elem teljesíti a feltételt.
        ]]>
    </text>
    <title text="A műveletek kombinálása"/>
    <text>
        <![CDATA[
        A folyamműveletek valódi ereje akkor válik világossá, amikor "láncba fűzzük" őket. Például,
        szeretnénk <b>begyűjteni a 'P'-vel kezdődő nevek hosszát egy új listába<b>. Ekkor egymás után kapcsoljuk a 
		szűrés, majd a számlálás műveletet, és ezek eredményét alakítjuk vissza listává:
        ]]>
    </text>
    <code><![CDATA[
        
<font color="#999900">List</font>&lt;<font color="#999900">Integer</font>> lengths = languages.<font color="#ADD8E6">stream</font>()
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;.<font color="#ADD8E6">filter</font>(lang -> lang.<font color="#ADD8E6">startsWith</font>(<font color="#2E8B57">"P"</font>)) <font color="gray">//filter to 'P' start
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;.<font color="#ADD8E6">map</font>(lang -> lang.<font color="#ADD8E6">length</font>()) <font color="gray">//map to the length
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;.<font color="#ADD8E6">collect</font>(<font color="#999900">Collectors</font>.<font color="#ADD8E6">toList</font>()); <font color="gray">//collect to list</font>
        
    ]]></code>
    <text>
        <![CDATA[
        Természetesen sok más folyamművelet is létezik, amelyeket itt nem mutattam be, ezekért 
        olvasd el a <a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html">Stream dokumentációját</a>.
        ]]>
    </text>
</resources>
