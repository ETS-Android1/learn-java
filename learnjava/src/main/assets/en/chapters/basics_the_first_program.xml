<?xml version="1.0" encoding="utf-8" standalone="no"?>
<!-- 'The first program', belongs to course 'The basics' --><resources>
    <chapterdata>
        <id>53</id>
        <name>The first program</name>
    </chapterdata>
    <text>
        <![CDATA[
        From this point on, you can also write or copy the code samples to your <i>IDE</i>
        and experiment with them. To do this, you need to create a <b>project</b>, where your
        <i>IDE</i> will collect the source code for one program.
        ]]>
    </text>
    <boxed title="Creating an Eclipse project">
        <![CDATA[
        Select <b>File -> New -> New project... </b>, then enter a name for your
        project and click <i>Finish</i>. You will see that your project appears on the left side, with an empty
        <b>src</b> folder.
        ]]>
    </boxed>
    <text>
        <![CDATA[
        For this simple project you can use the default package. If you want your own package,
        right click the src folder and select <b>New -> Package</b>, the name your package.
        <br><br>
        Right click the src folder and select <b>New -> Class</b>, then enter a name for your class.
        Before clicking <i>Finish</i>, make sure to tick the <b>public static void main(String[] args)</b> field!
        If you created your own package, add the new class to that package, and not the <i>src</i> folder.
        <br><br>
        ]]>
    </text>
    <advanced title="Other IDEs">
        <![CDATA[
        If you are using another recommended IDE from the guide, follow the instructions
        <a href="https://www.tutorialspoint.com/intellij_idea/intellij_idea_create_first_java_project.htm">here</a>
        for Intellij Idea, and <a href="https://netbeans.org/kb/docs/java/quickstart.html">here</a> for NetBeans.
        ]]>
    </advanced>
    <text>
        <![CDATA[
        The core of the project has been created for you. After double clicking the source file you just generated,
        you should see something like this on the editor screen (with your own class name, of course):
        ]]>
    </text>
    <code><![CDATA[
        
        <font color="#E65100">public class </font> <font color="#999900">Main</font> {
<br/>
<br/><font color="#E65100">	&nbsp;&nbsp;&nbsp;&nbsp;public static</font><font color="#DF7401"> void </font><font color="#ADD8E6">main</font>(<font color="#999900">String</font>[] args) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">// TODO: Auto-generated method stub</font>
<br/>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
<br/>}
        
    ]]></code>
    <text>
        <![CDATA[
        The part that begins with <i>public static void main</i> is called the <b>main method</b>. Java apps can have many
        different methods, but they always have one main method, like this one. This is where the JVM will start to
        execute our program, and so it is called the application's <b>entry point</b>.
        ]]>
    </text>
    <text>
        <![CDATA[
        The line '<font color="gray">// TODO: Auto-generated method stub</font>' inside the method is called a <b>comment</b>,
        and it will be cowered in a later chapter. Feel free to delete it for now, or you can also just leave it there.
        ]]>
    </text>
    <boxed title="Running our program">
        <![CDATA[
        The code that our IDE has generated is valid, and we can run it right away. To compile and run,
        right click on your project on the left side, and select <b>Run as... -> Java application</b>. You
        can also use the green <i>Run</i> button in the toolbar.
        <br><br>
        Since your main method is practically empty, the application will not do anything.
        ]]>
    </boxed>
    <image name="run_project"/>
    <text>
        <![CDATA[
        Lets add a statement, so our program will print a line to the console for us. In Java, statements
        must end with a ' ; '. Make sure to <b>save</b>
        your changes (<i>Control + S</i>), otherwise the old version will run again!
        ]]>
    </text>
    <code><![CDATA[
        
        <font color="#E65100">public static</font> <font color="#DF7401">void</font> <font color="#ADD8E6">main</font>(<font color="#999900">String</font>[] args) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(<font color="#2E8B57">"Hello, world!"</font>);
<br/>}
        
    ]]></code>
    <text>
        <![CDATA[
        As you can see, we can print text to the console with the <b>System.out.println()</b> method.
        Anything we write inside the parentheses, between " " symbols will be shown on the console!
        You can replace the "Hello, world" with any text of your choosing!
        ]]>
    </text>
    <text>
        <![CDATA[
        If we run the project again we can see that the console is opened (somewhere near the bottom of the screen),
         and it shows our message.
        ]]>
    </text>
    <title text="Getting error messages"/>
    <text>
        <![CDATA[
        If you get some kind of error message, make sure your main method is the same as the one above.
        It's easy to miss the ';' at the end of the line, or to forget that the message we want printed
        must be between " " symbols.
        <br><br>
        For example, let's suppose we forgot our " " symbols, and our main method looks like this:
        ]]>
    </text>
    <code><![CDATA[
        
         <font color="#E65100">public static</font> <font color="#DF7401">void </font><font color="#ADD8E6">main</font>(<font color="#999900">String</font>[] args) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(Hello, world!);
<br/>}
        
    ]]></code>
    <text>
        <![CDATA[
        Even before trying to compile and run, our IDE will notice that something is not right, and will
        highlight the invalid code for us. For example, in Eclipse it will show this message:
        ]]>
    </text>
    <image name="error_highlight"/>
    <text>
        <![CDATA[
        The IDE's error highlighting will greatly help us find errors in our code.
        ]]>
    </text>
    <title text="Let's add more statements"/>
    <text>
        <![CDATA[
        Let us add another print statement for our code, after the previous one.
        ]]>
    </text>
    <code><![CDATA[
        
<font color="#E65100">public static</font> <font color="#DF7401">void </font><font color="#ADD8E6">main</font>(<font color="#999900">String</font>[] args) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(<font color="#2E8B57">"Hello, world!"</font>);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(<font color="#2E8B57">"Have a nice day!"</font>);
<br/>}
        
    ]]></code>
    <text>
        <![CDATA[
        We expect that the messages will appear in the console in the same order as they are in the code.
        Run again, and notice that this is exactly what happens. In general, statements inside a method are executed <b>from top to bottom</b>.
        ]]>
    </text>
    <interactive instruction="Complete the main method so that it prints the text!">
        <data><![CDATA[
            
<font color="#E65100">public</font> ___ <font color="#DF7401">void</font> <font color="#ADD8E6">main</font>(<font color="#999900">String</font>[] args) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">___</font>(<font color="#2E8B57">"Hello, world!"</font>);
<br/>}
        
        ]]></data>
        <answer place="0">static</answer>
        <answer place="1">println</answer>
        <answer place="1">print</answer>
    </interactive>
</resources>
