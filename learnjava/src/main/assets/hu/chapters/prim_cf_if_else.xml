<?xml version="1.0" encoding="utf-8" standalone="no"?>
<!--Belongs to course 'Primitives, control flow and I/O' --><resources>
    <chapterdata>
        <id>102</id>
        <name>Vezérlés: elágazások</name>
    </chapterdata>
    <text>
        <![CDATA[
        Most olyan módszereket fogunk tanulni, amik segítségével ellenőrzihetjük feltételek teljesítését,
        és ennek megfelelően futtatunk bizonyos kódrészleteket. Ez minden komplex program alapvető része. Ennek során
        erősen támaszkodunk majd a <b>boolean</b>-ekre, ezért fontos, hogy az előző fejezet <i>boolean</i>
        részét jól megérted.
        ]]>
    </text>
    <title text="Az if blokk"/>
    <text>
        <![CDATA[
        Az <i>if</i> blokk egy olyan eszköz, melynek segítségével bizonyos kódrészletet (blokkot)
        csak akkor futtatunk le, ha az adott feltétel teljesül. Nem meglepő módon a feltételt egy
        <i>boolean</i> segítségével adjuk meg.
        ]]>
    </text>
    <code><![CDATA[
        
<font color="#DF7401">char </font>testChar = <font color="#2E8B57"><font color="#2E8B57">'a'</font></font>;
<br/><font color="#E65100">if</font>(testChar == <font color="#2E8B57"><font color="#2E8B57">'a'</font></font>) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(<font color="#2E8B57">"The test char is a!"</font>);
<br/>}
        
    ]]></code>
    <text>
        <![CDATA[
        <p>
        Amikor a program elérkezik az <i>if</i> blokkhoz, a megadott feltétel (egyenlő-e a <i>testChar 'a'</i>-val?) ki fog értékelődni,
        azaz a Java megnézi, hogy igaz-e, vagy hamis. Ebben az esetben nyilván igaz lesz, mert épp az
        előző utasításban állítottuk be.
        </p>
        <p>
        Ha a feltétel igaz, akkor minden le fog futni, ami az <i>if</i> blokkon belül van (azaz a kapcsos
        zárójeleken belül). Jelen esetben ez egy kiírató utasítás lesz.
        </p>
        <br><br>
        Ha ezt a kódot futtatod, akkor látható, hogy a kiíratás meg fog történni, mivel a feltétel igaz.
        Ha azonban megváltoztatod a <i>testChar</i> értékét, akkor már nem fog kiíratás történni.
        ]]>
    </text>
    <boxed title="Több feltétel">
        <![CDATA[
        Egy <i>if</i> blokknak úgy adhatunk komplex logikai kifejezést, ha az előző fejezetben említett logikai
        műveletekkel (ÉS, VAGY, stb) több feltételt összekapcsolunk.
        ]]>
    </boxed>
    <text>
        <![CDATA[
        Szeretnénk két feltételt vizsgálni. Először is azt, hogy <i>n1</i> egyenlő-e kettővel, és azt
        is, hogy <i>n2</i> egyenlő-e hárommal. Kicsit nehézkesen, de ezt megtehetjük úgy, hogy az <i>if</i>
        blokkba belerakunk még egy <i>if</i> blokkot:
        ]]>
    </text>
    <code><![CDATA[
        
        <font color="#DF7401">int </font>n1 = <font color="#F0E130">2</font>, n2 = <font color="#F0E130">3</font>;
<br/><font color="#E65100">if</font>(n1 == <font color="#F0E130">2</font>) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">if</font>(n2 == <font color="#F0E130">3</font>) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(<font color="#2E8B57">"n1=2,n2=3"</font>);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>}
        
    ]]></code>
    <text>
        <![CDATA[
        Szebb megoldás azonban az ÉS operátor használata. Ezzel összekapcsolhatjuk a két feltételt egy nagy
        feltétellé, ami pontosan akkor lesz igaz, ha mindkét eredeti feltétel igaz:
        ]]>
    </text>
    <code><![CDATA[
        
        <font color="#DF7401">int </font>n1 = <font color="#F0E130">2</font>, n2 = <font color="#F0E130">3</font>;
<br/><font color="#E65100">if</font>(n1 == <font color="#F0E130">2</font> && n2 == <font color="#F0E130">3</font>) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(<font color="#2E8B57">"n1=2,n2=3"</font>);
<br/>}
        
    ]]></code>
    <interactive instruction="Egészítsd ki a programot úgy, hogy csak akkor történjen kiíratás, ha a szám 10!">
        <data><![CDATA[

<font color="#DF7401">int</font> number = <font color="#ADD8E6">getNumber</font>(); <font color="gray">//suppose this returns an integer</font>
<br/>___ (number ___ <font color="#F0E130">10</font>) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(<font color="#2E8B57">"<font color="</font>#999900">Number</font> was <font color="#F0E130">10</font>!");
<br/>}

        ]]></data>
        <answer place="0">if</answer>
        <answer place="1">==</answer>
    </interactive>
    <advanced title="Egy utasítás esetén">
        <![CDATA[
        Az <i>if</i> esetén nem szükséges kiírni a kapcsos zárójeleket. Ilyenkor nem igazán beszélhetünk
        blokkról. A Java ezen esetekben mindig csak a rákövetkező első utasítást fogja az <i>if</i>-hez csatolni.
        <br><br>
        <i>if(feltétel) utasítás;</i>
        <br><br>
        Kapcsos zárójelek nélkül könnyen összezavarodhatunk, hogy mi is tartozik az <i>if</i>-hez, és mi nem.
        Ezért minden esetben érdemes kiírni a zárójelet, még akkor is, ha csak egy utasítás van a blokkban.
        ]]>
    </advanced>
    <title text="Az if-else blokk"/>
    <text>
        <![CDATA[
       Sokszor kerülünk olyan helyzetbe, hogy adott feltétel esetén nem csak akkor akarunk futtatni valami, ha
       a feltétel igaz, hanem akkor is, ha hamis. Ilyenkor az <i>if</i> egy bővített változatára, az <i>if-else</i>
       blokkra van szükség.
        ]]>
    </text>
    <code><![CDATA[
        
        <font color="#DF7401">char </font>testChar = <font color="#2E8B57">'b'</font>;
<br/><font color="#E65100">if</font>(testChar == <font color="#2E8B57">'a'</font>) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(<font color="#2E8B57">"The char is a!"</font>);	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>}<font color="#E65100"> else </font>{
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(<font color="#2E8B57">"The char is NOT a!"</font>);
<br/>}
        
    ]]></code>
    <text>
        <![CDATA[
        A két külön esetet <i>if</i> ágnak, és <i>else</i> ágnak is nevezzük.
        <br><br>
        Kibővítettem a korábban látott példát egy <b>else blokkal</b>. Figyeld meg, hogy most más a <i>testChar</i>
        értéke, ezért ami az <i>if</i> blokkban van, az nem fog lefutni, ellenben ami az <i>else</i> blokkban van, az igen.
        ]]>
    </text>
    <boxed title="Csak az egyik">
        <![CDATA[
        Amikor <i>if-else</i> blokkot írsz, hasznos tudni, hogy mindig <b>pontosan egy ág</b> fog lefutni.
        Ennek oka az, hogy egy <i>boolean</i> (feltétel) mindig vagy igaz (<i>if</i> ág), vagy hamis (<i>else</i> ág).
        ]]>
    </boxed>
    <title text="További else-if blokkok"/>
    <text>
        <![CDATA[
        Lehetséges újabb blokkokat (ágakat) hozzárakni az <i>if</i> blokkhoz. Ezek neve <i>else if</i>,
        és az <i>if</i>-hez hasonlóan mindegyik vár egy feltételt, a bennük lévő utasítások akkor fognak
        futni, ha a feltétel igaz.
        ]]>
    </text>
    <code><![CDATA[
        
        <font color="#DF7401">double </font>d = <font color="#F0E130">3.14</font>;
<br/><font color="#E65100">if</font>(d > <font color="#F0E130">5</font>) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(<font color="#2E8B57">"Bigger then 5"</font>);
<br/>}<font color="#E65100"> else if</font>(d > <font color="#F0E130">3</font>) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//this block is run</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(<font color="#2E8B57">"Bigger then 3"</font>);
<br/>}<font color="#E65100"> else if</font>(d > <font color="#F0E130">1</font>) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(<font color="#2E8B57">"Bigger then 1"</font>);
<br/>}<font color="#E65100"> else </font>{
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(<font color="#2E8B57">"Smaller then 1"</font>);
<br/>}
        
    ]]></code>
    <text>
        <![CDATA[
        Fontos tudni, hogy ilyenkor a feltételek felülről lefelé kerülnek ellenőrzésre. Amint a Java talál
        egy igaz feltételt (ez lehet az <i>if</i> vagy egy <i>else if</i> feltétele), akkor abban a blokkban
        lévő utasításokat végrehajtja, és <b>tovább nem nézi a feltételeket</b>.
        <br><br>
        A fenti példa futtatásánál látható, hogy a <i>'Bigger then 3'</i> ki lesz íratva, de a megadott szám
        az 1-nél is nagyobb. Ehhez a <i>else if</i> ághoz azonban már nem jutunk el, mivel az előző ág
        feltétele igaz lesz.
        <br><br>
        <i>Else</i> ág megadása nem szükséges, de ha meg van adva, akkor ez fog lefutni, ha egyetlen
        feltétel sem volt igaz.
        ]]>
    </text>
    <boxed title="Végtelen sok lehetőség">
        <![CDATA[
        Egy <i>if</i> blokkhoz tetszőleges sok <i>else if</i> ágat adhatunk, ezekben további blokkok és
        metódus hívások lehetnek. Ezek az eszközök lehetővé teszik a komplex programok készítését.
        ]]>
    </boxed>
    <interactive instruction="Egészítsd ki a programot úgy, hogy a 'Middle' csak akkor íródik ki, ha a szám 0.25 és 0.75 között van!">
        <data><![CDATA[

<font color="gray">//this double can have a value between 0 and 1
</font>
<br/><font color="#DF7401">double</font> real = <font color="#E65100">new</font> <font color="#999900">Random</font>().<font color="#ADD8E6">nextDouble</font>();
<br/><font color="#E65100">if</font>(real ___ <font color="#F0E130">0.25</font> && real &lt;= ___) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(<font color="#2E8B57"><font color="#2E8B57">"<font color="</font></font>#999900">Near</font> the middle of the interval!");
<br/>} ___ {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(<font color="#2E8B57"><font color="#2E8B57">"<font color="</font></font>#999900">Near</font> the edges of the interval!");
<br/>}

        ]]></data>
        <answer place="0">&gt;=</answer>
        <answer place="1">0.75</answer>
        <answer place="2">else</answer>
        <default place="2">if</default>
    </interactive>
    <title text="A switch blokk"/>
    <text>
        <![CDATA[
        A <i>switch</i> blokk szintén feltételeket ellenőriz. Akkor érdemes használni, ha egy
        <i>if</i>-hez sok <i>else if</i> ág tartozna. Egy változót vár, és azt képes ellenőrizni sok
        értékre, hogy a változó felveszi-e éppen az adott értékeket.
        ]]>
    </text>
    <code><![CDATA[
        
        <font color="#DF7401">int </font>grade = <font color="#ADD8E6">assignGrade</font>();
<br/><font color="#999900">String</font> output;
<br/><font color="#E65100">switch</font>(grade) {
<br/><font color="#E65100">	&nbsp;&nbsp;&nbsp;&nbsp;case </font><font color="#F0E130">1</font>: output = <font color="#2E8B57">"You failed!"</font>;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">break</font>;
<br/><font color="#E65100">	&nbsp;&nbsp;&nbsp;&nbsp;case </font><font color="#F0E130">2</font>: output = <font color="#2E8B57">"You almost failed..."</font>;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">break</font>;
<br/><font color="#E65100">	&nbsp;&nbsp;&nbsp;&nbsp;case </font><font color="#F0E130">3</font>: output = <font color="#2E8B57">"Not bad, not good."</font>;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">break</font>;
<br/><font color="#E65100">	&nbsp;&nbsp;&nbsp;&nbsp;case </font><font color="#F0E130">4</font>: output = <font color="#2E8B57">"Very good!"</font>;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">break</font>;
<br/><font color="#E65100">	&nbsp;&nbsp;&nbsp;&nbsp;case </font><font color="#F0E130">5</font>: output = <font color="#2E8B57">"Perfect!"</font>;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp; 	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">break</font>;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">default</font>: output = <font color="#2E8B57">"Invalid grade!"</font>;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;        <font color="#E65100">break</font>;
<br/>}
<br/><font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(output);
        
    ]]></code>
    <text>
        <![CDATA[
        Látható, hogy a <i>switch</i>-nek átadjuk a <i>grade</i> változót, majd a <i>case</i> kulcsszóval
        felsoroljuk, hogy mely értékekre vagyunk kíváncsiak: jelen esetben az 1 és 5 közöttiekre.
        <br><br>
        A <b>break</b> utasítás szükséges, ezzel adjuk meg, hogy egy ág (<i>case</i>) végére értünk.
        <br><br>
        A <b>default</b> ág hasonló az <i>else</i>-hez. A benne lévő utasítások akkor futnak le, ha
        egyetlen <i>case</i>-el megadott feltétel sem teljesül.
        ]]>
    </text>
    <advanced title="A switch limitációi">
        <![CDATA[
        A <i>switch</i> ugyan hasznos, de nem minden típusú változóra működik. A
        <a href="https://docs.oracle.com/javase/tutorial/java/nutsandbolts/switch.html">hivatalos dokumentációban</a>
        megnézheted az összes ilyen típust.
        ]]>
    </advanced>
</resources>
