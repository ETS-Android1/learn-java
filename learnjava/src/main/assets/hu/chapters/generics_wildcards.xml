<?xml version="1.0" encoding="utf-8" standalone="no"?>
<resources>
    <chapterdata>
        <id>304</id>
        <name>Helyettesítő karakterek</name>
    </chapterdata>
    <text>
        <![CDATA[
        A helyettesítő karaktereket (wildcard, joker) arra használjuk, hogy generikus osztályokat hozzunk létre
		tetszőleges típusú argumentumokkal.
        ]]>
    </text>
    <title text="Bármilyen típus támogatása"/>
    <text>
        <![CDATA[
        Az alábbiakban bemutatjuk, hogy miért van szükség ilyen funkcióra. Ehhez a <i>Calculatort</i> fogom használni, 
		az előző fejezetből:
        ]]>
    </text>
    <code><![CDATA[
        
<font color="#E65100">public</font> <font color="#E65100">class</font> <font color="#999900">Calculator</font>&lt;<font color="#999900">T</font> <font color="#E65100">extends</font> <font color="#999900">Number</font>> {
<br/>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">private</font> <font color="#DF7401">double</font> currentValue;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#999900">Calculator</font>(<font color="#999900">T</font> startingValue) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;currentValue = startingValue.<font color="#ADD8E6">doubleValue</font>();
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#DF7401">double</font> <font color="#ADD8E6">add</font>(<font color="#999900">T</font> number) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">////itt már a Number metódusaihoz is van hozzáférésünk!
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;currentValue += number.<font color="#ADD8E6">doubleValue</font>();
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">return</font> currentValue;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#DF7401">double</font> <font color="#ADD8E6">subtract</font>(<font color="#999900">T</font> number) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">////itt már a Number metódusaihoz is van hozzáférésünk!
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;currentValue += number.<font color="#ADD8E6">doubleValue</font>();
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">return</font> currentValue;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
<br/>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#DF7401">double</font> <font color="#ADD8E6">getValue</font>() {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">return</font> currentValue;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>}
        
    ]]></code>
    <text>
        <![CDATA[
        A számológép értékéhez számokat adhatunk hozzá. Egy másik ésszerű funkció lenne a képesség
        hogy egy másik <i>Calculator</i> objektumot is hozzáadjunk (azaz annak az értékét).
        <br><br>
        Természetesen lehet így is csinálni, de ez nem egy genrikus megoldás:
        ]]>
    </text>
    <code><![CDATA[
        
<font color="#999900">Calculator</font>&lt;<font color="#999900">Double</font>> calc1 = <font color="#E65100">new</font> <font color="#999900">Calculator</font>&lt;>(<font color="#F0E130">-3.2</font>);
<br/><font color="#999900">Calculator</font>&lt;<font color="#999900">Double</font>> calc2 = <font color="#E65100">new</font> <font color="#999900">Calculator</font>&lt;>(<font color="#F0E130">1.4</font>);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>calc1.<font color="#ADD8E6">add</font>(calc2.<font color="#ADD8E6">getValue</font>());
        
    ]]></code>
    <text>
        <![CDATA[
        Ehelyett létrehozunk egy új metódust az osztályon belül:
        ]]>
    </text>
    <code><![CDATA[
        
        <font color="#E65100">public</font> <font color="#DF7401">double</font> <font color="#ADD8E6">addCalculator</font>(<font color="#999900">Calculator</font>&lt;<font color="#999900">T</font>> other) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;currentValue += other.<font color="#ADD8E6">currentValue</font>;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">return</font> currentValue;
<br/>}
        
    ]]></code>
    <text>
        <![CDATA[
        Működik, de van egy probléma. Mivel a <i>T</i> az aktuális számológép típusparamétere, ez a módszer
        csak az azonos típusparaméterű számológépeket fogadja el.
        <p>
        Azonban mi bármilyen típusparaméterű számológépet szeretnénk hozzáadhatunk az aktuálishoz!
        ]]>
    </text>
    <code><![CDATA[
        
        <font color="#999900">Calculator</font>&lt;<font color="#999900">Double</font>> calc1 = <font color="#E65100">new</font> <font color="#999900">Calculator</font>&lt;>(<font color="#F0E130">-3.2</font>);
<br/><font color="#999900">Calculator</font>&lt;<font color="#999900">Double</font>> calc2 = <font color="#E65100">new</font> <font color="#999900">Calculator</font>&lt;>(<font color="#F0E130">1.4</font>);
<br/>
<br/>calc1.<font color="#ADD8E6">addCalculator</font>(calc2); <font color="gray">//működik
</font>
<br/>
<br/><font color="#999900">Calculator</font>&lt;<font color="#999900">Integer</font>> calc3 = <font color="#E65100">new</font> <font color="#999900">Calculator</font>&lt;>(<font color="#F0E130">5</font>);
<br/>
<br/><font color="gray">//Nem működik, mert a két számológép típusparamétere eltérő!
</font>
<br/>calc1.<font color="#ADD8E6">addCalculator</font>(calc3);
        
    ]]></code>
    <text>
        <![CDATA[
        Itt jönnek a képbe a helyettesítő karakterek. A <i>T</i> helyett használhatunk egy <b>?</b> szimbólumot, 
		ami jelzi, hogy  az osztályt bármely lehetséges típusú argumentummal el kell fogadni.
        ]]>
    </text>
    <code><![CDATA[
        
        <font color="#E65100">public</font> <font color="#DF7401">double</font> <font color="#ADD8E6">addCalculator</font>(<font color="#999900">Calculator</font>&lt;?> other) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;currentValue += other.<font color="#ADD8E6">currentValue</font>;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">return</font> currentValue;
<br/>}
        
    ]]></code>
    <text>
        <![CDATA[
        A metódus mostantól bármilyen számológépet elfogad. Ehhez nem kell felső korlátként kapcsolni a <i>Number</i>-t, 
		mivel az már a <i>Calculator</i> objektum létrehozásakor ellenőrződik.
        ]]>
    </text>
    <interactive instruction="Frissítsd a dotProduct metódust az előző fejezetből, hogy paraméterként bármilyen Vector-t használhasson!">
        <data><![CDATA[

<font color="#E65100">public</font> <font color="#DF7401">double</font> <font color="#ADD8E6">dotProduct</font>(<font color="#999900">Vector</font>&lt;___> other) <font color="#E65100">throws</font> <font color="#999900">IllegalArgumentException</font> {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//a metódus törzs ugyanaz marad.
</font>
<br/>}

        ]]></data>
        <answer place="0">?</answer>
        <answer place="0">? extends Number</answer>
        <default place="0">T</default>
    </interactive>
    <title text="Öröklődés szimulálása"/>
    <text>
        <![CDATA[
        Alapértelmezés szerint a Java generikus kódja nem úgy viselkedik az öröklődés tekintetében, ahogyan azt a 
		legtöbb programozó elvárná. Először nézzük meg, hogyan működnek a dolgok generikusság nélkül:
        ]]>
    </text>
    <code><![CDATA[
        
<font color="#E65100">public</font> <font color="#E65100">static</font> <font color="#DF7401">void</font> <font color="#ADD8E6">print</font>(<font color="#999900">Object</font> o) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(o.<font color="#ADD8E6">toString</font>());
<br/>}
        
    ]]></code>
    <text>
        <![CDATA[
        Ez a metódus bármelyik objektumot elfogad, mivel ezek mindegyike az <i>Object</i>-ből származik. Így mindegyik 
		ténylegesen <i>Object</i>-is lesz (polimorfizmus).
        ]]>
    </text>
    <text>
		<![CDATA[
        Most készítek egy metódust, amely ugyanezt teszi, de egy <i>List</i>-re. A <i>List</i> egy generikus interfész, 
		és ez nemkívánatos mellékhatást eredményez.
		]]>
	</text>
    <code><![CDATA[
        
        <font color="#E65100">public</font> <font color="#E65100">static</font> <font color="#DF7401">void</font> <font color="#ADD8E6">printList</font>(<font color="#999900">List</font>&lt;<font color="#999900">Object</font>> list) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">for</font>(<font color="#999900">Object</font> o: list) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(o.<font color="#ADD8E6">toString</font>());
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>}
        
    ]]></code>
    <text>
        <![CDATA[
        Naiv módon nem csak <i>List&lt;Object></i>, hanem bármilyen listával megpróbálnánk használni ezt a metódust. 
		Ez azonban nem fog sikerülni:
        ]]>
    </text>
    <code><![CDATA[
        
        <font color="#999900">List</font>&lt;<font color="#999900">String</font>> strings = <font color="#999900">Arrays</font>.<font color="#ADD8E6">asList</font>(<font color="#2E8B57"><font color="#2E8B57"><font color="#2E8B57">"Ha"</font></font></font>,<font color="#2E8B57"><font color="#2E8B57">"Ha"</font></font>,<font color="#2E8B57"><font color="#2E8B57"><font color="#2E8B57">"Ha"</font></font></font>);
<br/><font color="gray">//Fordítási hiba?!
</font>
<br/><font color="#ADD8E6">printList</font>(strings);
        
    ]]></code>
    <text>
        <![CDATA[
        A probléma az, hogy annak ellenére, hogy a <i>String</i> az <i>Object</i>-ből származik, a <i>List&lt;String></i> 
		<b>NEM</b> származik a <i>List&lt;Object></i>-ből.
        ]]>
    </text>
    <boxed title="Általánosságban is igaz">
        <![CDATA[
        Ez a hatás bármely generikus osztályra igaz. Nincs öröklődés a <i>GenericClass&lt;A></i> és a 
		<i>GenericClass&lt;B></i> között, még akkor sem, ha van kapcsolat <i>A</i> és <i>B</i> között.
        <p>
        Ez azért van, mert a fordító a generikus osztálytól egymástól teljesen független osztályokat hoz létre.
        ]]>
    </boxed>
    <text>
        <![CDATA[
        Ahhoz, hogy ezt megkerüljük, és a metódus az elvárásoknak megfelelően működjön, s helyettesítő karaktert 
		kell használnunk:
        ]]>
    </text>
    <code><![CDATA[
        
<font color="#E65100">public</font> <font color="#E65100">static</font> <font color="#DF7401">void</font> <font color="#ADD8E6">printList</font>(<font color="#999900">List</font>&lt;?> list) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">for</font>(<font color="#999900">Object</font> o: list) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(o.<font color="#ADD8E6">toString</font>());
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>}
        
    ]]></code>
	<text>
        <![CDATA[
        A metódus mostmár tényleg bármilyen típusú listát elfogad paraméterként.
        ]]>
    </text>
    <title text="Bounded wildcards"/>
    <text>
        <![CDATA[
        A típusparaméterekhez hasonlóan a helyettesítű karakter is korlátozható. Tegyük fel, hogy összegeznünk kell a
        egy <i>List</i> értékeit. Ha például a lista az 1-et, 3-at és a 2-t tartalmazza, akkor 6-ot kell visszaadnunk. 
		Nem minden típusparaméterű lista esetén van azonban értelme ennek.
        <br><br>
        Íme néhány ötlet. Ezek csak javaslatok, még egyik sem a tökéletes megoldás.
        ]]>
    </text>
    <code><![CDATA[
        
        <font color="#E65100">public</font> <font color="#E65100">static</font> <font color="#DF7401">double</font> <font color="#ADD8E6">sumList</font>(<font color="#999900">List</font>&lt;?> list) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">/*
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;A típus törlődés miatt itt csak az  
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;Object metódusait használhatjuk!
<br/>	&nbsp;&nbsp;&nbsp;&nbsp; */</font>
<br/>}
<br/>
<br/><font color="#E65100">public</font> <font color="#E65100">static</font> <font color="#DF7401">double</font> <font color="#ADD8E6">sumList</font>(<font color="#999900">List</font>&lt;<font color="#999900">Number</font>> list) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">/*
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;Használhatjuk a Number metódusait, de
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;ez a metódus csak List&lt;Number>-t fog elfogani!
<br/>	&nbsp;&nbsp;&nbsp;&nbsp; */</font>
<br/>}
        
    ]]></code>
    <text>
        <![CDATA[
        Ahhoz, hogy csak szám típusparaméterű listákat fogadjunk el, egy felső korlátot 
		kell rakni a helyettesítő karakterre.
        ]]>
    </text>
    <code><![CDATA[
        
<font color="#E65100">public</font> <font color="#E65100">static</font> <font color="#DF7401">double</font> <font color="#ADD8E6">sumList</font>(<font color="#999900">List</font>&lt;? <font color="#E65100">extends</font> <font color="#999900">Number</font>> list) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#DF7401">double</font> sum = <font color="#F0E130">0</font>;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">for</font>(<font color="#999900">Number</font> number: list) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;sum += number.<font color="#ADD8E6">doubleValue</font>();
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">return</font> sum;
<br/>}
        
    ]]></code>
    <interactive instruction="Fejezd be ezt a metódust úgy, hogy a szótár legnagyobb kulcsát adja vissza!">
        <data><![CDATA[

<font color="#E65100">public</font> &lt;<font color="#999900">K</font> ___ <font color="#999900">Comparable</font>&lt;<font color="#999900">K</font>>, <font color="#999900">V</font>> ___ <font color="#ADD8E6">keyMaximum</font>(<font color="#999900">Map</font>&lt;<font color="#999900">K</font>, <font color="#999900">V</font>> map) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">return</font> <font color="#999900">Collections</font>.<font color="#ADD8E6">max</font>(___.<font color="#ADD8E6">keySet</font>());
<br/>}

        ]]></data>
        <answer place="0">extends</answer>
        <answer place="1">K</answer>
        <answer place="2">map</answer>
    </interactive>
</resources>
