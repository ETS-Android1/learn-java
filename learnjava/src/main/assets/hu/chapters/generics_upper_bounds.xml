<?xml version="1.0" encoding="utf-8" standalone="no"?>
<resources>
    <chapterdata>
        <id>303</id>
        <name>Felső korlát</name>
    </chapterdata>
    <title text="Típus erózió"/>
    <text>
        <![CDATA[
        A típus törlődése (erózió) a Java generikus kód tulajdonsága. Ez azt jelenti, hogy a generikus objektumok a
        generikus osztályon belül <i>Object</i>-ként kezelik a típusparamétert.
        ]]>
    </text>
    <code><![CDATA[
        
        <font color="#E65100">public</font> <font color="#E65100">class</font> <font color="#999900">Calculator</font>&lt;<font color="#999900">T</font>> {
<br/>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">private</font> <font color="#999900">T</font> currentValue;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#999900">Calculator</font>(<font color="#999900">T</font> startingValue) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;currentValue = startingValue;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#999900">T</font> <font color="#ADD8E6">add</font>(<font color="#999900">T</font> number) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">/*
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;Hogyan adjuk hozzá a paramétert az aktuális értékhez?!
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;Csak az Object metóduait használhatjuk:
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;toString(), hashCode()
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp; */</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">return</font> currentValue;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#999900">T</font> <font color="#ADD8E6">subtract</font>(<font color="#999900">T</font> number) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//how to subtract the parameter from the current value?!
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">return</font> currentValue;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>}
        
    ]]></code>
    <text>
        <![CDATA[
        Ebben az egyszerű <i>Calculator</i> osztályban tárolunk egy értéket, és szeretnénk, ha más értékeket tudnánk hozzáadni 
		vagy kivonni belőle. A jelenlegi generikus ismereteinkkel azonban ez nem tűnik lehetségesnek:
        ]]>
    </text>
    <code><![CDATA[
        
        <font color="gray">//Rendben, de még mindig nem fog működni valós számokra!
</font>
<br/><font color="#999900">Calculator</font>&lt;<font color="#999900">Double</font>> calc = <font color="#E65100">new</font> <font color="#999900">Calculator</font>&lt;>(<font color="#F0E130">0.0</font>);
<br/>
<br/><font color="gray">//Ennek semmi értelme, de ettől még megengedett.
</font>
<br/><font color="#999900">Calculator</font>&lt;<font color="#999900">Boolean</font>> boolCalc = <font color="#E65100">new</font> <font color="#999900">Calculator</font>&lt;>(<font color="#E65100">false</font>);
        
    ]]></code>
    <text>
        <![CDATA[
        Szükségünk van egy olyan módszerre, amellyel összeadást/kivonást tudunk végezni. Valahogy azt is szeretnénk 
		megtiltani, hogy "értelmetlen" objektumokat lehessen létrehozni, mint például a <i>boolean</i> vagy <i>String</i> 
		típusparaméterű <i>Calculator</i>.
        ]]>
    </text>
    <title text="Felső korlát"/>
    <text>
        <![CDATA[
        A <b>korlátok</b> használata a megoldás ezekre a problémákra.
        ]]>
    </text>
    <boxed title="Miért felső korlát?">
        <![CDATA[
        Egy felső korlát létrehozásához szükségünk van egy <b>alaposztályra</b> (vagy interfészre). Csak ennek az 
		alaposztálynak a gyermekei lesznek megengedettek típusparaméterként, ezért az alaposztályt a lehetséges típusok 
		<b>felső korlátjának</b> fogjuk nevezni (az alaposztály "<i>fölötte</i>" van a gyerekosztályainak 
		az osztály hierarchiában).
        ]]>
    </boxed>
    <text>
        <![CDATA[
        Ha van egy felső korlát egy típusparaméteren, a típus törlés nem <i>Object</i>-re, hanem az alaposztályra 
		fog visszavezetni. A felső korlát metódusait használhatjuk a generikus osztályon belül. Értelemszerűen ha 
		nem adunk meg felső korlátot, akkor ez magától az <i>Object</i> lesz (hasonlóan az öröklődéshez).
        ]]>
    </text>
    <boxed title="Alap osztály a számológéphez">
        <![CDATA[
        Tehát csak egy alaposztályra van szükségünk a <i>Calculator</i> számára. Szerencsére van egy közös osztály a
        számtípusokhoz, a <a href="https://docs.oracle.com/javase/7/docs/api/java/lang/Number.html">java.lang.Number</a>.
        ]]>
    </boxed>
    <text>
        <![CDATA[
        A <i>Number</i>-nek van egy hasznos metódusa, a <i>doubleValue</i>, amely egy valós számként adja vissza a 
		szám objektum értékét.
        ]]>
    </text>
    <code><![CDATA[
        
<font color="gray">//Az Integer és a Double ebből a Number-ből származik:
</font>
<br/><font color="#999900">Integer</font> intNum = <font color="#F0E130">1</font>;
<br/><font color="#999900">Double</font> doubleNum = <font color="#F0E130">3.2</font>;
<br/>
<br/><font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(intNum.<font color="#ADD8E6">doubleValue</font>()); <font color="gray">//1.0
</font>
<br/><font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(doubleNum.<font color="#ADD8E6">doubleValue</font>()); <font color="gray">//3.2</font>
        
    ]]></code>
    <text>
        <![CDATA[
        Már csak az van hátra, hogy megtanuljuk, hogyan kell felső korlátot írni. Az <b>extends</b> kulcsszót használjuk, 
		hogy megadjuk a felső korlátot a típusparaméterekhez:
        ]]>
    </text>
    <code><![CDATA[
        
<font color="#E65100">public</font> <font color="#E65100">class</font> <font color="#999900">Calculator</font>&lt;<font color="#999900">T</font> <font color="#E65100">extends</font> <font color="#999900">Number</font>> {
<br/>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">private</font> <font color="#DF7401">double</font> currentValue;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#999900">Calculator</font>(<font color="#999900">T</font> startingValue) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;currentValue = startingValue.<font color="#ADD8E6">doubleValue</font>();
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#DF7401">double</font> <font color="#ADD8E6">add</font>(<font color="#999900">T</font> number) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//we have access to Number methods too, not only Object methods!
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;currentValue += number.<font color="#ADD8E6">doubleValue</font>();
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">return</font> currentValue;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#DF7401">double</font> <font color="#ADD8E6">subtract</font>(<font color="#999900">T</font> number) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//we have access to Number methods too, not only Object methods!
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;currentValue += number.<font color="#ADD8E6">doubleValue</font>();
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">return</font> currentValue;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
<br/>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#DF7401">double</font> <font color="#ADD8E6">getValue</font>() {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">return</font> currentValue;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>}
        
    ]]></code>
    <text>
        <![CDATA[
        Talán észrevetted, hogy a <i>T</i> néhány helyen <i>double</i>-re változik (visszatérési értéknél). 
		A Java generikus kódja nem olyan erős, és sajnos vannak limitációk.
        ]]>
    </text>
    <advanced title="Limitációk">
        <![CDATA[
        Miért nem maradhatott a visszatérési érték <i>T</i>? Mert akkor <i>double</i>-ról <i>T</i>-re kellene konvertálni, 
		és ez nem sikerülne minden olyan <i>T</i> esetében, amely nem <i>Double</i>.
        <br><br>
        Oké, akkor legyen a <i>currentValue</i> is <i>T</i> - mondhatnánk. De akkor nem tudnánk hozzáadni vagy kivonni 
		értékeket (mert a <i>Number</i>-nek csak getterei vannak, de setterei nincsenek, és absztrakt)!
        ]]>
    </advanced>
    <text>
        <![CDATA[
        Ezen apró hátulütők ellenére a számológép most már minden számtípust támogat. Az eredményt valós számként adja vissza.
        ]]>
    </text>
    <code><![CDATA[
        
<font color="gray">//Például egy számológép float típusra
</font>
<br/><font color="#999900">Calculator</font>&lt;<font color="#999900">Float</font>> floatCalc = <font color="#E65100">new</font> <font color="#999900">Calculator</font>&lt;>(<font color="#F0E130">0.5f</font>);
<br/>floatCalc.<font color="#ADD8E6">add</font>(<font color="#F0E130">21.44f</font>);
<br/>floatCalc.<font color="#ADD8E6">subtract</font>(<font color="#F0E130">1.23f</font>);
<br/><font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(<font color="#2E8B57">"Final result: "</font> + floatCalc.<font color="#ADD8E6">getValue</font>());
        
    ]]></code>
    <text>
        <![CDATA[
        Egy másik előnye, hogy a fordító mostantól elutasítja az érvénytelen, értelmetlen típusparamétereket:
        ]]>
    </text>
    <code><![CDATA[
        
        <font color="gray">//Fordítási HIBA!</font>
<br/><font color="#999900">Calculator</font>&lt;<font color="#999900">Boolean</font>> boolCalc = <font color="#E65100">new</font> <font color="#999900">Calculator</font>&lt;>(<font color="#E65100">false</font>);
        
    ]]></code>
    <interactive instruction="Frissítsük a Vector osztályt az előző fejezetből, hogy egy felső korlátos típusparamétert használjon.!">
        <data><![CDATA[

<font color="#E65100">class</font> <font color="#999900">Vector</font>&lt;<font color="#999900">T</font> ___ <font color="#999900">Number</font>> {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">private</font> <font color="#999900">T</font>[] elements;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#999900">Vector</font>(<font color="#999900">T</font>[] elements) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">this</font>.<font color="#ADD8E6">elements</font> = elements;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#DF7401">double</font> <font color="#ADD8E6">dotProduct</font>(<font color="#999900">Vector</font>&lt;___> other) <font color="#E65100">throws</font> <font color="#999900">IllegalArgumentException</font> {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">if</font>(elements.<font color="#ADD8E6">length</font> != other.<font color="#ADD8E6">elements</font>.<font color="#ADD8E6">length</font>) <font color="#E65100">throw</font> <font color="#E65100">new</font> <font color="#999900">IllegalArgumentException</font>();
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#DF7401">double</font> product = <font color="#F0E130">0</font>;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">for</font>(<font color="#DF7401">int</font> i=<font color="#F0E130">0</font>; i&lt;elements.<font color="#ADD8E6">length</font>; i++) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;product += elements[i].<font color="#ADD8E6">doubleValue</font>() * other.<font color="#ADD8E6">elements</font>[i].<font color="#ADD8E6">doubleValue</font>();
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">return</font> product;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>}

        ]]></data>
        <answer place="0">extends</answer>
        <answer place="1">T</answer>
        <answer place="1">?</answer>
        <answer place="1">? extends Number</answer>
    </interactive>
    <title text="Interfészek mint korlátok"/>
    <text>
        <![CDATA[
        Az interfészek is használhatók felső korlátként. Ebben az esetben csak azok az osztályok, amelyek 
		<b>implementálják</b> az adott interfészt engedélyezettek. Ennek ellenére a korlát deklarálásakor továbbra is az 
		<b>extends</b> kulcsszót kell használni, nem pedig a <b>implements</b> kulcsszót!
        ]]>
    </text>
    <code><![CDATA[
        
        <font color="#E65100">class</font> <font color="#999900">MustCompare</font>&lt;<font color="#999900">T</font> <font color="#E65100">extends</font> <font color="#999900">Comparable</font>&lt;<font color="#999900">T</font>>> {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//Comparing intensifies here...
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>}
        
    ]]></code>
    <text>
        <![CDATA[
        Mint láthatjuk, még az is lehetséges, hogy a <i>T</i> típusparamétert használjuk a felső korláton belül!
        ]]>
    </text>
    <title text="Több korlát"/>
    <text>
        <![CDATA[
        Az is megengedett, hogy egy típusparaméternek több felső korláta legyen. Ezek közül azonban csak egy lehet
        tényleges osztály, a többinek interfésznek kell lennie (ennek van értelme, hiszen több szülőosztály sem lehet).
        ]]>
    </text>
    <code><![CDATA[
        
<font color="#E65100">class</font> <font color="#999900">PickyClass</font>&lt;<font color="#999900">T</font> <font color="#E65100">extends</font> <font color="#999900">Thread</font> & <font color="#999900">Serializable</font> & <font color="#999900">Comparable</font>&lt;<font color="#999900">T</font>>> {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">/*
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;T csak szerializálható, összehasonlítható 
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;Thread lehet.
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;*/</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>}
        
    ]]></code>
    <text>
        <![CDATA[
        Az <b>&</b> szimbólumot kell használni a felső korlátok felsorolására, és az osztálynak kell az elsőnek lennie, 
		az interfészeknek pedig követniük kell.
        ]]>
    </text>
</resources>
