<?xml version="1.0" encoding="utf-8" standalone="no"?>
<resources>
    <chapterdata>
        <id>253</id>
        <name>Párhuzamos műveletek</name>
    </chapterdata>
    <text>
        <![CDATA[
        Ebben a fejezetben megtanuljuk, hogyan lehet egy szálat biztonságosan 
		szüneteltetni és leállítani, és hogyan észlelhetjük, ha egy szál befejezte 
		a munkát.
        ]]>
    </text>
    <title text="A jelenlegi szál"/>
    <text>
        <![CDATA[
        Mindig lehetséges, hogy hivatkozást kapjunk az aktuális szál objektumra.
		Ezzel el tudjuk értni azt a <i>Thread</i> objektumot, ami az adott kódot 
		futtatja:
        ]]>
    </text>
    <code><![CDATA[
        
<font color="#999900">Thread</font> current = <font color="#999900">Thread</font>.<font color="#ADD8E6">currentThread</font>();
<br/><font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(current.<font color="#ADD8E6">getName</font>());
        
    ]]></code>
    <text>
        <![CDATA[
        Ha ezt a main metódusban hívjuk meg ezt, akkor kiírja a "<i>main</i>"-t, 
		ami a főszál alapértelmezett neve. Ezzel a módszerrel ellenőrizhetjük a 
		végrehajtó szál tulajdonságait.
        ]]>
    </text>
    <title text="A futtatás megállítása"/>
    <text>
        <![CDATA[
        Általában a jelenlegi szál szünetel (amit a <i>currentThread</i> ad vissza), 
		ezért egy statikus szünteltető metódus (<i>sleep</i>) került hozzáadásra, 
		amely ezt elvégzi. Az <b>ezredmásodpercek</b> mennyiségét kell megadni, 
		és a szál ennyi időt fog várni.
        ]]>
    </text>
    <code><![CDATA[
        
<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(<font color="#2E8B57">"Várakozás megkezdése..."</font>);
<br/><font color="#E65100">try</font> {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">for</font>(<font color="#DF7401">int</font> i=<font color="#F0E130">0</font>; i&lt;<font color="#F0E130">5</font>; i++) { <font color="gray">//5-ször vár, mindig 1 másodpercig
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">Thread</font>.<font color="#ADD8E6">sleep</font>(<font color="#F0E130">1000</font>);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(<font color="#2E8B57">"Vártam 1 másodpercet."</font>);
<br/>   &nbsp;&nbsp;&nbsp;&nbsp;    }
<br/>} <font color="#E65100">catch</font>(<font color="#999900">InterruptedException</font> e) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">err</font>.<font color="#ADD8E6">println</font>(<font color="#2E8B57">"Megszakítás történt."</font>);
<br/>}
<br/><font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(<font color="#2E8B57">"Befejeztem a várakozást!"</font>);
        
    ]]></code>
    <text>
        <![CDATA[
        Amikor szálakkal dolgozunk, szinte mindig figyelnünk kell egy 
		<b>InterruptedException</b>-re. Ennek oka, hogy külső okok miatt, 
		néha a szálak nem tudnak annyit várni, amennyit mondtak nekik, 
		és ez a kivétel dobásra kerül.
        ]]>
    </text>
    <interactive instruction="Állítsd meg a jelenlegi szálat 1.5 másodpercre!">
        <data><![CDATA[

<font color="#E65100">try</font> {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;___.<font color="#ADD8E6">sleep</font>(___);
<br/>} <font color="#E65100">catch</font>(___ e) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;e.<font color="#ADD8E6">printStackTrace</font>();
<br/>}

        ]]></data>
        <answer place="0">Thread</answer>
        <answer place="1">1500</answer>
        <answer place="2">InterruptedException</answer>
        <answer place="2">Exception</answer>
        <answer place="2">Throwable</answer>
    </interactive>
    <title text="Várakozás az eredményre: volatile"/>
    <boxed title="Volatile (illékony) változók">
        <![CDATA[
        Tegyük fel, hogy két szálunk van, és az egyik frissít egy változót. 
		Lehetséges, hogy a másik szál továbbra is a régi értéket látja (mivel nem 
		tud a lehetséges frissítésről). Ennek kiküszöbölésére az illékony (<i>volatile</i>) 
		változók bevezetésre kerültek. Minden szál látja az illékony változó aktuális, 
		legfrissebb értékét.
        ]]>
    </boxed>
    <text>
        <![CDATA[
        Lássunk egy olyan kódpéldát, ahol a főszál egy <i>volatile</i> változót 
		ellenőriz, hogy megtudja, megállt-e egy másik szál.
        ]]>
    </text>
    <code><![CDATA[
        
<font color="#E65100">public class</font> <font color="#999900">Main</font> {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">static volatile</font> <font color="#DF7401">boolean</font> finished = <font color="#E65100">false</font>; <font color="gray">//ezt fogjuk figyelni
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public static</font> <font color="#DF7401">void</font> <font color="#ADD8E6">main</font>(<font color="#999900">String</font>[] args) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">Thread</font> worker = <font color="#E65100">new</font> <font color="#999900">Thread</font>(<font color="#E65100">new</font> <font color="#999900">Runnable</font>() {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="red">@Override</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#DF7401">void</font> <font color="#ADD8E6">run</font>() {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">try</font> { <font color="gray">//egy hosszú feladat szimulálása...
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">Thread</font>.<font color="#ADD8E6">sleep</font>(<font color="#F0E130">3000</font>);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;} <font color="#E65100">catch</font>(<font color="#999900">InterruptedException</font> e) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">err</font>.<font color="#ADD8E6">println</font>(<font color="#2E8B57">"Megszakítás történt."</font>);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;} <font color="#E65100">finally</font> { <font color="gray">//a figyelő értéke mindig true-ra vált majd
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;finished = <font color="#E65100">true</font>;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;});
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;worker.<font color="#ADD8E6">start</font>();
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">while</font>(!finished) { <font color="gray">//várunk, amíg a másik szál igazra nem állítja a boolean-t
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(<font color="#2E8B57">"Várakozás a másik szálra..."</font>);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(<font color="#2E8B57">"A másik szál végzett!"</font>);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>}
        
    ]]></code>
    <text>
        <![CDATA[
        Először is, láthatjuk, hogy könnyű deklrálni az illékonyságok. A kulcsszó a 
		<b>volatile</b>. A <i>finished</i> változó illékonysága biztosítja, hogy a 
		főszál azonnal lássa a változó frissített értékét (amelyet a háttérszálban 
		állítunk be, amikor az végez).
        ]]>
    </text>
    <boxed title="Holtpont">
        <![CDATA[
        Vegyük észre, hogy a kódmintában az érték frissítése a <i>finally</i> 
		blokkban történik. Még akkor is, ha a szál megszakad, végül mindig <i>true</i> 
		értékre lesz állítva. Ha ez nem így lenne, akkor holtpontra kerülhetnénk, ami 
		azt jelenti, hogy a szálak a végtelenségig egymásra várnak.
        ]]>
    </boxed>
    <text>
        <![CDATA[
        Ha holtpontot szeretnél látni, változtasd meg a kód ezen részét a következő módon:
        ]]>
    </text>
    <code><![CDATA[
        
        <font color="#E65100">try</font> { <font color="gray">//feladat szimulálása...
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">Thread</font>.<font color="#ADD8E6">sleep</font>(<font color="#F0E130">3000</font>);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">throw</font> <font color="#E65100">new</font> <font color="#999900">InterruptedException</font>(); <font color="gray">//megszakítás szimulálása
</font>
<br/>} <font color="#E65100">catch</font>(<font color="#999900">InterruptedException</font> e) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">err</font>.<font color="#ADD8E6">println</font>(<font color="#2E8B57">"Megszakítás történt."</font>);
<br/>}
        
    ]]></code>
    <text>
        <![CDATA[
        A módosítás után a kód addig fog futni, amíg manuálisan le nem állítod. 
		Persze bármikor betehetjük a változó frissítését a <i>catch</i> blokkba is, 
		de a jó gyakorlat, hogy ilyen esetekben a <i>finally</i>-t használjuk.
        ]]>
    </text>
    <boxed title="Aktív várakozás">
        <![CDATA[
        A ciklusokkal való várakozást aktív várakozásnak nevezzük. Ez azért van, 
		mert bár úgy tűnhet, hogy a szál nem csinál semmit, de a <i>CPU</i>
        mégis ismételten végrehajtja a ciklus utasításait. Ez nem egy elegáns módja 
		a várakozásnak, de most csak ezt ismerjük.
        ]]>
    </boxed>
    <title text="Várakozás az eredményre: join"/>
    <text>
        <![CDATA[
        A <i>join</i> egy kicsit elegánsabb módja annak, hogy megvárjuk egy szál 
		befejezését. A <i>join</i> metódus hatására az aktuális szál
        vár, amíg a csatlakozó szál befejezi a munkát:
        ]]>
    </text>
    <code><![CDATA[
        
<font color="#999900">Thread</font> worker = <font color="#E65100">new</font> <font color="#999900">Thread</font>(<font color="#E65100">new</font> <font color="#999900">Runnable</font>() {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="red">@Override</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#DF7401">void</font> <font color="#ADD8E6">run</font>() {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">try</font> { <font color="gray">//feladat szimulálása...
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">Thread</font>.<font color="#ADD8E6">sleep</font>(<font color="#F0E130">3000</font>);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;} <font color="#E65100">catch</font>(<font color="#999900">InterruptedException</font> e) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">err</font>.<font color="#ADD8E6">println</font>(<font color="#2E8B57"><font color="#2E8B57">"Megszakítás történt."</font></font>);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>});
<br/>worker.<font color="#ADD8E6">start</font>();
<br/><font color="#E65100">try</font> { <font color="gray">//sajnos a join metódus is megszakadhat
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;worker.<font color="#ADD8E6">join</font>();
<br/>} <font color="#E65100">catch</font>(<font color="#999900">InterruptedException</font> e) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">err</font>.<font color="#ADD8E6">println</font>(<font color="#2E8B57"><font color="#2E8B57">"Megszakítás történt."</font></font>);
<br/>}
<br/><font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(<font color="#2E8B57">"A másik szál befejezte a munkát!"</font>);
        
    ]]></code>
    <text>
        <![CDATA[
        Vegyük észre, hogy a <i>join</i> metódus egy szálobjektumon kerül meghívásra. 
		<b>SEMMILYEN esetben</b> ne hívjuk meg az aktuális szálon (<i>currentThread</i>), 
		mivel ez garantáltan holtpontra vezet.
        ]]>
    </text>
    <boxed title="Passzív várakozás">
        <![CDATA[
        Ez a várakozási módszert passzív várakozásnak nevezzük. Általában előnyben 
		részesítik az aktív várakozással szemben, mivel kevésbé <i>CPU</i>-intenzív.
        ]]>
    </boxed>
    <title text="Várakozás az eredményre: wait és notify"/>
    <text>
        <![CDATA[
        A Java-t a párhuzamosság jegyében tervezték, ezt mutatja, hogy még az 
		<i>Object</i> alaposztály (ezért tehát minden objektum) is rendelkezik
        metódusokkal a párhuzamosításhoz.
        ]]>
    </text>
    <boxed title="Monitor">
        <![CDATA[
        Minden objektumnak van egy várakozó sora a szálak számára. Az <b>aktuális 
		szál</b> elhelyezéséhez ebben a várólistában az objektumok
        <i>wait</i> metódusát kell meghívni. Egyetlen szál (vagy az összes) 
		felébresztéséhez használjuk az objektumok <i>notify</i> és <i>notifyAll</i> 
		metódusait. Az így használt objektumokat <b>monitoroknak</b> nevezzük 
		(minden objektum használható monitorként).
        ]]>
    </boxed>
    <text>
        <![CDATA[
        Nézzük meg az előző példát ezzel a módszerrel. Használhatnánk a 
		szálobjektumot akár monitorként is, de egy tisztább
        megoldás, ha külön objektumot hozunk létre erre a célra.
        ]]>
    </text>
    <code><![CDATA[
        
        <font color="#E65100">final</font> <font color="#999900">Object</font> monitor = <font color="#E65100">new</font> <font color="#999900">Object</font>(); <font color="gray">//this will be the monitor
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;
<br/><font color="#999900">Thread</font> worker = <font color="#E65100">new</font> <font color="#999900">Thread</font>(<font color="#E65100">new</font> <font color="#999900">Runnable</font>() {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="red">@Override</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#DF7401">void</font> <font color="#ADD8E6">run</font>() {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">try</font> { <font color="gray">//feladat szimulálása...
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">Thread</font>.<font color="#ADD8E6">sleep</font>(<font color="#F0E130">3000</font>);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;} <font color="#E65100">catch</font>(<font color="#999900">InterruptedException</font> e) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">err</font>.<font color="#ADD8E6">println</font>(<font color="#2E8B57"><font color="#2E8B57">"Megszakítás történt."</font></font>);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;} <font color="#E65100">finally</font> {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">synchronized</font> (monitor) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;monitor.<font color="#ADD8E6">notify</font>(); <font color="gray">//értesítjük a várakozó szálat
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>});
<br/>worker.<font color="#ADD8E6">start</font>();
<br/><font color="#E65100">try</font> { <font color="gray">//sajnos a wait is megszakadhat
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">synchronized</font> (monitor) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;monitor.<font color="#ADD8E6">wait</font>(); <font color="gray">//ez a szál megáll, amíg nem értesítik
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>} <font color="#E65100">catch</font> (<font color="#999900">InterruptedException</font> e) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">err</font>.<font color="#ADD8E6">println</font>(<font color="#2E8B57"><font color="#2E8B57">"Megszakítás történt."</font></font>);
<br/>}
<br/><font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(<font color="#2E8B57">"A másik szál végzett!"</font>);
        
    ]]></code>
    <text>
        <![CDATA[
        Észre fogod venni, hogy a metódushívások <b>synchronized</b> blokkokban vannak. 
		Egyelőre ne törődj velük, majd a következő fejezetekben kerülnek sorra. Erre a <b>IllegalMonitorStateException</b> elkerülése érdekében van szükség.
        ]]>
    </text>
    <interactive instruction="Egészítsd ki úgy, hogy a metódus megállítja az aktuális szálat, amíg a megadott szálak mindegyike be nem fejezi a munkát..">
        <data><![CDATA[

<font color="#E65100">public</font> <font color="#DF7401">boolean</font> <font color="#ADD8E6">joinOnAll</font>(<font color="#999900">Collection</font>&lt;<font color="#999900">Thread</font>> threads) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">try</font> {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">for</font>(<font color="#999900">Thread</font> thread: ___) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;thread.<font color="#ADD8E6">___</font>();
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">return</font> true; <font color="gray">//igaz sikeres várakozás esetén
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;} <font color="#E65100">catch</font> (<font color="#999900">InterruptedException</font> e) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;e.<font color="#ADD8E6">printStackTrace</font>();
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">return</font> false; <font color="gray">//hamis sikertelen várakozás esetén
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>}

        ]]></data>
        <answer place="0">threads</answer>
        <answer place="1">join</answer>
    </interactive>
    <!-- keywords: volatile, Object methods: join, wait, notify, notifyAll  -->

</resources>
