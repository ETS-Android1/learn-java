<?xml version="1.0" encoding="utf-8" standalone="no"?>
<resources>
    <chapterdata>
        <id>255</id>
        <name>Futtató szolgáltatások</name>
    </chapterdata>
    <text>
        <![CDATA[
        Az <i>Executor</i> szolgáltatások a <i>Thread</i> osztály közvetlen használatának 
		modern alternatívái. Használatukhoz először egy új interfészt kell megismernünk.
        ]]>
    </text>
    <advanced title="Elavultak?">
        <![CDATA[
        A következő osztályok és interfészek a régi <i>Runnable</i> és <i>Thread</i> osztályok 
		helyettesítésére készültek. A hivatalos "legjobb gyakorlat" az, hogy csak az 
		újakat használd. Azonban még mindig gyakran használják a régi osztályokat, mert 
		az emberek megszokták őket, és sok problémára még mindig tökéletesek. Éppen ezért nincsenek is 
		elavultnak jelölve.
        ]]>
    </advanced>
    <title text="Callable interfész"/>
    <text>
        <![CDATA[
        A <a href="https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/Callable.html">java.util.concurrent.Callable</a>
        a háttérben végrehajtandó kód átadásának modern módja.
        ]]>
    </text>
    <boxed title="Miért nem a Runnable?">
        <![CDATA[
        A <i>Runnable</i> legfontosabb hátránya a visszatérési érték hiánya. A háttérben 
		végzett művelet végrehajtásakor gyakran szükség van a művelet eredményére. A 
		<i>Callable</i>, egy általános interfész segítségével könnyen megoldható az eredmény 
		visszaadása az eredeti szálba.
        ]]>
    </boxed>
    <text>
        <![CDATA[
        Lássunk egy példát a <i>Callable</i>-re, amelyet később használni fogunk. 
		A fontos metódus itt a <i>call</i>, amelyik ugyanolyan szerepet lát el, mint a 
		<i>run</i> a <i>Runnable</i> esetén.
        ]]>
    </text>
    <code><![CDATA[
        
        <font color="gray">//Callable, that checks if a number is prime or not.
</font>
<br/><font color="#E65100">class</font> <font color="#999900">PrimeTask</font> <font color="#E65100">implements</font> <font color="#999900">Callable</font>&lt;<font color="#999900">Boolean</font>> {
<br/>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#DF7401">int</font> number;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> P<font color="#ADD8E6">rimeTask</font>(<font color="#DF7401">int</font> number) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">this</font>.<font color="#ADD8E6">number</font> = number;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//Note that this is an inefficient primality test!
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="red">@Override</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#999900">Boolean</font> <font color="#ADD8E6">call</font>() {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">for</font>(<font color="#DF7401">int</font> i=number-<font color="#F0E130">1</font>; i><font color="#F0E130">1</font>; i--) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">if</font>(<font color="#ADD8E6">divisibleBy</font>(i)) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">return false</font>; <font color="gray">//Found divisor, not a prime
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">return true</font>; <font color="gray">//No divisor found
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//Checks if the number is divisible by given divisor.
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">private</font> <font color="#DF7401">boolean</font> <font color="#ADD8E6">divisibleBy</font>(<font color="#DF7401">int</font> divisor) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">return</font> (number % divisor) == <font color="#F0E130">0</font>;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>}
        
    ]]></code>
    <text>
        <![CDATA[
        Láthatjuk, hogy a <i>Callable</i> generikus osztály típusparamétere lesz a 
		háttérben végzett művelet visszatérési típusa.
		<p>
		Az is igaz továbbá, hogy a <i>Callable</i> is funckionális interfész, azaz 
		megadható labda kifejezéssel.
        ]]>
    </text>
    <title text="Future"/>
    <text>
        <![CDATA[
        Szükségünk lesz egy másik osztályra a háttérművelet eredményének lekérdezéséhez. 
		Ennek a neve <a href="https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/Future.html">java.util.concurrent.Future</a> 
		("jövő").
        ]]>
    </text>
    <boxed title="A név oka">
        <![CDATA[
        Amikor egy feladatot (egy <i>Callable</i>-t) adunk át nem fogjuk tudni azonnal
        megkapni a feladat eredményét (mivel a feladatnak előbb be kell fejeződnie a háttérben).
        <p>
        Az eredmény helyett egy olyan objektumot kapunk, ami <b>a jövőben</b> majd vissza fogja 
		adni az eredményt. Más programnyelveken ezeket gyakran <b>promise</b>-nak (
		"ígéret") nevezik.
        ]]>
    </boxed>
    <text>
        <![CDATA[
        A <i>Future</i> osztály szintén generikus. Meg kell adnunk a háttérfeladat eredményének 
		típusát. Nyilvánvalóan ennek meg kell egyeznie a <i>Callable</i> visszatérési típusával.
        ]]>
    </text>
    <interactive instruction="Ennek a Callable-nek meg kell számolnia egy betű előfordulását a kapott String-ben!">
        <data><![CDATA[

   <font color="#E65100">class</font> <font color="#999900">LetterCounter</font> ___ <font color="#999900">Callable</font>&lt;<font color="#999900">Integer</font>> {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">private</font> <font color="#999900">String</font> text;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">private</font> <font color="#DF7401">char</font> letter;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#ADD8E6">___</font>(<font color="#999900">String</font> text, <font color="#DF7401">char</font> letter) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">this</font>.<font color="#ADD8E6">text</font> = text;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">this</font>.<font color="#ADD8E6">letter</font> = letter;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="red">@Override</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> ___ <font color="#ADD8E6">call</font>() <font color="#E65100">throws</font> <font color="#999900">Exception</font> {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//Cool one liner solution
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">return</font> <font color="#999900">Collections</font>.<font color="#ADD8E6">frequency</font>(<font color="#999900">Arrays</font>.<font color="#ADD8E6">asList</font>(text.<font color="#ADD8E6">toCharArray</font>()), letter);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>}

        ]]></data>
        <answer place="0">implements</answer>
        <answer place="1">LetterCounter</answer>
        <answer place="2">Integer</answer>
    </interactive>
    <title text="Executor services"/>
    <text>
        <![CDATA[
        Az <i>ExecutorService</i> (háttérfuttató szolgáltatás) egy olyan osztály, amely <i>Callable</i> objektumokat fogad, miközben <i>Future</i> objektumokat ad vissza, 
		majd a háttérben kiszámítja a kapott <i>Callable</i> objektumok eredményeit. Ezeknek az alaposztálya a
        a <a href="https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ExecutorService.html">java.util.concurrent.ExecutorService</a>.
        ]]>
    </text>
    <boxed title="Executors segédosztály">
        <![CDATA[
        Az <i>ExecutorService</i>-ek egy segédosztállyal hozhatók létre. Ez lesz a 
        <a href="https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/Executors.html">Executors</a>. 
		Erre hamarosan fogunk példákat látni.
        ]]>
    </boxed>
    <title text="Egyszálas ExecutorService"/>
    <text>
        <![CDATA[
        Ez a lehető legegyszerűbb futtató szolgáltatás. Egyetlen háttérszálat foglal 
		magába, és azon futtatja a kapott <i>Callable</i> objektumokat.
        ]]>
    </text>
    <code><![CDATA[
        
 <font color="gray">//Create a task that we want to do in parallel
</font>
<br/><font color="#999900">PrimeTask</font> task = <font color="#E65100">new</font> <font color="#999900">PrimeTask</font>(<font color="#F0E130">78</font>);
<br/>
<br/><font color="gray">//Create an executor service
</font>
<br/><font color="#999900">ExecutorService</font> service = <font color="#999900">Executors</font>.<font color="#ADD8E6">newSingleThreadExecutor</font>();
<br/>
<br/><font color="gray">//Pass the task to the service, get a Future
</font>
<br/><font color="#999900">Future</font>&lt;<font color="#999900">Boolean</font>> result = service.<font color="#ADD8E6">submit</font>(task);
<br/>
<br/><font color="#E65100">try</font> { <font color="gray">//Wait for result, then print it
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#DF7401">boolean</font> isPrime = result.<font color="#ADD8E6">get</font>();
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(<font color="#2E8B57">"78 is a prime: "</font> + isPrime);
<br/>} <font color="#E65100">catch</font>(<font color="#999900">Exception</font> e) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">err</font>.<font color="#ADD8E6">println</font>(<font color="#2E8B57">"Failed to execute task!"</font>);
<br/>} <font color="#E65100">finally</font> {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//An executor service must explicitly be shut down
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;service.<font color="#ADD8E6">shutdown</font>();
<br/>}
        
    ]]></code>
    <text>
        <![CDATA[
        Látható, hogy a szolgáltatás visszaad egy <i>Future</i> objektumot a kapott feladatho. 
		Ennek a <i>get</i> metódusa megpróbálja visszaadni a háttérfeladat eredményét.
        Ha az eredmény még nem került kiszámításra, akkor leállítja az aktuális szálat, amíg az elkészül.
        ]]>
    </text>
    <text>
        <![CDATA[
        Ehhez a feladathoz egy egyszerű <i>Thread</i> osztály is elég lett volna. A futtató szolgáltatások
        csak akkor kezdenek el igazán hasznosak lenni, amikor sok feladatot kell végrehajtani.
        ]]>
    </text>
    <title text="Fix szálas ExecutorService"/>
    <text>
        <![CDATA[
        A fix szálas futtató szolgáltatások rögzített számú szálat használnak a végrehajtáshoz 
        (a szálak számát a szolgáltatás létrehozásakor adjuk meg, utána nem változtatható).
        ]]>
    </text>
    <advanced title="Processzor magok számolása">
        <![CDATA[
        Ahogyan az első fejezetben említettük, a párhuzamos programozás hatékonysága függ a
        rendelkezésre álló processzor magok mennyiségétől. Érdekes módon a Java lehetőséget biztosít arra, 
		hogy ezt a számot futásidőben megkapjuk:
        <br><br>
        <i>Runtime.getRuntime().availableProcessors()</i>
        ]]>
    </advanced>
    <text>
        <![CDATA[
        Használjunk fix szálas szolgáltatást! Az egyetlen különbség az, hogy most egy feladat helyett egy 
		feladat listát fogok átadni a szolgáltatásnak, és az egy listát fog visszaadni a 
		<i>Future</i> objektumokból.
        ]]>
    </text>
    <code><![CDATA[
        
<font color="#999900">List</font>&lt;<font color="#999900">PrimeTask</font>> tasks = <font color="#E65100">new</font> <font color="#999900">ArrayList</font>&lt;>();
<br/><font color="gray<font color="#2E8B57">">//Let'</font>s check primality between 2 and 20
</font>
<br/><font color="#E65100">for</font>(<font color="#DF7401">int</font> i=<font color="#F0E130">2</font>; i&lt;=<font color="#F0E130">20</font>; i++) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;tasks.<font color="#ADD8E6">add</font>(<font color="#E65100">new</font> <font color="#999900">PrimeTask</font>(i));
<br/>}
<br/>
<br/><font color="gray">//Create a thread pool, based on processor count
</font>
<br/><font color="#DF7401">int</font> procCount = <font color="#999900">Runtime</font>.<font color="#ADD8E6">getRuntime</font>().<font color="#ADD8E6">availableProcessors</font>();
<br/><font color="#999900">ExecutorService</font> pool = <font color="#999900">Executors</font>.<font color="#ADD8E6">newFixedThreadPool</font>(procCount);
<br/>
<br/><font color="#E65100">try</font> {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//Pass all tasks in, get a Future list
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">List</font>&lt;<font color="#999900">Future</font>&lt;<font color="#999900">Boolean</font>>> futures = pool.<font color="#ADD8E6">invokeAll</font>(tasks);
<br/>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//Wait for all tasks to finish
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">for</font>(<font color="#DF7401">int</font> i=<font color="#F0E130">0</font>; i&lt;futures.<font color="#ADD8E6">size</font>(); i++) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//Get task and future
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">Future</font>&lt;<font color="#999900">Boolean</font>> result = futures.<font color="#ADD8E6">get</font>(i);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">PrimeTask</font> task = tasks.<font color="#ADD8E6">get</font>(i);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//Get the boolean result of calculation
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#DF7401">boolean</font> isPrime = result.<font color="#ADD8E6">get</font>();
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(task.<font color="#ADD8E6">number</font> + <font color="#2E8B57">" is a prime: "</font> + isPrime);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>} <font color="#E65100">catch</font> (<font color="#999900">Exception</font> e) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">err</font>.<font color="#ADD8E6">println</font>(<font color="#2E8B57">"Failed to execute!"</font>);
<br/>} <font color="#E65100">finally</font> {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//Shut the pool down
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;pool.<font color="#ADD8E6">shutdown</font>();
<br/>}
        
    ]]></code>
    <text>
        <![CDATA[
        Vegyük észre, hogy a feladatok száma meghaladja a processzorok számát (legalábbis az én számítógépemen), de ez a
        nem jelent problémát a szolgáltatás számára. A programozó elől elrejtve, hatékony 
		módon felosztja majd a feladatokat a szálak között.
        ]]>
    </text>
    <title text="További ExecutorService típusok"/>
    <text>
        <![CDATA[
        Láttuk a leggyakoribb futtató szolgáltatás típusokok, azonban az <i>Executors</i> osztályban több is rendelkezésre áll.
        Néhány különösen érdekes közülük:
        ]]>
    </text>
    <list>
        <![CDATA[
        <ul>
        <li><b>Tárazott szolgáltatás</b>: automatikusan meghatározza a szükséges szálak mennyiségét.</li>
        <li><b>Szabályozott szolgáltatás</b>: késleltetés után vagy időszakosan tudja végrehajtani a feladatokat.</li>
        </ul>
        ]]>
    </list>
    <interactive instruction="Tegyük fel, hogy véletlenszerű String-ek vannak egy listában. Használjuk a fent definiált LetterCounter feladatot, hogy egy futtató szolgáltatás segítségével megszámoljuk az 'a' előfordulását bennük!">
        <data><![CDATA[

<font color="#999900">List</font>&lt;<font color="#999900">String</font>> strings = <font color="#ADD8E6">generateStrings</font>(); <font color="gray">//suppose this creates the list of strings
</font>
<br/><font color="#999900">List</font>&lt;___> tasks = <font color="#E65100">new</font> <font color="#999900">ArrayList</font>&lt;>();
<br/><font color="#E65100">for</font>(<font color="#999900">String</font> text: strings) { <font color="gray">//create tasks
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;tasks.<font color="#ADD8E6">add</font>(<font color="#E65100">new</font> <font color="#999900">LetterCounter</font>(text, ___));
<br/>}
<br/><font color="#999900">ExecutorService</font> pool = ___.<font color="#ADD8E6">newFixedThreadPool</font>(<font color="#F0E130">5</font>);
<br/><font color="#999900">List</font>&lt;<font color="#999900">Future</font>&lt;<font color="#999900">Integer</font>>> futures = pool.<font color="#ADD8E6">invokeAll</font>(tasks);
<br/><font color="gray">//Do something with the results here...
</font>
<br/>pool.<font color="#ADD8E6">shutdown</font>();

        ]]></data>
        <answer place="0">LetterCounter</answer>
        <answer place="1">'a'</answer>
        <answer place="2">Executors</answer>
    </interactive>
    <!-- keywords: callable, executors future  -->
</resources>
