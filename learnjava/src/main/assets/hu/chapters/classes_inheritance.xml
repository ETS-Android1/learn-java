<?xml version="1.0" encoding="utf-8" standalone="no"?>
<resources>
    <chapterdata>
        <id>153</id>
        <name>Öröklődés</name>
    </chapterdata>
    <text>
        <![CDATA[
        Osztályok létrehozásakor gyakran szeretnénk "kapcsolatokat" definiálni az osztályaink között. Nézzünk meg egy
        példát: létrehoztuk a <b>Dog</b> (kutya) osztályt, <i>név, kor, stb...</i> tagokkal. Szeretnénk egy <b>TrainedDog</b> (kiképzett kutya) 
		osztályt is.
        ]]>
    </text>
    <boxed title="Újrafelhasználhatóság">
        <![CDATA[
        A kiképzett kutya is csak egy kutya. Jó lenne, ha a <b>TrainedDog</b> osztály valahogyan örökölhetné a <b>Dog</b> osztály összes tagját 
		és metódusát, természetesen anélkül, hogy azokat át kellene másolni és beilleszteni a <b>TrainedDog</b> osztályba. Ezt (és még sok mást)
        tesz lehetővé számunkra az öröklődés.
        ]]>
    </boxed>
    <text>
        <![CDATA[
        Az osztályt, amelytől örökölünk, <b>superclass</b>-nak (néha szülő osztálynak) nevezzük, az öröklődő osztály pedig a <b>subclass</b> 
        (vagy gyermek osztály, alosztály).
        Java-ban a <b>extends</b> kulcsszóval határozzuk meg ezt az öröklési kapcsolatot az osztályaink között:
        ]]>
    </text>
    <code><![CDATA[
        
        <font color="#E65100">public class</font> <font color="#999900">Dog</font> {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">protected</font> <font color="#999900">String</font> name;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">protected</font> <font color="#DF7401">int</font> age;
<br/>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#999900">Dog</font>(<font color="#999900">String</font> name, <font color="#DF7401">int</font> age) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">this</font>.<font color="#ADD8E6">name</font> = name;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">this</font>.<font color="#ADD8E6">age</font> = age;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#DF7401">void</font> <font color="#ADD8E6">printDogData</font>() {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(<font color="#2E8B57">"Dog'</font>s name: " + name +
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#2E8B57">", age: "</font> + age);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>}
        
    ]]></code>
    <code><![CDATA[
        
        <font color="#E65100">public class</font> <font color="#999900">TrainedDog</font> <font color="#E65100">extends</font> <font color="#999900">Dog</font> {
<br/>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">private</font> <font color="#999900">String</font> skill;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#999900">TrainedDog</font>(<font color="#999900">String</font> name, <font color="#DF7401">int</font> age, <font color="#999900">String</font> skill) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">super</font>(name, age); <font color="gray">//call the constructor of super class, Dog
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">this</font>.<font color="#ADD8E6">skill</font> = skill;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
<br/>}
        
    ]]></code>
    <text>
        <![CDATA[
        Itt észrevehetünk néhány dolgot: először is, <i>védett</b> láthatóságot használunk a <i>Dog</i> adattagjaira. Ez azért van, hogy 
        a <i>TrainedDog</i> osztályon belül is elérhetők legyenek.
        <p>
        Másodszor, a <b>super</b> kulcsszó a konstruktoron belül. Ezt arra használjuk, hogy meghívjuk a szülő osztály konstruktorát, ebben a
        ebben az esetben a <i>Dog</i> osztályét. Ez a konstruktor gondoskodik a név és a kor értékek beállításáról.
        ]]>
    </text>
    <boxed title="Megkötés">
        <![CDATA[
        A superclass konstruktorának hívása mindig az első utasítás kell, hogy legyen az alosztályok konstruktorában (ahogyan az
        a kódpéldában is látható)! A Java fordító hibaüzenettel áll le, ha ez nem így van.
        ]]>
    </boxed>
    <text>
        <![CDATA[
        A main metódusban (amely lehet bármelyik osztályban) létrehozunk néhány objektumot:
        ]]>
    </text>
    <code><![CDATA[
        
        <font color="#E65100">public static</font> <font color="#DF7401">void</font> <font color="#ADD8E6">main</font>(<font color="#999900">String</font>[] args) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//create a trained dog object
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">TrainedDog</font> t1 = <font color="#E65100">new</font> <font color="#999900">TrainedDog</font>(<font color="#2E8B57">"Edgar"</font>, 10, <font color="#2E8B57">"Guide dog"</font>);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//TrainedDog inherited this method from Dog!</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;t1.<font color="#ADD8E6">printDogData</font>();
<br/>}
        
    ]]></code>
    <text>
        <![CDATA[
        Amint láthatjuk, használhatjuk a <i>printDogData</i> metódust a <i>TrainedDog</i> objektumunkkal, annak ellenére, hogy nem deklaráltuk azt az
        osztályban! A metódust a szuperosztályától (<i>Dog</i> örökölte.
        <p>
        Van azonban egy apró probléma: vegyük észre, hogy a kódminta futtatásakor csak a kutya neve és kora jelenik meg, 
        a képesség nem! Ennek az az oka, hogy a <i>Dog</i> osztály metódusa nem tud erről a tagról, mivel az alosztályban lett deklarálva.
        ]]>
    </text>
    <boxed title="Metódusok felülírása">
        <![CDATA[
        A metódusok felülírását a fentihez hasonló problémák megoldására vezették be! Lehetővé teszi számunkra, hogy "újra definiáljuk" a
        szülő osztály metódusát az alosztályon belül.
        <p>
        Nem igényel semmilyen kulcsszót, egyszerűen csak deklarálnunk kell ugyanazt a metódust az alosztályon belül, és az felülírja az eredeti metódust.
        ]]>
    </boxed>
    <code><![CDATA[
        
        <font color="#E65100">public class</font> <font color="#999900">TrainedDog</font> <font color="#E65100">extends</font> <font color="#999900">Dog</font> {
<br/>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">private</font> <font color="#999900">String</font> skill;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#999900">TrainedDog</font>(<font color="#999900">String</font> name, <font color="#DF7401">int</font> age, <font color="#999900">String</font> skill) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">super</font>(name, age); <font color="gray">//call the constructor of super class, Dog
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">this</font>.<font color="#ADD8E6">skill</font> = skill;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="red">@Override</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#DF7401">void</font> <font color="#ADD8E6">printDogData</font>() {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">super</font>.<font color="#ADD8E6">printDogData</font>(); <font color="gray">//will print the name and age</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(<font color="#2E8B57">"Skill: "</font> + skill);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>}
        
    ]]></code>
    <text>
        <![CDATA[
        Futtassuk újra a main metódust, és látni fogjuk, hogy most a <i>printDogData</i> kiírja a kiképzett kutya képességét is, mert a
        felülírt metódus fog meghívódni. A <b>@Override</b> annotáció nem szükséges, de ajánlott.
        <p>
        Vegyük észre, hogy a super kulcsszó itt is használható, a szülő osztály metódusának meghívására szolgál (nélküle a metódus
        önmagát hívná meg).
        ]]>
    </text>
    <advanced title="Annotációk">
        <![CDATA[
        Az annotációk az <b>@</b> szimbólummal kezdődnek, és extra információkat szolgáltatnak a kódról,
        a programozónak és a fordító programnak.
        <p>
        Ha például az <i>@Override</i> annotációt tesszük be egy metódus elé, és egy elírás miatt rossz nevet adunk meg a metódusnak, 
		a program figyelmeztetni fog minket, hogy a szuperosztály nem rendelkezik ilyen metódussal (mivel felülírni csak a szülő osztályban 
		létező metódust lehet).
        ]]>
    </advanced>
    <title text="Öröklődési hierarchia"/>
    <text>
        <![CDATA[
        Az osztályoknak több alosztályuk is lehet, ezeknek is lehetnek saját alosztályaik, és így tovább. Ezek együttesen hozzák létre a
        öröklődési hierarchiát. Ezt gyakran ábrázolják valamilyen diagrammal, például így:
        ]]>
    </text>
    <image name="inheritance_hierarchy"/>
    <advanced title="Több szülő osztály">
        <![CDATA[
        A Java-ban <b>nem megengedett</b>, hogy egy osztálynak több szülője is legyen. Egy osztály csak egy szuperosztálytól örökölhet.
        Más nyelvek, mint például a C++, megengedik ezt.
        ]]>
    </advanced>
    <boxed title="java.lang.Object">
        <![CDATA[
        Az <b>Object</b> (valóban kissé zavaros név) osztály áll a hierarchia csúcsán. Ha nem írunk explicit módon
        szülő osztályt az osztályunknak, akkor az <b>Object</b>-től fog örökölni.
        <p>
        Ennek az osztálynak nincsenek tagjai, de van néhány metódusa, például a <i>equals</i>. Következésképpen ezeket a metódusokat használhatjuk
        és felülírhatjuk bármelyik osztályban.
        ]]>
    </boxed>
    <text>
        <![CDATA[
        A <b>final</b> kulcsszóval lehet egy osztályt úgy megjelölni, hogy ne lehessen tőle örökölni:
        <br><br>
        <i>public final class Integer { ... }</i>
        <br><br>
        Hasonlóképpen a metódusokat is jelölhetjük finalnak, és akkor nem lehet felülírni őket. Lásd 
        <a href="https://stackoverflow.com/questions/5181578/what-is-the-point-of-final-class-in-java">ezt</a> a kérdést
        további részletekért.
        ]]>
    </text>
    <interactive instruction="Egészítsd ki a kódot úgy, hogy öröklődés legyen, és a szülő osztály konstruktora meghívódjon!">
        <data><![CDATA[

<font color="#E65100">class</font> <font color="#999900">FragmentActivity</font> ___ <font color="#999900">Activity</font> {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#999900">FragmentActivity</font>(<font color="#DF7401">int</font> id, <font color="#DF7401">int</font> fragmentCount) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#ADD8E6">___</font>(id);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>}

        ]]></data>
        <answer place="0">extends</answer>
        <answer place="1">super</answer>
    </interactive>
    <title text="Alosztály használata szülőként"/>
    <text>
        <![CDATA[
        Javában egy objektumot szuperosztályként is használhatunk. Nézzünk néhány kódmintát, hogy ez érthetőbb legyen.
        <br><br>
        Másképpen úgy is fogalmazhatunk, hogy egy objektum úgy viselkedhet, mint az öröklési hierarchiában fölötte lévő bármelyik osztály.
        ]]>
    </text>
    <boxed title="instanceof">
        <![CDATA[
        A <b>instanceof</b> kulcsszóval ellenőrizhetjük, hogy egy objektum egy osztályhoz tartozik-e. Ez egy bólusú értéket ad vissza.
        ]]>
    </boxed>
    <code><![CDATA[
        
        <font color="#E65100">public static</font> <font color="#DF7401">void</font> <font color="#ADD8E6">main</font>(<font color="#999900">String</font>[] args) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//create a trained dog object
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">TrainedDog</font> t1 = <font color="#E65100">new</font> <font color="#999900">TrainedDog</font>(<font color="#2E8B57">"Rex"</font>, 10, <font color="#2E8B57">"Police dog"</font>);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">if</font>(t1 <font color="#E65100">instanceof</font> <font color="#999900">TrainedDog</font>) { <font color="gray">//this will be true, no surprise there
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(<font color="#2E8B57">"t1 is a TrainedDog object!"</font>);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">if</font>(t1 <font color="#E65100">instanceof</font> <font color="#999900">Dog</font>) { <font color="gray">//due to polymorphism, this will also be true!
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(<font color="#2E8B57">"t1 is also a Dog object!"</font>);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>}
        
    ]]></code>
    <text>
        <![CDATA[
        Mindkét sor kiíródik, tehát a <i>TrainedDog</i> objektum egyben <i>Dog</i> objektum is! Ez az a viselkedés, amit szeretnénk, mert 
		intuitívan tudjuk, hogy a kiképzett kutya egy speciális kutya. 
        ]]>
    </text>
    <code><![CDATA[
        
        <font color="#E65100">public static</font> <font color="#DF7401">void</font> <font color="#ADD8E6">main</font>(<font color="#999900">String</font>[] args) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//create dog objects, some of them are trained dogs</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">Dog</font> d1 = <font color="#E65100">new</font> <font color="#999900">Dog</font>(<font color="#2E8B57">"Bernard"</font>, <font color="#F0E130">5</font>);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">TrainedDog</font> t1 = <font color="#E65100">new</font> <font color="#999900">TrainedDog</font>(<font color="#2E8B57">"Maya"</font>, 10, <font color="#2E8B57">"Drug sniffer dog"</font>);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">Dog</font> d2 = <font color="#E65100">new</font> <font color="#999900">Dog</font>(<font color="#2E8B57">"Lassie"</font>, <font color="#F0E130">3</font>);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">ArrayList</font>&lt;Dog> dogList = <font color="#E65100">new</font> <font color="#999900">ArrayList</font>&lt;>();
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;dogList.<font color="#ADD8E6">add</font>(d1);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;dogList.<font color="#ADD8E6">add</font>(t1); <font color="gray">//the trained dog can also be added!</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;dogList.<font color="#ADD8E6">add</font>(d2);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">for</font>(<font color="#999900">Dog</font> dog: dogList) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;dog.<font color="#ADD8E6">printDogData</font>();
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>}
        
    ]]></code>
    <text>
        <![CDATA[
        Az objektumok ezen tulajdonsága nélkül nem tudnánk hozzáadni a kiképzett kutyákat a kutyák listájához!
        ]]>
    </text>
    <boxed title="Dinamikus polimorfizmus (többalakúság)">
        <![CDATA[
        Figyeljük meg, hogy amikor a listán végigmegyünk és elérjük a <i>TrainedDog</i> objektumot, a helyes <i>printDogData</i> metódus
        (azaz a <i>TrainedDog</i> osztályban implementált) metódus lesz meghívva. Ezt nevezzük <b>dinamikus polimorfizmusnak</b>.
        <p>
        Polimorfizmus, mivel a metódusnak több implementációja van, dinamikus, mivel futásidőben határozza meg a Java (az objektum 
        eredeti típusából), hogy ezek közül melyiket hívjuk meg.
        ]]>
    </boxed>
    <title text="Objektumok átalakítása"/>
    <text>
        <![CDATA[
        Az objektumok átalakítása (cast-olás) azt jelenti, hogy megváltoztatjuk a típusukat. Nyilvánvaló, hogy nem tudunk bármelyik osztálytípust 
		bármelyik másikba átvinni. Érvényes átalakítást csak az öröklési hierarchián belül rokon osztályok között lehet végrehajtani.
        ]]>
    </text>
    <boxed title="Hogyan alakítsunk át">
        <![CDATA[
        Az átalakítás úgy történik, hogy zárójelek közé tesszük az osztályt, amelyre cast-olni szeretnénk. 
		Nézd meg az alábbi példákat a demonstrációhoz.
        ]]>
    </boxed>
    <text>
        <![CDATA[
        Az érvényes átalakításoknak két típusa van: upcast és downcast. <b>Az upcast</b> ("átalakítás felfelé") azt jelenti, hogy alosztályból 
		szülő osztályba cast-olunk.
        Mivel egy objektum úgy viselkedhet, mint a szuperosztálya (lásd fentebb), az ilyen átalakítás mindig biztonságos, nem fog hibát okozni.
        ]]>
    </text>
    <code><![CDATA[
        
        <font color="gray">//upcast a TrainedDog object to a Dog</font>
<br/><font color="#999900">Dog</font> dog = (<font color="#999900">Dog</font>)new <font color="#999900">TrainedDog</font>(<font color="#2E8B57">"Manni"</font>,5, <font color="#2E8B57">"Therapy dog"</font>);
        
    ]]></code>
    <text>
        <![CDATA[
        Ilyen esetekben nem is szükséges az osztálynevet zárójelbe írni. A Java képes <b>cast-olni implicit módon</b> (azaz magától 
		kitalálja, hogy mire kell átalakítani).
        ]]>
    </text>
    <code><![CDATA[
        
        <font color="gray">//upcast a TrainedDog object to a Dog</font>
<br/><font color="#999900">Dog</font> dog = new <font color="#999900">TrainedDog</font>(<font color="#2E8B57">"Manni"</font>,5, <font color="#2E8B57">"Therapy dog"</font>);
        
    ]]></code>
    <text>
        <![CDATA[
        Ugyanez az implicit upcast történt, amikor a listás példában a <i>TrainedDog</i>-ot hozzáadtuk a kutyák listájához!
        <br><br>
        A másik cast, <b>downcast</b> az, amikor a szuperosztály típusát alosztályra változtatjuk. Ez nem biztonságos. Először is
        lássunk egy olyan downcastot, amely nem eredményez hibát:
        ]]>
    </text>
    <code><![CDATA[
        
        <font color="gray">//'dog' is actually a TrainedDog, it's safe to downcast</font>
<br/><font color="#999900">Dog</font> dog = new <font color="#999900">TrainedDog</font>(<font color="#2E8B57">"Manni"</font>,5, <font color="#2E8B57">"Therapy dog"</font>);
<br/>
<br/><font color="#999900">TrainedDog</font> td = (<font color="#999900">TrainedDog</font>)dog; <font color="gray">//no exception</font>
        
    ]]></code>
    <text>
        <![CDATA[
        Azonban belefuthatunk egy <b>ClassCastException</b>-be, ha nem vagyunk óvatosak:
        ]]>
    </text>
    <code><![CDATA[
        
<font color="gray">//'dog' is NOT a TrainedDog, downcast will fail!</font>
<br/><font color="#999900">Dog</font> dog = <font color="#E65100">new</font> <font color="#999900">Dog</font>(<font color="#2E8B57">"Sisi"</font>, <font color="#F0E130">7</font>);
<br/>
<br/><font color="#999900">TrainedDog</font> td = (<font color="#999900">TrainedDog</font>)dog; <font color="gray">//ClassCastException</font>
        
    ]]></code>
    <text>
        <![CDATA[
        Nehéz lehet észrevenni a hibás cast-okat. A fentihez hasonló kód érvényes, lefordítható, a kivétel csak futás közben történik! 
		Használd az <i>instanceof</i>-ott a cast-tal kapcsolatos kivételek megelőzésére:
        ]]>
    </text>
    <code><![CDATA[
        
        <font color="gray">//'dog' is NOT a TrainedDog, downcast will fail!</font>
<br/><font color="#999900">Dog</font> dog = <font color="#E65100">new</font> <font color="#999900">Dog</font>(<font color="#2E8B57">"Sisi"</font>, <font color="#F0E130">7</font>);
<br/>
<br/><font color="#E65100">if</font>(dog <font color="#E65100">instanceof</font> <font color="#999900">TrainedDog</font>) { <font color="gray">//false</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">TrainedDog</font> td = (<font color="#999900">TrainedDog</font>)dog; <font color="gray">//not executed, no exception</font>
<br/>}
        
    ]]></code>
    <!-- how to do inheritance: Object, extends, super, final keywords, polymorphism: instanceof -->
</resources>
