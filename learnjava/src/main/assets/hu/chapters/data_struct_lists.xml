<?xml version="1.0" encoding="utf-8" standalone="no"?>
<resources>
    <chapterdata>
        <id>202</id>
        <name>Listák</name>
    </chapterdata>
    <text>
        <![CDATA[
        A lista az egyik legegyszerűbb adatszerkezet. Hasonlít a tömbökhöz, de a tömböktől eltérően,
        szükség esetén automatikusan képes átméretezni magát.
        ]]>
    </text>
    <boxed title="Listák a Java-ban">
        <![CDATA[
        A <i>JDK</i> listái a <a href="https://docs.oracle.com/javase/7/docs/api/java/util/List.html">java.util.List</a> 
		interfészt valósítják meg. (amely pedig az előző fejezetben említett <i>Collection</i> interfészt valósítja meg).
        <p>
        Két fontos lista implementáció áll rendelkezésre: 
        <a href="https://docs.oracle.com/javase/7/docs/api/java/util/ArrayList.html">java.util.ArrayList</a> és 
        <a href="https://docs.oracle.com/javase/7/docs/api/java/util/LinkedList.html">java.util.LinkedList</a>.
        ]]>
    </boxed>
    <image name="list_hierarchy"/>
    <title text="ArrayList"/>
    <text>
        <![CDATA[
        Ahogy a neve is mutatja, ez a lista belsőleg egy tömböt használ (<i>tömblista</i>). Képes dinamikusan átméretezni
        a tömböt, hogy több elemnek helyet biztosítson. Az átméretezés és a belső tömb el van rejtve 
		előlünk (privát láthatóság). A programozónak azzal nem kell foglalkoznia.
        ]]>
    </text>
    <boxed title="A belső tömb">
        <![CDATA[
        A tömb átméretezése számításigényes művelet. Annak biztosítása érdekében, hogy ez a művelet ritkán kerüljön 
		végrehajtásra, a belső tömböt mindig <b>duplázódni</b> fog ahelyett, hogy csak eggyel növekedne. 
        Az osztály tartalmaz néhány metódust is, amelyekkel a programozó beleszólhat ebbe.
        ]]>
    </boxed>
    <text>
        <![CDATA[
        A <i>ArrayList</i> képességeinek bemutatásához oldjuk meg az előző fejezetben szereplő feladatot, 
		a számok bekérését és összeadását:
        ]]>
    </text>
    <code><![CDATA[
        
        <font color="#E65100">public static</font> <font color="#DF7401">void</font> <font color="#ADD8E6">main</font>(<font color="#999900">String</font>[] args) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#DF7401">boolean</font> reading =  <font color="#E65100">true</font>; <font color="gray">//változók létrehozása
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#DF7401">int</font> counter = <font color="#F0E130">0</font>;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">String</font> input =  <font color="#E65100">null</font>;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">Scanner</font> scanner = <font color="#E65100">new</font> <font color="#999900">Scanner</font>(<font color="#999900">System</font>.<font color="#ADD8E6">in</font>);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//nem kell foglalkoznunk a listán belüli tömbbel</font>
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">ArrayList</font>&lt;<font color="#999900">Integer</font>> numbers = <font color="#E65100">new</font> <font color="#999900">ArrayList</font>&lt;>();
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">while</font>(reading) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">print</font>(<font color="#2E8B57">"Add meg a "</font> + counter + <font color="#2E8B57">". számot, vagy 'q'-t a megálláshoz: "</font>);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">try</font> {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;input = scanner.<font color="#ADD8E6">next</font>(); <font color="gray">//szám mentése
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;numbers.<font color="#ADD8E6">add</font>(Integer.<font color="#ADD8E6">parseInt</font>(input)); <font color="gray">//adjuk a lista végéhez
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;} <font color="#E65100">catch</font>(<font color="#999900">NumberFormatException</font> e) { <font color="gray">//not a number, maybe 'q'?</font>
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">if</font>(<font color="#2E8B57">"q"</font>.<font color="#ADD8E6">equals</font>(input)) reading =  <font color="#E65100">false</font>; <font color="gray">//'q' was entered, stop</font>
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#DF7401">int</font> sum = <font color="#F0E130">0</font>; <font color="gray">//összegzés
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">for</font>(<font color="#DF7401">int</font> i: numbers) { <font color="gray">//a for-each ciklus is működik listákra
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;sum += i;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(<font color="#2E8B57">"Az összeg"</font> + sum);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;scanner.<font color="#ADD8E6">close</font>();
<br/>}
        
    ]]></code>
    <text>
        <![CDATA[
        Ez a kód most már hatékony és kivételektől mentes. Ne felejtsük el, hogy az <i>ArrayList</i>-et a használat 
		előtt importálni kell.
        ]]>
    </text>
    <boxed title="Mikor használjuk?">
        <![CDATA[
        Használj <i>ArrayList</i>-et, ha gyakran kell értékeket olvasni belőle (az elemek kinyerése egy tömbből gyors). 
		Ne használj ilyen listát, ha sok elemet kell különböző pozíciókba beilleszteni vagy onnan eltávolítani (például, 
		ha beillesztünk egy elemet, az összes többi utána következő elemet odébb kell mozdítani, és ez drága művelet).
        ]]>
    </boxed>
    <interactive instruction="Egészítsd ki a programot, amely az első 100 természetes számot hozzáadja egy tömblistához!">
        <data><![CDATA[

<font color="#999900">List</font>&lt;___> numbers = <font color="#E65100">new</font> <font color="#999900">ArrayList</font>&lt;>();
<br/><font color="#E65100">for</font>(<font color="#DF7401">int</font> i=<font color="#F0E130">0</font>; i&lt;<font color="#F0E130">100</font>; i++) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;numbers.<font color="#ADD8E6">___</font>(i+<font color="#F0E130">1</font>);
<br/>}

        ]]></data>
        <answer place="0">Integer</answer>
        <answer place="1">add</answer>
    </interactive>
    <title text="LinkedList"/>
    <text>
        <![CDATA[
        A láncolt (<i>linked</i> listákat egy kicsit nehezebb megérteni. Minden egyes elem a listán belül hivatkozik az 
		utána következő elemre, és a lista tárol egy hivatkozást az első elemre. Az utolsó elem <i>null</i>-ra hivatkozik. 
		<br><br>
		Egy ilyen listát úgy járhatunk be, hogy elindulunk az tárolt első elemtől, majd elkérjük tőle a következő elemet, és így 
		tovább. Amikor egy elem azt mondja, hogy a következő elem <i>null</i>, akkor tudjuk, hogy a lista végére értünk.
        ]]>
    </text>
    <image name="linked_list"/>
    <text>
        <![CDATA[
        Egyes implementációkban minden elem fenntartja a hivatkozást az előző elemre is, így a listát visszafelé is 
		bejárhatjuk. Ezekben az esetekben gyakori, hogy a lista az utolsó elemre való hivatkozást is fenntartja.
        Ezeket a listákat <b>duplán láncolt</b> listáknak nevezzük.
        ]]>
    </text>
    <boxed title="Mikor használjuk?">
        <![CDATA[
        Láncolt listát akkor használjunk, ha gyakran kell elemeket beszúrni vagy eltávolítani a lista különböző 
		pontjairól (ez egy olcsó művelet egy láncolt lista esetében, mivel csak egy hivatkozást kell frissíteni). 
		Ne használj ilyen listát, ha gyakran kell elemekre hivatkozni belőle (amikor egy elemetet keresünk, a listát 
		<i>be kell járni</i>, amíg az elemet meg nem találjuk).
        ]]>
    </boxed>
    <text>
        <![CDATA[
        Vegyük észre, hogy ez a két lista típus szépen kiegészíti egymást. Mindegyikük abban erős, amiben a másik gyenge.
        ]]>
    </text>
    <title text="Műveletek listákon"/>
    <text>
        <![CDATA[
        Annak ellenére, hogy teljesen eltérő a belső működésük, ez a két lista típus ugyanazokat a metódusokat teszi 
		elérhetővé a <i>List</i> interfész miatt. A programozó szemszögéből nézve nagyon hasonlóan működnek. 
		Ezért ezek a példák csak a <i>LinkedList</i> esetében kerülnek bemutatásra (<i>ArrayList</i>-re pont ugyanígy 
		fog működni).
        ]]>
    </text>
    <code><![CDATA[
        
<font color="gray">//lista létrehozása double értékeknek
</font>
<br/><font color="#999900">LinkedList</font>&lt;<font color="#999900">Double</font>> nums = <font color="#E65100">new</font> <font color="#999900">LinkedList</font>&lt;>();
<br/>nums.<font color="#ADD8E6">size</font>(); <font color="gray">//visszaadja a listában lévő elemek számát
</font>
<br/>
<br/><font color="gray">//hozzáadás és eltávolítás
</font>
<br/>nums.<font color="#ADD8E6">add</font>(<font color="#F0E130">1.2</font>);
<br/>nums.<font color="#ADD8E6">add</font>(<font color="#F0E130">-11.3</font>);
<br/>nums.<font color="#ADD8E6">add</font>(<font color="#999900">Math</font>.PI);
<br/>nums.<font color="#ADD8E6">remove</font>(<font color="#F0E130">-11.3</font>); <font color="gray">//a -11.3-at eltávolítja
</font>
<br/>nums.<font color="#ADD8E6">remove</font>(<font color="#F0E130">1</font>); <font color="gray">//az 1-es pozíción lévő elem eltávolítása
</font>
<br/>
<br/><font color="gray">//gyorsan létrehozhatunk egy listát így:
</font>
<br/><font color="#999900">List</font>&lt;<font color="#999900">Double</font>> otherList = <font color="#999900">Arrays</font>.<font color="#ADD8E6">asList</font>(<font color="#F0E130">2.3</font>, <font color="#F0E130">-1.32</font>);
<br/>
<br/><font color="gray">//egész kollekciókat lehet hozzáadni:
</font>
<br/>nums.<font color="#ADD8E6">addAll</font>(otherList);
<br/>
<br/><font color="gray">//elemek elkérése adott pozíciókról
</font>
<br/>nums.<font color="#ADD8E6">get</font>(<font color="#F0E130">0</font>);
<br/><font color="gray">//láncolt listánál az első és utolsó elem is lekérhető
</font>
<br/>nums.<font color="#ADD8E6">getFirst</font>();
<br/>nums.<font color="#ADD8E6">getLast</font>();
<br>
<br><font color="gray">//elem beszúrása az 1-es pozícióra</font>
<br/>nums.<font color="#ADD8E6">set</font>(<font color="#F0E130">1</font>, <font color="#F0E130">3.2</font>);
<br/>
<br/>nums.<font color="#ADD8E6">clear</font>(); <font color="gray">//lista kiürítése
</font>
<br/>
<br/><font color="gray">//megnézi, hogy egy adott elem benne van-e a listában
</font>
<br/>nums.<font color="#ADD8E6">contains</font>(<font color="#999900">Math</font>.PI);
        
    ]]></code>
    <text>
        <![CDATA[
        A metódusok teljes listáját a listák fentebb linkelt hivatalos dokumentációjában találod.
        ]]>
    </text>
    <interactive instruction="Ez a metódus távolítsa el a lista első és utolsó elemét! Egyenlőre ne foglalkozz a '?' szimbólummal.">
        <data><![CDATA[

<font color="#E65100">public</font> <font color="#DF7401">void</font> <font color="#ADD8E6">removeFirstLast</font>(<font color="#999900">List</font>&lt;?> list) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;list.<font color="#ADD8E6">___</font>(<font color="#F0E130">0</font>);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;list.<font color="#ADD8E6">remove</font>(___);
<br/>}

        ]]></data>
        <answer place="0">remove</answer>
        <answer place="1">list.size()-1</answer>
        <answer place="1">list.size() - 1</answer>
        <answer place="1">list.size()- 1</answer>
        <answer place="1">list.size() -1</answer>
    </interactive>
</resources>
