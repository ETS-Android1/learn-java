<?xml version="1.0" encoding="utf-8" standalone="no"?>
<resources>
    <chapterdata>
        <id>352</id>
        <name>Interfész bővítések</name>
    </chapterdata>
    <text>
        <![CDATA[
        A <i>Java 8</i> számos új funkcióval bővítette az <i>interfészeket</i>.
        ]]>
    </text>
    <title text="Interfészek korábban"/>
    <text>
        <![CDATA[
        Ha nem vagy teljesen biztos az interfészekkel kapcsolatos ismereteidben, javaslom, hogy frissítsd fel ezeket az
        '<b>absztrakt osztályok és interfészek</b>' című fejezetetben, amely a '<b>Osztályok</b>' című kurzusban található.
        ]]>
    </text>
    <code><![CDATA[
        
        <font color="gray">//interfész a konzolra kiírható osztályok számára
</font>
<br/><font color="#E65100">public interface</font> <font color="#999900">Printable</font> {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#DF7401">void</font> <font color="#ADD8E6">print</font>(); <font color="gray">//prints the object to the console</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#DF7401">int</font> <font color="#ADD8E6">printedLines</font>(); <font color="gray">//returns how many lines the printed object uses</font>
<br/>
<br/>}
        
    ]]></code>
    <text>
        <![CDATA[
        A <i>Java 8</i> előtt egy interfész egy olyan osztály volt, amely csak <b>nyilvános, absztrakt metódusokkal</b> 
		rendelkezett (nincs implementáció, csak deklaráció). Lényegében egy teljesen absztrakt osztály volt.
        ]]>
    </text>
    <title text="Alap metódus implementációk"/>
    <text>
        <![CDATA[
        A <i>Java 8</i> bevezette az <b>alap metódus implementációkat</b> az interfészek számára. Ezeknek a metódusoknak 
		<b>vannak implementációik</b>, annak ellenére, hogy egy interfészen belül vannak. Ezeket a <b>default</b> 
		kulcsszóval kell jelölni. Ezzel egy interfész már nem biztos, hogy teljesen absztrakt.
        ]]>
    </text>
    <boxed title="Miért kellett ez a változás?">
        <![CDATA[
        Egy interfész lényege, hogy arra kényszeríti az implementáló osztályt, hogy az absztrakt metódusait implementálja. De 
		<i>default</i> metódusokkal ez már nem igaz, az implementáló osztálynak nem kell semmit sem tennie egy <i>default</i> 
		metódussal. Tehát, mi értelme az ilyen metódusok engedélyezésének?
        ]]>
    </boxed>
    <text>
        <![CDATA[
        A válasz a meglévő interfészek új metódusokkal történő bővítése. Képzeljük el, hogy a <i>Printable</i>
        interfészt egy népszerű, általad fejlesztett <i>Java</i> könyvtárban használják. Szeretnél egy új metódust 
		hozzáadni ehhez az interfészhez:
        ]]>
    </text>
    <code><![CDATA[
        
<font color="#E65100">public</font> <font color="#E65100">interface</font> <font color="#999900">Printable</font> {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//prints the object to the console
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#DF7401">void</font> <font color="#ADD8E6">print</font>();
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//returns the number of lines used for printing
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#DF7401">int</font> <font color="#ADD8E6">printedLines</font>();
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//new method: print to any PrintStream
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#DF7401">void</font> <font color="#ADD8E6">print</font>(java.<font color="#ADD8E6">io</font>.<font color="#999900">PrintStream</font> stream);
<br/>}
        
    ]]></code>
    <text>
        <![CDATA[
        Ez egy nagyszerű kiegészítője az interfésznek. A <i>Printable</i> objektumok mostantól bármilyen <i>PrintStream</i>-be 
		írhatók, nem csak a <i>System.out</i>-ra, azaz a konzolra. Van azonban egy nagy probléma! Mindenki, aki a 
		könyvtáradat használja, mostantól egy <b>fordítási hibát</b> kap, mert az ő osztályaik <b>még nem implementálják 
		ezt az új metódust</b>!
        ]]>
    </text>
    <code><![CDATA[
        
        <font color="#E65100">public</font> <font color="#E65100">interface</font> <font color="#999900">Printable</font> {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//prints the object
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#DF7401">void</font> <font color="#ADD8E6">print</font>();
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//returns the number of lines used for printing
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#DF7401">int</font> <font color="#ADD8E6">printedLines</font>();
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//new method: print to any PrintStream
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">default</font> <font color="#DF7401">void</font> <font color="#ADD8E6">print</font>(java.<font color="#ADD8E6">io</font>.<font color="#999900">PrintStream</font> stream) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">/*
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp; * Without a better alternative, we will use
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp; * toString to print the object to the stream.
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp; */</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;stream.<font color="#ADD8E6">print</font>(<font color="#E65100">this</font>.<font color="#ADD8E6">toString</font>());
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>}
        
    ]]></code>
    <text>
        <![CDATA[
        Azzal, hogy a metódusnak alap implementációt adunk, az interfészt használó jelenlegi kód továbbra is működni fog (
		méghozá az alap implementációt fogja használni). Ha az alapértelmezett implementáció
        nem elég valakinek, szabadon felülírhatja ezt a metódust!
        ]]>
    </text>
    <interactive instruction="Egészítsd ki az interfészt!">
        <data><![CDATA[
            
        <font color="#E65100">public</font> ___ <font color="#999900">MyInterface</font> {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#DF7401">int</font> <font color="#ADD8E6">abstractMethod</font>();
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;___ <font color="#DF7401">void</font> <font color="#ADD8E6">methodWithImplementation</font>() {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(<font color="#2E8B57">"<font color="</font>#999900">Implementation</font>");
}
<br/>}
            
        ]]></data>
        <answer place="0">interface</answer>
        <answer place="1">default</answer>
    </interactive>
    <text>
        <![CDATA[
        Olyan is előfordulhat, hogy nem kell az interfész megvalósítóit bizonyos metódusokkal "zavarni", mert azok 
		olyan egyszerűek. Vegyük például ezt az interfészt:
        ]]>
    </text>
    <code><![CDATA[
        
        <font color="#E65100">interface</font> <font color="#999900">Comparable</font>&lt;<font color="#999900">T</font>> {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">/*
<br/>	&nbsp;&nbsp;&nbsp;&nbsp; * 0-t ad vissza ha egyenlőek, 1-et ha a jelenlegi
<br/>	&nbsp;&nbsp;&nbsp;&nbsp; * objektum nagyobb, -1-et ha a másik nagyobb.
<br/>	&nbsp;&nbsp;&nbsp;&nbsp; */</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#DF7401">int</font> <font color="#ADD8E6">compare</font>(<font color="#999900">T</font> other);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//ellenőrzi, hogy ez nagyobb-e
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#DF7401">boolean</font> <font color="#ADD8E6">greaterThen</font>(<font color="#999900">T</font> other);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//ellenőrzi, hogy ez kisebb-e
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#DF7401">boolean</font> <font color="#ADD8E6">smallerThen</font>(<font color="#999900">T</font> other);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//ellenőrzi, hogy egyenlőek-e
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#DF7401">boolean</font> <font color="#ADD8E6">equalsTo</font>(<font color="#999900">T</font> other);
<br/>}
        
    ]]></code>
    <text>
        <![CDATA[
        Vegyük észre, hogy az utolsó 3 metódushoz csak az első, a <i>compare</i> metódus segítségével már tudunk alap 
		implementációt adni. A <i>default</i> kulcsszóval ezt megtehetjük:
        ]]>
    </text>
    <code><![CDATA[
        
        <font color="#E65100">interface</font> <font color="#999900">Comparable</font>&lt;<font color="#999900">T</font>> {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">/*
<br/>	&nbsp;&nbsp;&nbsp;&nbsp; * 0-t ad vissza ha egyenlőek, 1-et ha a jelenlegi
<br/>	&nbsp;&nbsp;&nbsp;&nbsp; * objektum nagyobb, -1-et ha a másik nagyobb.
<br/>	&nbsp;&nbsp;&nbsp;&nbsp; */</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#DF7401">int</font> <font color="#ADD8E6">compare</font>(<font color="#999900">T</font> other);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//ellenőrzi, hogy ez nagyobb-e
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">default</font> <font color="#DF7401">boolean</font> <font color="#ADD8E6">greaterThen</font>(<font color="#999900">T</font> other) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">return</font> <font color="#E65100">this</font>.<font color="#ADD8E6">compare</font>(other) > <font color="#F0E130">0</font>;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//ellenőrzi, hogy ez kisebb-e
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">default</font> <font color="#DF7401">boolean</font> <font color="#ADD8E6">smallerThen</font>(<font color="#999900">T</font> other) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">return</font> <font color="#E65100">this</font>.<font color="#ADD8E6">compare</font>(other) &lt; <font color="#F0E130">0</font>;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//ellenőrzi, hogy egyenlőek-e
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">default</font> <font color="#DF7401">boolean</font> <font color="#ADD8E6">equalsTo</font>(<font color="#999900">T</font> other) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">return</font> <font color="#E65100">this</font>.<font color="#ADD8E6">compare</font>(other) == <font color="#F0E130">0</font>;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>}
        
    ]]></code>
	<text>
		<![CDATA[
		Aki most megvalósítja ezt az interfészt, annak elég a lényeggel, a <i>compare</i> metódussal foglalkoznia, 
		a többi metódushoz igénybe veheti az alap implementációt.
		]]>
	</text>
    <interactive instruction="Egészítsd ki ezt az interfészt!">
        <data><![CDATA[
            
<font color="#E65100">public</font> <font color="#E65100">interface</font> <font color="#999900">Summable</font> {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//performs the summing
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;___ <font color="#ADD8E6">sum</font>();
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//gets the size
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#DF7401">int</font> <font color="#ADD8E6">size</font>();
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//calculates average
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;___ <font color="#DF7401">double</font> <font color="#ADD8E6">average</font>() {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">return</font> <font color="#ADD8E6">___</font>() / <font color="#ADD8E6">size</font>();
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>}
            
        ]]></data>
        <answer place="0">double</answer>
        <answer place="1">default</answer>
        <answer place="2">sum</answer>
    </interactive>
    <title text="Statikus metódusok"/>
    <text>
        <![CDATA[
        Ez egy nagyon egyszerű változás, a <i>Java 8</i> lehetővé teszi a statikus metódusok használatát az interfészekben. 
		Ugyanúgy viselkednek, mintha egy osztály statikus metódusai lennének. Nagyszerűek az interfészhez kapcsolódó 
		segédmetódusokhoz.
        ]]>
    </text>
    <title text="Funkcionális interfészek"/>
    <text>
        <![CDATA[
        A <i>Java 8</i> bevezette a <b>funkcionális interfészek</b> fogalmát. A funkcionális interfész olyan interfész, 
		amely <b>pontosan egy absztrakt metódussal</b> rendelkezik (lehet más statikus vagy alapértelmezett metódusa is).
        ]]>
    </text>
    <boxed title="Jelölés">
        <![CDATA[
        Az <b>@FunctionalInterface</b> annotáció hozzáadásra került. A programozók ezt elhelyezhetik a funkcionális 
		interfészen amit írnak (ez nem kötelező).
        <br>
        Bár nem szükséges, de ajánlott ennek az annotációnak a használata. Ha véletlenül több mint egy
        absztrakt metódust írunk egy ezzel jelölt interfészhez, akkor a fordító hibát fog generálni!
        ]]>
    </boxed>
    <text>
        <![CDATA[
        Itt van például egy fontos funkcionális interfész a szabványos könyvtárból (ez egy egyszerűsített változat):
        ]]>
    </text>
    <code><![CDATA[
        
<font color="red">@FunctionalInterface</font>
<br/><font color="#E65100">interface</font> <font color="#999900">Predicate</font>&lt;<font color="#999900">T</font>> {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//teszteli a predikátumot az adott objektumon
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#DF7401">boolean</font> <font color="#ADD8E6">test</font>(<font color="#999900">T</font> t);
<br/>}
        
    ]]></code>
	 <text>
        <![CDATA[
        Ez az interfész definiálja, hogy hogyan kell kinéznie egy osztálynak, ami képes valamilyen feltétel (predikátum) 
		eldöntésére egy objektummal kapcsolatban. Látható, hogy generikus is, az objektum típusa tetszőleges lehet.
        ]]>
    </text>
    <text>
        <![CDATA[
        A szabványos könyvtár számos funkcionális interfészt tartalmaz. Lásd őket a 
        <a href="https://docs.oracle.com/javase/8/docs/api/java/util/function/package-summary.html">java.util.function</a> csomagban.
        ]]>
    </text>
    <interactive instruction="Egészítsd ki a funkcionális interfészt! Legyen T a függvény paramétereinek típusa, S pedig a visszatérési érték típusa.">
        <data><![CDATA[
            
<font color="#E65100">public interface</font> <font color="#999900">BinaryFunction</font>&lt;<font color="#999900">T</font>, ___> {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">S</font> <font color="#ADD8E6">callFunction</font>(___ t1, <font color="#999900">T</font> t2);
<br/>}
            
        ]]></data>
        <answer place="0">S</answer>
        <answer place="1">T</answer>
    </interactive>
    <text>
        <![CDATA[
		A funkcionális interfészek önmagukban nem annyira hasznosak. A következő fejezetben azonban megismerkedünk egy 
		koncepcióval amely nagymértékben támaszkodik a funkcionális interfészekre, és nagyon hasznos.
        ]]>
    </text>
	<title text="Anonim osztályok"/>
	<text>
        <![CDATA[
        A <i>Java</i> lehetőséget biztosít egy osztály gyors deklarálására és használatára. Erre szükségünk lesz a 
		következő fejezet megértéséhez. Az ilyen osztályokat csak egyszer lehet használni, mert
        nem lesz nevük, hogy később hivatkozhassunk rájuk (innen az anonim kifejezés). A szintaxist a
        alábbi példák mutatják, de ha további magyarázatra van szükséged, bőven találsz 
		<a href="https://docs.oracle.com/javase/tutorial/java/javaOO/anonymousclasses.html">itt</a>.
        ]]>
    </text>
	<code><![CDATA[
        
<font color="#E65100">class</font> <font color="#999900">GreetRunnable</font> <font color="#E65100">implements</font> <font color="#999900">Runnable</font> {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//felülírjuk a run metódust</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="red">@Override</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#DF7401">void</font> <font color="#ADD8E6">run</font>() {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(<font color="#2E8B57">"Hello from a thread!"</font>);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>}
        
    ]]></code>
	<text>
		<![CDATA[
		Ez a példa azt mutatja, hogyan adhatunk implementációt a <i>Runnable</i> interfészhez, egy olyan osztály 
		létrehozásával, amelyik megvalósítja azt. Néha azonban csak egyszer van szükségünk erre az implementációra, 
		és ilyen esetekre használhatjuk az anonim osztályt, amely pontosan ott hozza létre az implementációt, 
		ahol szükségünk van rá:
        ]]>
	</text>
    <code><![CDATA[
        
<font color="gray">//objektum létrehozása egy anonim Runnable segítségével</font>
<br/><font color="#999900">Thread</font> t1 = <font color="#E65100">new</font> <font color="#999900">Thread</font>(<font color="#E65100">new</font> <font color="#999900">Runnable</font>() {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="red">@Override</font> <font color="gray">//override the run method here</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#DF7401">void</font> <font color="#ADD8E6">run</font>() {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(<font color="#2E8B57">"Hello from an anonymous runnable!"</font>);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>});
        
    ]]></code>
    <text>
        <![CDATA[
        Ez ugyanazt teszi, mint a normál implementáció, de nem kellett egy teljes, külön osztályt deklarálnunk. 
		Ha csak egyszer fogod használni az implementációt, akkor ez az előnyös megoldás. Ha újrafelhasználást tervezel, 
		írj egy normál osztályt ahelyett, hogy az anonim deklarációt mindenhova elhelyeznéd.
        ]]>
    </text>
</resources>
