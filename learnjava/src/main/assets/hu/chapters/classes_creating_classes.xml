<?xml version="1.0" encoding="utf-8" standalone="no"?>
<resources>
    <chapterdata>
        <id>151</id>
        <name>Osztályok létrehozása</name>
    </chapterdata>
    <text>
        <![CDATA[
        Az osztályokról már sokszor esett szó az előző fejezetekben. Itt az ideje megtanulni, hogy mik is ezek,
        és hogyan hozhatók létre.
        ]]>
    </text>
    <boxed title="OOP">
        <![CDATA[
        Az <b>objektum-orinetált programozásnak (OOP)</b> 3 alapelve van. Ezek a következők: <b>egységbe zárás, öröklődés és
        polimorfizmus</b>. A következő fejezetekben elmagyarázom, hogy mit jelentenek ezek a kifejezések, és hogyan valósulnak meg.
        Java-ban.
        ]]>
    </boxed>
    <text>
        <![CDATA[
        Az <b>osztály</b> egy absztrakt adattípus, több mint egy primitív típus. Definiálhatunk
        viselkedést hozzá metódusok létrehozásával.
        <p>
        Az osztály meghatározza az adattípus struktúráját. Úgy gondolhatunk rá, mint egy tervrajzra.
        <br><br>
        Az <b>objektum</b> az, amit akkor kapunk, ha egy osztályt <b>példányosítunk</b>. Gondulhatunk rá így, mint a 
		tervrajz (osztály) segítségével elkészített tárgy.
		Ezt egy példaprojekt segítségével mutatom be:
        ]]>
    </text>
    <boxed title="Példaprojekt">
        <![CDATA[
        Hozzunk létre egy projektet, és adjunk hozzá egy osztályt, amely rendelkezik a main metódussal (ezt eddig is csináltuk). Ezután,
        adjunk hozzá egy másik osztályt ugyanabban a csomagban. Ez az absztrakt adattípus a macskákat fogja reprezentálni.
        Nevezzük el az osztályt <b>Cat</b>-nek.
        <br><br>
        A részleteket lásd az alábbi kódmintákat és utasításokat!
        ]]>
    </boxed>
    <text>
        <![CDATA[
        A <b>Main</b> osztályodnak valahogy így kell kinéznie:
        ]]>
    </text>
    <code><![CDATA[
        
<font color="#E65100">package</font> oop;
<br/>
<br/><font color="#E65100">public class</font> <font color="#999900">Main</font> {
<br/>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public static</font> <font color="#DF7401">void</font> <font color="#ADD8E6">main</font>(<font color="#999900">String</font>[] args) {
<br/>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
<br/>}
<br/>
        
    ]]></code>
    <text>
        <![CDATA[
        Hozzuk létre a <b>Cat</b> osztályt. Az Eclipse-ben ezt úgy lehet megtenni, hogy jobb egérgombbal kattintunk a csomagunkra, majd az 
        <b>Új --> osztály</b> menüket választjuk. Ez létrehoz egy <i>Cat.java</i> nevű fájlt, és megírja nekünk az osztály vázát:
        ]]>
    </text>
    <code><![CDATA[
        
<font color="#E65100">package</font> oop;
<br/>
<br/><font color="#E65100">public class</font> <font color="#999900">Cat</font> {
<br/>
<br/>}
        
    ]]></code>
    <text>
        <![CDATA[
        Ne feledjük, hogy most egy absztrakt típust szeretnénk létrehozni! Kódoljuk a következő információt az adattípusunkba (
        ezeket az osztály <b>tagjainak</b> nevezzük):
        ]]>
    </text>
    <list>
        <![CDATA[
        <ul>
        <li><u>Név</u>: egy <i>String</i>-ben van tárolva.</li>
        <li><u>Kor</u>: egy <i>int</i>-ben van tárolva.</li>
        <li><u>Nem</u>: egy <i>boolean</i>-t használhatunk, mivel minden macska vagy hím vagy nőstény.</li>
        </ul>
        ]]>
    </list>
    <text>
        <![CDATA[
        Itt van az osztályunk, miután felvettük ezeket a tagokat. Amint láthatod, ez olyan, mint a helyi változók deklarálása,
        de ebben az esetben ezeket <b>a metódusokon kívül, de az osztályon belül</b> írjuk.
        ]]>
    </text>
    <code><![CDATA[
        
        <font color="#E65100">package</font> oop;
<br/>
<br/><font color="#E65100">public class</font> <font color="#999900">Cat</font> {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">String</font> name;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#DF7401">int</font> age;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//ha ez igaz, akkor hím, egyébként nőstény
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#DF7401">boolean</font> isMale;
<br/>
<br/>}
        
    ]]></code>
    <text>
        <![CDATA[
        Adjunk hozzá 'viselkedést' is ehhez az osztályhoz metódusok segítségével. Az egyik metódus kiírja a
        a macska tulajdonságait a konzolra, a másik pedig kiszámítja és visszaadja a macska születési évét.
        ]]>
    </text>
    <code><![CDATA[
        
        <font color="#E65100">package</font> oop;
<br/>
<br/><font color="#E65100">import</font> java.<font color="#ADD8E6">time</font>.<font color="#999900">Year</font>;
<br/>
<br/><font color="#E65100">public class</font> <font color="#999900">Cat</font> {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">String</font> name;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#DF7401">int</font> age;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//ha ez igaz, akkor hím, egyébként nőstény
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#DF7401">boolean</font> isMale;
<br/>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#DF7401">int</font> <font color="#ADD8E6">getBirthYear</font>() {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#DF7401">int</font> currentYear = <font color="#999900">Year</font>.<font color="#ADD8E6">now</font>().<font color="#ADD8E6">getValue</font>();
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">return</font> currentYear - age;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#DF7401">void</font> <font color="#ADD8E6">printCatProperties</font>() {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(<font color="#2E8B57">"Név: "</font> + name);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(<font color="#2E8B57">"Kor: "</font> + age);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">if</font>(isMale) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(<font color="#2E8B57">"Ez a macska hím."</font>);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;} <font color="#E65100">else</font> {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(<font color="#2E8B57">"Ez a macska nőstény."</font>);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>}
        
    ]]></code>
    <boxed title="Jelenlegi év megszerzése">
        <![CDATA[
        Akik az előző tanfolyam feladatait elvégezték, azok ezt már ismerik, de akik nem, azoknak itt van:
        <br><br>
        A <i>Year.now().getValue()</i> az aktuális évet adja vissza egész számként. Ez egy jobb módszer, mint az évszám beleégetése a
        kódunkba.
        ]]>
    </boxed>
    <text>
        <![CDATA[
        Most, hogy megvan a macskák "tervrajza" (osztálya), létrehozhatunk tényleges macska <b>objektumokat</b> a programunkban! Ehhez a
        a főmetódust használom:
        ]]>
    </text>
    <code><![CDATA[
        
        <font color="#E65100">package</font> oop;
<br/>
<br/><font color="#E65100">public class</font> <font color="#999900">Main</font> {
<br/>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public static</font> <font color="#DF7401">void</font> <font color="#ADD8E6">main</font>(<font color="#999900">String</font>[] args) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//objektum létrehozása, és az adatainak megadása
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">Cat</font> cat1 = <font color="#E65100">new</font> <font color="#999900">Cat</font>();
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;cat1.<font color="#ADD8E6">name</font> = <font color="#2E8B57">"Cirmi"</font>;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;cat1.<font color="#ADD8E6">age</font> = <font color="#F0E130">13</font>;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;cat1.<font color="#ADD8E6">isMale</font> = true;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//másik objektum létrehozása, és az adatainak megadása
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">Cat</font> cat2 = <font color="#E65100">new</font> <font color="#999900">Cat</font>();
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;cat2.<font color="#ADD8E6">name</font> = <font color="#2E8B57">"Murci"</font>;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;cat2.<font color="#ADD8E6">age</font> = <font color="#F0E130">11</font>;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;cat2.<font color="#ADD8E6">isMale</font> = true;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//információ kiírása a cat1 objektumról
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;cat1.<font color="#ADD8E6">printCatProperties</font>();
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//cat2 objektum születési évének számolása
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>("\nCat2, " + cat2.<font color="#ADD8E6">name</font> + <font color="#2E8B57">", ekkor született: "</font> + cat2.<font color="#ADD8E6">getBirthYear</font>());
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>}
        
    ]]></code>
    <text>
        <![CDATA[
        Vegyük észre, hogy az objektumok létrehozása a <b>new</b> kulcsszó használatával történik.
        ]]>
    </text>
    <interactive instruction="Egészítsd ki az osztály deklarációt!">
        <data><![CDATA[

<font color="#E65100">public</font> ___ <font color="#999900">Activity</font> {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#DF7401">int</font> id = <font color="#F0E130">0</font>;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;___ activityName = <font color="#2E8B57">"default_name"</font>;
<br/>}

        ]]></data>
        <answer place="0">class</answer>
        <answer place="1">String</answer>
    </interactive>
    <boxed title="Hivatkozás metódusokra és tagokra">
        <![CDATA[
        Ahogy a példában is látható, egy objektum tagváltozóira és metódusaira való hivatkozáshoz a
        <b>pont operátor</b> használható.
        ]]>
    </boxed>
    <advanced title="Alap értékek">
        <![CDATA[
        Az objektum létrehozásakor az összes tag <b>alapértelmezett értékre</b> kerül beállításra. Például, ha nem adtuk meg a
        nevet a macskának, akkor az <i>null</i> lenne. Ha nem inicializálnánk a kort, akkor az 0 lenne.
        ]]>
    </advanced>
    <title text="Objektumok azonossága"/>
    <text>
        <![CDATA[
        Minden objektumnak van <b>identitása</b>. Ez azt jelenti, ha ugyanabba az osztályba tartoznak, és minden tagjuk azonos,
        akkor sem azonosak!
        <br><br>
        Ez a kódminta ezt szemlélteti:
        ]]>
    </text>
    <code><![CDATA[
        
        <font color="gray">//objektum létrehozása, és az adatainak megadása
</font>
<br/><font color="#999900">Cat</font> cat1 = <font color="#E65100">new</font> <font color="#999900">Cat</font>();
<br/>cat1.<font color="#ADD8E6">name</font> = <font color="#2E8B57"><font color="#2E8B57">"Cirmi"</font></font>;
<br/>cat1.<font color="#ADD8E6">age</font> = <font color="#F0E130">13</font>;
<br/>cat1.<font color="#ADD8E6">isMale</font> = true;
<br/>
<br/><font color="gray">//másik objektum létrehozása, és AZONOS adatok megadása
</font>
<br/><font color="#999900">Cat</font> cat2 = <font color="#E65100">new</font> <font color="#999900">Cat</font>();
<br/>cat2.<font color="#ADD8E6">name</font> = <font color="#2E8B57"><font color="#2E8B57">"Cirmi"</font></font>;
<br/>cat2.<font color="#ADD8E6">age</font> = <font color="#F0E130">13</font>;
<br/>cat2.<font color="#ADD8E6">isMale</font> = true;
<br/>
<br/><font color="#E65100">if</font>(cat1 == cat2) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(<font color="#2E8B57">"Ez a két objektum azonos!"</font>);
<br/>} <font color="#E65100">else</font> {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//ez fog kiíródni
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(<font color="#2E8B57">"Ez a két objektum NEM azonos!"</font>);
<br/>}
        
    ]]></code>
    <text>
        <![CDATA[
        Ez az esetek többségében nem túl intuitív, szeretnénk, ha lenne módunk az objektumaink közötti "egyenlőség" ellenőrzésére. Mint ez a példa
        mutatja, a <b>==</b> operátor nem fog működni. A Java megoldást kínál, és ezt <b>equals</b> metódusnak hívják. Bővebben erről
        amikor már tanultunk az <i>öröklésről és a metódusok felülírásáról</i>.
        ]]>
    </text>
    <title text="A this kulcsszó"/>
    <text>
        <![CDATA[
        A <b>this</b> kulcsszó az osztály metódusaiban az aktuális objektumra való hivatkozásra szolgál. Ha ez zavaróan hangzik,
        ne aggódj. Itt van néhány példa a használatára, ami tisztázza a helyzetet:
        <br><br>
        Tegyük fel, hogy a <i>Cat</i> osztályunkhoz szükségünk van egy olyan metódusra, amely eggyel növeli a macska életkorát, majd visszaadja a
        teljes objektumot.
        ]]>
    </text>
    <code><![CDATA[
        
        <font color="#999900">Cat</font> <font color="#ADD8E6">incrementAge</font>() {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;age = age + <font color="#F0E130">1</font>;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">return this</font>;
<br/>}
        
    ]]></code>
    <text>
        <![CDATA[
        A <b>this</b> kulcsszó nélkül nem tudnánk hivatkozni az aktuális macska objektumra (arra, aminek a metódusa éppen meghívódik)!
        <br><br>
        A következő példához szükségünk van egy olyan metódusra, amely frissíti a macska nevét. Az egyszerűség kedvéért a
        paraméterét is <i>name</i>-nek hívjuk, akárcsak a tagváltozót.
        <p>
        A <i>this</i> most a <i>name</i> változó 'kétértelműségének' megszüntetésére szolgál (honnan tudjuk, hogy a paraméterre, vagy a 
		tagváltozóra gondolunk). A <i>this</i> nélkül csak a paraméterre tudunk hivatkozni.
        ]]>
    </text>
    <code><![CDATA[
        
<font color="#DF7401">void</font> <font color="#ADD8E6">setName</font>(<font color="#999900">String</font> name) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">/*
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;Amikor itt azt írjuk, hogy 'name', az a paramétert fogja jelenteni, nem pedig
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;az adattagot! Az adattagra való hivatkozáshoz a this kulcsszó kell.
<br/>	&nbsp;&nbsp;&nbsp;&nbsp; */</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">this</font>.<font color="#ADD8E6">name</font> = name;
<br/>}
        
    ]]></code>
    <text>
        <![CDATA[
        Az ilyen típusú metódusokat, amelyek a tagok értékeit frissítik, <b>setter</b>-eknek nevezzük. Láthatjuk, hogy a metódus elnevezése
        ezt tükrözi (<i>set</i>).
        ]]>
    </text>
	<title text="A null"/>
	<text>
		<![CDATA[
        A <i>null</i> egy speciális érték, amit minden objektum alapértéke. Fontos, hogy inicializáljuk az objektumokat, 
		különben <i>null</i> marad az értékük. Az ilyen objektumoknak nem lehet hivatkozni a metódusait vagy tagjait, 
		mert <i>NullPointerException</i> keletkezik! 
        ]]>
	</text>
    <code>
        <![CDATA[
         <font color="gray">//objektum létrehozása, de nincs inicializálva, ezért NULL</font>
         <br/><font color="#999900">String</font> text;
         <br/><font color="gray">//a null-nak próbáljuk meghívni egy metódusát, ami NullPointerException-t okoz</font>
         <br/><font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(text.<font color="#ADD8E6">length</font>());
        ]]>
    </code>

    <!-- mention OOP and concepts: details in chapter 152, 153
    class: blueprint, object: can be built using blueprint
    identity: usage of equals method
    also mention 'this' keyword' -->
</resources>
