<?xml version="1.0" encoding="utf-8" standalone="no"?>
<resources>
    <chapterdata>
        <id>302</id>
        <name>Generikus kód írása</name>
    </chapterdata>

    <text>
        <![CDATA[
        Most pedig nézzük meg végre azt a generikus <i>Printer</i> osztályt. A szintaxist ez a kódminta mutatja:
        ]]>
    </text>
    <code><![CDATA[
        
        <font color="#E65100">public</font> <font color="#E65100">class</font> <font color="#999900">Printer</font>&lt;<font color="#999900">T</font>> {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">private</font> <font color="#999900">T</font> object;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#999900">Printer</font>(<font color="#999900">T</font> object) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">this</font>.<font color="#ADD8E6">object</font> = object;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#DF7401">void</font> <font color="#ADD8E6">print</font>() {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(object.<font color="#ADD8E6">toString</font>());
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#999900">T</font> <font color="#ADD8E6">getPrintObject</font>() {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">return</font> object;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>}
<br/>
        
    ]]></code>
    <text>
        <![CDATA[
        A legfontosabb rész a <i>T</i>, a <i>&lt;></i> szimbólumok között. Ez egy <b>típusparamétert</b> fog definiálni, 
		és ez a típus később felhasználható az osztály deklaráción belül. Például használjuk, mint:
        ]]>
    </text>
    <list>
        <![CDATA[
        <ul>
        <li>Egy tagváltozó.</li>
        <li>Egy paraméter (lásd a konstruktorban).</li>
        <li>Visszatérési érték (lásd a getter metódusban).</li>
        </ul>
        ]]>
    </list>
    <boxed title="Elnevezési szokás">
        <![CDATA[
        Bármi, ami normál azonosítóként használható, használható típusparaméter névként is. Azonban a konvenció az, 
        hogy nagybetűket használjunk! Valamilyen oknál fogva a <i>T</i> és <i>E</i> különösen népszerű.
        ]]>
    </boxed>
	<text>
        <![CDATA[
        <b>Nem</b> használhatjuk a típusparamétert új objektumok, vagy tömbök létrehozására! Például nem lehet 
		olyanokat a <i>T</i> típusparaméterből, hogy:
		<br><br>
		<i>T t = new T();</i><br>
		<i>T[] array = new T[5];</i>
        ]]>
    </text>
    <text>
        <![CDATA[
        A fenti, generikus osztályból így lehet példányokat létrehozni:
        ]]>
    </text>
    <code><![CDATA[
        
        <font color="gray">//A printer for strings
</font>
<br/><font color="#999900">Printer</font>&lt;<font color="#999900">String</font>> p1 = <font color="#E65100">new</font> <font color="#999900">Printer</font>&lt;>(<font color="#2E8B57">"text"</font>);
<br/><font color="gray">//A printer for doubles
</font>
<br/><font color="#999900">Printer</font>&lt;<font color="#999900">Double</font>> p2 = <font color="#E65100">new</font> <font color="#999900">Printer</font>&lt;>(<font color="#F0E130">3.14</font>);
<br/><font color="gray">//Printer for objects, will generate warnings
</font>
<br/><font color="#999900">Printer</font> p3 = <font color="#E65100">new</font> <font color="#999900">Printer</font>(<font color="#E65100">new</font> <font color="#999900">Object</font>());
<br/><font color="gray">//Proper way for object printer
</font>
<br/><font color="#999900">Printer</font>&lt;<font color="#999900">Object</font>> p4 = <font color="#E65100">new</font> <font color="#999900">Printer</font>&lt;>(<font color="#E65100">new</font> <font color="#999900">Object</font>());
        
    ]]></code>
    <text>
        <![CDATA[
        Itt nincs sok újdonság, már láttuk korábban, hogyan kell generikus osztályokat létrehozni, például az adatstruktúrák 
		kurzusban. Érdekes a 3. utasítás, ami szintén működik, annak ellenére, hogy nincs típusparaméter megadva.
        ]]>
    </text>
    <boxed title="Típusparaméter nélkül">
        <![CDATA[
        Az ok, amiért típusparaméter nélkül is működik a kód, az visszafelé kompatibilitás. A generikusság előtt a 
		Java osztályok az <i>Object</i>-et használták, mint például az előző fejezetben szereplő <i>Printer</i> osztály. 
		A generikus kód bevezetésekor a legtöbbet átírták.
        <p>
        A típusparaméterek nélküli deklarációk engedélyezésével a régi, nem generikus kód továbbra is lefordítható.
        ]]>
    </boxed>
    <text>
        <![CDATA[
        Ez a kód most már kivétel biztos. Ha megpróbálunk valamilyen érvénytelen típuskonverziót végezni, hibát kapunk 
		a fordításkor (nem futásidőben).
        ]]>
    </text>
    <code><![CDATA[
        
        <font color="gray">//A printer for strings
</font>
<br/><font color="#999900">Printer</font>&lt;<font color="#999900">String</font>> p1 = <font color="#E65100">new</font> <font color="#999900">Printer</font>&lt;>(<font color="#2E8B57">"text"</font>);
<br/><font color="gray">//compile time ERROR!!!
</font>
<br/><font color="#DF7401">int</font> number = p1.<font color="#ADD8E6">getPrintObject</font>();
<br/><font color="gray">//also compile time ERROR!!!
</font>
<br/><font color="#DF7401">int</font> number = (<font color="#DF7401">int</font>)p1.<font color="#ADD8E6">getPrintObject</font>();
        
    ]]></code>
    <title text="Több típusparaméter"/>
    <text>
        <![CDATA[
        Bármennyi típusparaméter megengedett egy osztályban. Ez nem meglepő, hiszen ilyen osztályokkal már találkoztunk 
		korábban is, mint például a <i>HashMap</i> szótár (ahol a kulcs és az érték különböző típusú lehet). 
		Íme egy példa, és a deklarálásukhoz szükséges szintaxis:
        ]]>
    </text>
    <code><![CDATA[
        
<font color="#E65100">public</font> <font color="#E65100">class</font> <font color="#999900">Pair</font>&lt;<font color="#999900">S</font>, <font color="#999900">T</font>> {
<br/>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">private</font> <font color="#999900">S</font> s;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">private</font> <font color="#999900">T</font> t;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#999900">Pair</font>(<font color="#999900">S</font> s, <font color="#999900">T</font> t) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">this</font>.<font color="#ADD8E6">t</font> = t;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">this</font>.<font color="#ADD8E6">s</font> = s;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//other methods here...
</font>
<br/>}
        
    ]]></code>
	<text>
		<![CDATA[
        A fenti osztály egy szimpla "pár", ami két objektumot párba tud állítani. A generikusság lehetővé teszi, hogy 
		ez a két objektum bármilyen típusú lehessen.
        ]]>
	</text>
    <interactive instruction="Egészítsd ki a generikus osztályt!">
        <data><![CDATA[

<font color="#E65100">class</font> <font color="#999900">Vector</font>___ {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">private</font> <font color="#999900">T</font>[] elements;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#999900">Vector</font>(___ elements) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">this</font>.<font color="#ADD8E6">elements</font> = elements;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> ___ <font color="#ADD8E6">getElement</font>(<font color="#DF7401">int</font> index) <font color="#E65100">throws</font> <font color="#999900">ArrayIndexOutOfBoundsException</font> {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">return</font> elements[index];
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>}

        ]]></data>
        <answer place="0"><![CDATA[<T>]]></answer>
        <answer place="1">T[]</answer>
        <answer place="2">T</answer>
    </interactive>
    <title text="Generikus metódusok"/>
    <text>
        <![CDATA[
        Az generikus metódusok deklarálása is megengedett. Ez az olyan osztályok miatt van így, amelyek nem példányosíthatók, 
		mint például az absztrakt osztályok. Ezek sem maradnak ki a generikus kód előnyeiből.
        ]]>
    </text>
    <code><![CDATA[
        
        <font color="#E65100">public abstract</font> <font color="#E65100">class</font> <font color="#999900">Utility</font> {
<br/>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#E65100">static</font> &lt;<font color="#999900">T</font>> <font color="#DF7401">void</font> <font color="#ADD8E6">print</font>(<font color="#999900">T</font> object) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(object.<font color="#ADD8E6">toString</font>());
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>}
        
    ]]></code>
    <text>
        <![CDATA[
        A metódus típusparamétereit a visszatérési érték előtt kell megadni. Ezután az itt megadott a típusok
        használhatók a metódus visszatérési értékeként vagy paramétereiként (de csak ehhez a metódushoz).
        <br><br>
        Az ilyen metódust ugyanúgy használjuk, mint bármelyik hagyományos metódust:
        ]]>
    </text>
    <code>
	<![CDATA[
        
        <font color="#999900">String</font> text = <font color="#2E8B57">"Hello"</font>;
<br/><font color="#999900">Utility</font>.<font color="#ADD8E6">print</font>(text);
        
    ]]>
	</code>
    <title text="Generikus interfészek"/>
    <text>
        <![CDATA[
        Az interfészek is lehetnek generikusak. Ez nem meglepő, mivel az interfészek nem mások, mint teljesen absztrakt 
		osztályok, így van értelme, hogy az interfészek is támogassák a generikusságot. Erre már több példát is láttunk:
        ]]>
    </text>
    <list>
        <![CDATA[
        <ul>
        <li><b>java.lang.Comparable</b>: A típusparaméter az összehasonlítandó objektumok típusa.</li>
        <li>Minden interfész a kollekciók közül (<i>List, Map, Set</i>, ...). Ezek típusparamétere a kollekcióban tárolt elemek típusa.</li>
        </ul>
        ]]>
    </list>
    <advanced title="Primitívek">
        <![CDATA[
        Primitívek nem engedélyezettek típusparaméterként (ezt már az adatszerkezetek kurzuson is tárgyaltuk). Ez 
        azonban nem probléma, mert a wrapper osztályok miatt a primitívek is zökkenőmentesen "használhatók".
        Csak ügyeljünk arra, hogy a wrapper osztályokat használjuk a generikus osztályok példányosításakor.
        ]]>
    </advanced>
    <interactive instruction="Frissítsd ezt a metódust úgy, hogy generikus legyen, és az E típusparamétert használja!">
        <data><![CDATA[

<font color="#E65100">public</font> ___ ___ <font color="#ADD8E6">hashCodeComparison</font>(___ o1, ___ o2) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">if</font>(o1.<font color="#ADD8E6">hashCode</font>() > o2.<font color="#ADD8E6">hashCode</font>()) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">return</font> o1;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;} <font color="#E65100">else</font> <font color="#E65100">return</font> o2;
<br/>}

        ]]></data>
        <answer place="0"><![CDATA[<E>]]></answer>
        <answer place="1">E</answer>
        <answer place="2">E</answer>
        <answer place="3">E</answer>
        <default place="1">Object</default>
        <default place="2">Object</default>
        <default place="3">Object</default>
    </interactive>
</resources>
