<?xml version="1.0" encoding="utf-8" standalone="no"?>
<!--Belongs to course 'Primitives, control flow and I/O' --><resources>
    <chapterdata>
        <id>104</id>
        <name>Tömbök</name>
    </chapterdata>
    <text>
        <![CDATA[
        Ha nagyszámú (azonos típusú) változót kell létrehozni, használhatunk <b>tömböket</b>. Ezek olyan változók, 
		amik több értéket is tartalmaznak. Például egy 5 hosszú <i>int</i> tömb 5 darab <i>int</i> értéket tartalmaz. 
        ]]>
    </text>
    <title text="Deklaráció és inicializálás"/>
    <text>
        <![CDATA[
        A tömbök deklarálása hasonló az egyes változók deklarálásához. Meg kell adnunk a
        típusát és a nevét, majd a <b>[]</b>(szögletes zárójelek) szimbólumokkal jelezzük, hogy tömbről van szó.
        <p>
        Az inicializáláshoz a <b>new</b> kulcsszót kell használni, majd ismét a szögletes zárójeleket, hogy megadjuk a
        a tömb <b>hosszát (length)</b> (azaz benne lévő értékek számát).
        ]]>
    </text>
    <code><![CDATA[
        
        <font color="#DF7401">int</font>[] numbers; <font color="gray">//deklaráció</font>
<br/>numbers = <font color="#E65100">new</font> <font color="#DF7401">int</font>[<font color="#F0E130">100</font>]; <font color="gray">//inicializálás</font>
        
    ]]></code>
    <text>
        <![CDATA[
        A fenti kód egy egész számokból álló tömböt hoz létre. A tömb 100 egész szám változót fog tartalmazni. Csakúgy, mint egyszerű
        változókhoz hasonlóan a deklaráció és az inicializálás egyetlen utasításban is megírható:
        ]]>
    </text>
    <code><![CDATA[
        
        <font color="#DF7401">int</font>[] numbers = <font color="#E65100">new</font> <font color="#DF7401">int</font>[<font color="#F0E130">100</font>];
        
    ]]></code>
    <text>
        <![CDATA[
        Természetesen nemcsak primitív típusokból, hanem osztályokból is lehet tömböt létrehozni. Például,
        a következő kód létrehoz egy <i>String</i>-ekből álló tömböt, amely 25 string objektumot fog tartalmazni:
        ]]>
    </text>
    <code><![CDATA[
        
        <font color="#999900">String</font>[] strings = <font color="#E65100">new</font> <font color="#999900">String</font>[<font color="#F0E130">25</font>];
        
    ]]></code>
    <boxed title="Az elemek alap értéke">
        <![CDATA[
        Amikor egy <b>primitívekből</b> álló tömböt (int, double, char, ...) hozol létre, a Java automatikusan inicializálja a 
		benne lévő elemeket, mindegyiket az alapértelmezett értékkel (például egy <i>int</i> típusú tömb elemei alapból nullák lesznek).
        <p>
        Ha egy <b>osztályból</b> hozunk létre tömböt, akkor minden elem <b>null</b>-ra lesz inicializálva. A <i>null</i>-t később vesszük majd, 
		egyelőre elég annyit tudni, hogy a programozónak inicializálnia kell az ilyen tömbök elemeit.
        ]]>
    </boxed>
    <interactive instruction="Deklarálj egy 20 hosszú double tömböt!">
        <data><![CDATA[

<font color="#DF7401">double</font>___ reals = <font color="#E65100">new</font> <font color="#DF7401">double</font>[___];

        ]]></data>
        <answer place="0">[]</answer>
        <answer place="1">20</answer>
    </interactive>
    <title text="Gyors inicializálás"/>
    <text>
        <![CDATA[
        A Java speciális szintaxist biztosít a kis tömbök gyors inicializálásához. Egyszerűen csak fel kell sorolnunk az elemeket
        szögletes zárójelek között! Íme néhány példa:
        ]]>
    </text>
    <code><![CDATA[
        
 <font color="gray">//4 boolean tömbje</font>
<br/><font color="#DF7401">boolean</font>[] logicals = {<font color="#E65100">false</font>, <font color="#E65100">true</font>, <font color="#E65100">false</font>, <font color="#E65100">false</font>};
<br/><font color="gray">//3 String tömbje</font>
<br/><font color="#999900">String</font>[] words = {<font color="#2E8B57">"Gyors"</font>, <font color="#2E8B57">"Tömb"</font>, <font color="#2E8B57">"Inicializálás"</font>};
        
    ]]></code>
    <text>
        <![CDATA[
        Ez a módszer nem csak magát a tömböt, hanem minden egyes elemet külön-külön inicializál. Nekünk is nem
        kell explicit módon megírnunk a tömb hosszát, az automatikusan meghatározásra kerül.
        <p>
        Vigyáznunk kell azonban, hogy a szögletes zárójelek közé ne tegyünk különböző típusú elemeket!
        ]]>
    </text>
    <code><![CDATA[
        
        <font color="gray">//HIBÁS KÓD!	&nbsp;&nbsp;&nbsp;&nbsp;</font>
<br/><font color="#DF7401">int</font>[] integers = {<font color="#F0E130">1,2</font>,<font color="#F0E130">3</font>,<font color="#2E8B57">"négy"</font>};
        
    ]]></code>
    <interactive instruction="Deklarálj egy tömböt, ami az ABC első három betűjét tartalmazza!">
        <data><![CDATA[

___[] letters = { <font color="#2E8B57">'a'</font>, ___, <font color="#2E8B57">'c'</font> };

        ]]></data>
        <answer place="0">char</answer>
        <answer place="0">Character</answer>
        <answer place="1">'b'</answer>
		<answer place="1">'B'</answer>
    </interactive>
    <title text="Hivatkozás az elemekre"/>
    <text>
        <![CDATA[
        Ahhoz, hogy a tömbök hasznosak legyenek, a programozónak képesnek kell lennie minden egyes elemükre hivatkozni. Ismét a szögletes 
		zárójeleket kell segítségül hívnunk.
        ]]>
    </text>
    <boxed title="Tömb indexelés">
        <![CDATA[
        A tömbök <b>0-TÓL VANNAK INDEXELVE</b>! Ez azt jelenti, hogy a tömb első elemének indexe 0, a másodiké pedig 
		1 lesz, és így tovább. Tehát ha egy tömb X elemű, akkor annak nem lesz X. eleme, csak X-1. , mivel az indexelés 
		nem az 1-től, hanem a 0-tól indul.
        ]]>
    </boxed>
    <code><![CDATA[
        
        <font color="gray">//3 double tömbje</font>
<br/><font color="#DF7401">double</font>[] reals = <font color="#E65100">new</font> <font color="#DF7401">double</font>[<font color="#F0E130">3</font>];
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/><font color="gray">/**
<br/> * Jelenleg mindhárom double
<br/> * értéke 0 (alapérték).
<br/> */</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>reals[<font color="#F0E130">0</font>] = <font color="#F0E130">3.14</font>;
<br/>reals[<font color="#F0E130">1</font>] = <font color="#F0E130">-22.43</font>;
<br/>reals[<font color="#F0E130">2</font>] = <font color="#F0E130">5.5</font>;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/><font color="gray">/**
<br/> * Saját értékeket adtunk a számoknak,
<br/> * felülírva az alapértéket.
<br/>*/</font>
        
    ]]></code>
    <text>
        <![CDATA[
        Figyeljük meg, hogy a <i>0,1,2</i> indexeket használtunk az elemekre való hivatkozáshoz, és nem az <i>1,2,3</i> indexeket!
        ]]>
    </text>
    <code><![CDATA[
        
        <font color="gray">//4 String tömbje
</font>
<br/><font color="#999900">String</font>[] words = <font color="#E65100">new</font> <font color="#999900">String</font>[<font color="#F0E130">4</font>];
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;
<br/><font color="gray">/**
<br/> * Az értékek most minden
<br/> * elem esetén null-ok. Inicializálni kell:
<br/>*/</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>words[<font color="#F0E130">0</font>] = <font color="#2E8B57">"Macska"</font>;
<br/>words[<font color="#F0E130">1</font>] = <font color="#2E8B57">"Autó"</font>;
<br/>words[<font color="#F0E130">2</font>] = <font color="#2E8B57">"Java"</font>;
<br/>words[<font color="#F0E130">3</font>] = <font color="#2E8B57">"Programozás"</font>;
<br/>
<br/><font color="gray">/**
<br/> * Most már biztonságos műveleteket
<br/> * végezni a tömb elemein!
<br/> */</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;
<br/><font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">print</font>(words[<font color="#F0E130">2</font>] + <font color="#2E8B57">" "</font> + words[<font color="#F0E130">3</font>]);
        
    ]]></code>
    <text>
        <![CDATA[
        A Java-ban mindig így kaphatjuk meg egy tömb hosszát (elemeinek számát):
        ]]>
    </text>
    <code><![CDATA[
        
        <font color="#DF7401">char</font>[] chars = <font color="#E65100">new</font> <font color="#DF7401">char</font>[<font color="#F0E130">50</font>];
<br/><font color="gray">//charAmount 50 lesz &nbsp;&nbsp;&nbsp;&nbsp;
</font>
<br/><font color="#DF7401">int</font> charAmount = chars.<font color="#ADD8E6">length</font>;
        
    ]]></code>
    <title text="A tömbök veszélyei"/>
    <text>
        <![CDATA[
        Amikor tömböket használunk, ügyelnünk kell arra, hogy csak a már létező elemekre hivatkozzunk, különben
        a programunk egy <b>ArrayIndexOutOfBoundsException</b> hibaüzenettel fog leállni.
        <p>
        Az alábbi kódminta hibás, a képen látható, hogy mi történik, ha lefuttatjuk:
        ]]>
    </text>
    <code><![CDATA[
        
        <font color="gray">//a pozíciók 0 és 9 közt vannak!</font>
<br/><font color="#DF7401">int</font>[] nums = <font color="#E65100">new</font> <font color="#DF7401">int</font>[<font color="#F0E130">10</font>];
<br/>
<br/><font color="gray">//nincs 10-es pozíciójú elem!</font>
<br/><font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(nums[<font color="#F0E130">10</font>]);
        
    ]]></code>
    <image name="array_index_exception"/>
    <text>
        <![CDATA[
        Ha osztályokból hozunk létre tömböket, fontos, hogy használat előtt inicializáljuk az értékeket!
        Ha megpróbáljuk meghívni az osztály egy metódusát, miközben a változónk valójában <i>null</i>, akkor egy
        <b>NullPointerException</b> hiba keletkezik.
        <p>
        Lásd ezt a kódot és az általa dobott kivételt:
        ]]>
    </text>
    <code><![CDATA[
        
<font color="#999900">String</font>[] words = <font color="#E65100">new</font> <font color="#999900">String</font>[<font color="#F0E130">6</font>];
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;
<br/><font color="gray">//a words[0] itt még null, mert nem inicializáltuk!</font>
<br/><font color="#DF7401">int</font> charNum = words[<font color="#F0E130">0</font>].<font color="#ADD8E6">length</font>();
        
    ]]></code>
    <image name="null_pointer_exception"/>
    <text>
        <![CDATA[
        Vegyük észre, hogy mindkét "hibás" példa <b>érvényes kód</b>. Lefordíthatók mindenféle
        hiba nélkül! Ezek a kivételek akkor dobódnak, amikor futtatjuk a kódot. Más szóval, a fordítóprogram 
		ilyen szempontból nem ellenőrzi a kódunkat.
        ]]>
    </text>
    <interactive instruction="Javítsd ki az indexeket, hogy azok a határokon belül legyenek!">
        <data><![CDATA[

<font color="#DF7401">double</font>[] reals = <font color="#E65100">new</font> <font color="#DF7401">double</font>[<font color="#F0E130">20</font>];
<br/><font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(<font color="#2E8B57">"Első: "</font> + reals[___]);
<br/><font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(<font color="#2E8B57">"Utolsó: "</font> + reals[___]);

        ]]></data>
        <answer place="0">0</answer>
        <answer place="1">19</answer>
        <answer place="1">reals.length-1</answer>
        <answer place="1">reals.length - 1</answer>
        <answer place="1">reals.length- 1</answer>
        <answer place="1">reals.length -1</answer>
        <default place="0">1</default>
        <default place="1">20</default>
    </interactive>
    <title text="Tömbök iterálása"/>
    <text>
        <![CDATA[
        Bár a fenti példák szerint is lehet inicializálni és módosítani egy tömb elemeit,
        de a legtöbb esetben nem így csináljuk. Ehelyett a <b>for ciklus</b> használata ajánlott!
        <p>
        Ebben a példában egy 100 egész számból álló tömböt hozunk létre. Ebben szeretnénk az első 100 pozitív számot tárolni. 
		Alapból mindegyik elem nulla, viszont ezzel a ciklussal beállíthatóak a megfelelő értékek:
        ]]>
    </text>
    <code><![CDATA[
        
<font color="#DF7401">int</font>[] posNums = <font color="#E65100">new</font> <font color="#DF7401">int</font>[<font color="#F0E130">100</font>];
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;
<br/><font color="gray">/**
<br/> * There are only 0-s in the
<br/> * array here.
<br/> */</font>
<br/>
<br/><font color="#E65100">for</font>(<font color="#DF7401">int</font> i=<font color="#F0E130">0</font>; i&lt;posNums.<font color="#ADD8E6">length</font>; i++) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;posNums[i] = i + <font color="#F0E130">1</font>;
<br/>}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;
<br/><font color="gray">/**
<br/> * Now the array stores the
<br/> * numbers from 1 to 100.
<br/>*/</font>
        
    ]]></code>
    <text>
        <![CDATA[
        Mint látható, az <i>i</i> iterátor változót használjuk a tömbünk összes elemének inicializálására.
        Először a <i>i</i> értéke 0, mert ez az első elem indexe.
        <p>
        A ciklus akkor áll meg, amikor <i>i</i> már nem kisebb, mint a tömb hossza (100). Ez akkor történik
        amikor az <i>i</i> 100 lesz. Fontos, hogy itt megálljunk, mivel a <b>posNums[100]</b> egy <i>
        ArrayIndexOutOfBoundsException</i>-t okozna!
        ]]>
    </text>
    <advanced title="For-each ciklus">
        <![CDATA[
        A for ciklusnak van egy speciális változata a tömbök iterálására, az úgynevezett <b>for-each ciklus</b>. Ez sokkal kompaktabb
        és könnyebb megírni, mint egy normál for ciklust.
        <p>
        Használható például akkor, ha egy tömb összes elemét szeretnénk kiírni:
        ]]>
    </advanced>
    <code><![CDATA[
        
        <font color="#999900">String</font>[] textData = <font color="#E65100">new</font> <font color="#999900">String</font>[<font color="#F0E130">50</font>];
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;
<br/><font color="gray">/**
<br/> * Suppose that we initialize the
<br/> * values here!
<br/> */</font>
<br/><font color="#ADD8E6">initValues</font>(textData);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;
<br/><font color="#E65100">for</font>(<font color="#999900">String</font> text: textData) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(text);
<br/>}
        
    ]]></code>
    <text>
        <![CDATA[
        Figyeljük meg, hogy az iterátor változó itt nem szám! Ehelyett ez egy <b>String</b>, melynek neve <i>text</i>.
        A for each ciklus mindig a tömb következő elemét tölti be ebbe a változóba. Továbbá automatikusan
        megáll, amikor elérjük a tömb végét.
        ]]>
    </text>
    <title text="Több dimenziós tömbök"/>
    <text>
        <![CDATA[
        A Java támogatja a többdimenziós tömböket. Az ilyen tömb lényegében tömbök tömbje.
        ]]>
    </text>
    <image name="multi_dim_array"/>
    <text>
        <![CDATA[
        A lineáris algebrát ismerők az ilyen tömbökre <b>mátrixokként</b> is gondolhatnak.
        <br><br>
        Megjegyezzük, hogy a tömbinicializálót többdimenziós tömbökhöz is használhatjuk:
        ]]>
    </text>
    <code><![CDATA[
        
        <font color="#DF7401">int</font>[][] matrix = {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;{<font color="#F0E130">1</font>, <font color="#F0E130">5</font>, <font color="#F0E130">-2</font>},
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;{<font color="#F0E130">3</font>, <font color="#F0E130">7</font>, <font color="#F0E130">2</font>},
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;{<font color="#F0E130">2</font>, <font color="#F0E130">-1</font>, <font color="#F0E130">1</font>}
<br/>};
        
    ]]></code>
    <text>
        <![CDATA[
        E tömbök iterálásához használhatunk <b>beágyazott ciklusokat</b> (ciklus a ciklusban). Ez a példa kiírja a
        többdimenziós tömbünk elemeit, sorokba rendezve (mint egy mátrix):
        ]]>
    </text>
    <code><![CDATA[
        
        <font color="#DF7401">int</font>[][] matrix = {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;{<font color="#F0E130">1</font>, <font color="#F0E130">5</font>, <font color="#F0E130">-2</font>},
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;{<font color="#F0E130">3</font>, <font color="#F0E130">7</font>, <font color="#F0E130">2</font>},
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;{<font color="#F0E130">2</font>, <font color="#F0E130">-1</font>, <font color="#F0E130">1</font>}
<br/>};
<br/><font color="gray">//this outer loop iterates all rows</font>
<br/><font color="#E65100">for</font>(<font color="#DF7401">int</font> i=<font color="#F0E130">0</font>; i&lt;matrix.<font color="#ADD8E6">length</font>; i++) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//this inner loop iterates inside a row	&nbsp;&nbsp;&nbsp;&nbsp;</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">for</font>(<font color="#DF7401">int</font> j=<font color="#F0E130">0</font>; j&lt;matrix[i].<font color="#ADD8E6">length</font>; j++) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">print</font>(matrix[i][j] + <font color="#2E8B57">" "</font>);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(); <font color="gray">//line break
</font>
<br/>}
        
    ]]></code>
    <text>
        <![CDATA[
        Bár nehezebb szemléltetni, de több mint kétdimenziós tömböt is létrehozhatsz.
        ]]>
    </text>
    <title text="A főmetódus újra"/>
    <text>
        <![CDATA[
        Most, hogy már tudunk a tömbökről, megértjük a <b>main metódus</b> egy részét, amit korábban nem értettünk.
        ]]>
    </text>
    <code><![CDATA[
        
    <font color="#E65100">	&nbsp;&nbsp;&nbsp;&nbsp;public static</font><font color="#DF7401"> void </font><font color="#ADD8E6">main</font>(<font color="#999900">String</font>[] args) {
<br/>&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">// TODO: Auto-generated method stub</font>
<br/>&nbsp;&nbsp;&nbsp;&nbsp;}
        
    ]]></code>
    <text>
        <![CDATA[
        A <b>args</b> nevű paraméter valójában egy stringekből álló tömb! Ezt a speciális tömböt a JVM tölti be, és a
        tartalmazza a parancssori argumentumokat. Erről bővebben a következő fejezetben.
        ]]>
    </text>
</resources>
