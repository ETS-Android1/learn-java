<?xml version="1.0" encoding="utf-8" standalone="no"?>
<!--Belongs to course 'Primitives, control flow and I/O' --><resources>
    <chapterdata>
        <id>105</id>
        <name>Input</name>
    </chapterdata>
    <text>
        <![CDATA[
        Lényeges tudni, hogyan lehet a felhasználótól bemenetet (inputot) kapni, és hogyan lehet fájlokat olvasni. Ez lehetővé teszi számunkra, hogy
        hogy bizonyos feladatokat a megadott bemenetnek megfelelően hajtsunk végre!
        <p>
        Vegyük a következő példát: alkalmazásunknak képesnek kell lennie 2 megadott szám összeadására. A felhasználó kiválasztja
        a számokat az alkalmazás indításakor (vagy előtte).
        ]]>
    </text>
    <title text="Parancssori argumentumok"/>
    <text>
        <![CDATA[
        Ez a Java által biztosított egyszerű módja annak, hogy némi bemenetet kapjunk. Ennek egyes részeit már láttuk a
        előző fejezet végén.
        ]]>
    </text>
    <advanced title="Argumentumok megadása IDE nélkül">
        <![CDATA[
        Ha a parancssort használod, akkor az argumentumok megadása valójában egyszerűbb. Csak meg kell adnod az argumentumokat
        (szóközökkel elválasztva) a <b>java</b> parancs végén.
        <p>
        Példaként megnézheted a <a href="https://docs.oracle.com/javase/tutorial/essential/environment/cmdLineArgs.html">
        hivatalos oracle bemutatót</a> parancssori argumentumokról.
        ]]>
    </advanced>
    <text>
        <![CDATA[
        Amikor egy <i>IDE</i>-t használunk, nincs hozzáférésünk a konzolhoz, azonban megadhatjuk az argumentumokat a <i>IDE</i>-nek és a
        az átadja azokat a <i>JVM</i>-nek helyettünk.
        <p>
        Az Eclipse-ben kövesd az alábbi lépéseket az argumentumok beállításához:
        ]]>
    </text>
    <list>
        <![CDATA[
        <ul>
        <li>1. Válasz ki a <b>Run</b> -> <b>Run Configurations</b> menüt.</li>
        <li>2. Kattints az <b>Arguments</b> tabra.</li>
        <li>3. A <b>Program Arguments section</b> szövegdobozba írd be az argumentumokat, szóközzel elválasztva.</li>
        <li>4. Nyomj az <b>Apply</b> gombra.</li>
        </ul>
        ]]>
    </list>
    <image name="eclipse_arguments"/>
    <boxed title="Más IDE-k esetén">
        <![CDATA[
        Ha a más ajánlott környezetek valamelyikét használod, lásd <a href="https://stackoverflow.com/questions/2066307/how-do-you-input-commandline-argument-in-intellij-idea">ezt</a> 
        a StackOverflow kérdést az Intellij Idea-hoz, és <a href="https://stackoverflow.com/questions/9168759/netbeans-how-to-set-command-line-arguments-in-java">ezt</a> a Netbeans esetében.
        ]]>
    </boxed>
    <text>
        <![CDATA[
        Most, hogy tudjuk, hogyan állíthatjuk be az argumentumokat, nézzük meg, hogyan érhetjük el őket futás közben. A <i>JVM</i> elhelyezi őket a
        a main metódus <b>String tömb paraméterébe</b> (alapértelmezés szerint <i>args</i> néven).
        <p>
        Például írjuk ki az összes parancssori argumentumot a konzolra:
        ]]>
    </text>
    <code><![CDATA[
        
        <font color="#E65100">public static</font> <font color="#DF7401">void</font> <font color="#ADD8E6">main</font>(<font color="#999900">String</font>[] args) {	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">for</font>(<font color="#999900">String</font> argument: args) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(argument);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>}
        
    ]]></code>
    <text>
        <![CDATA[
        A <b>for-each</b> ciklust használtam az egyszerű szintaxisa miatt.
        <br><br>
        Végül oldjuk meg a számok összeadásának kezdeti példáját, a parancssori argumentumok felhasználásával! A felhasználó
        2 számot ad meg argumentumként, és a program ezeket fogja használni.
        ]]>
    </text>
    <boxed title="parseInt">
        <![CDATA[
        TAz argumentumokat <b>String</b> formában kapjuk meg, de ahhoz, hogy összeadjuk őket, át kell alakítani őket egész számokká! 
		Ehhez egy segédmetódus, az <b>Integer.parseInt</b> áll rendelkezésre:
        <br><br>
        <i>int one = Integer.parseInt("1");</i>
        <br><br>
        Vegyük észre, hogy a <i>parseInt</i> <b>NumberFormatException</b>-t dob, ha a megadott karakterlánc valójában nem egész szám. 
		Mindig figyeljünk tehát, hogy a szöveg amit megadunk neki, az tényleg egész számmá alakítható.
        ]]>
    </boxed>
    <text>
        <![CDATA[
        Még nem foglalkoztunk a kivételek kezelésével, ezért tegyük fel, hogy a felhasználó csak érvényes egész számokat fog megadni, mint
        parancssori argumentumokat. Ha ez nem így van, a program összeomlik.
        ]]>
    </text>
    <code><![CDATA[
        
        <font color="#E65100">public static</font> <font color="#DF7401">void</font> <font color="#ADD8E6">main</font>(<font color="#999900">String</font>[] args) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//van két paraméter?</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">if</font>(args.<font color="#ADD8E6">length</font> != <font color="#F0E130">2</font>) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(<font color="#2E8B57">"Nem megfelelő számú argumentum!"</font>);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp; <font color="#E65100">return</font>;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//átalakítás int-té a parseInt-tel</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#DF7401">int</font> num1 = <font color="#999900">Integer</font>.<font color="#ADD8E6">parseInt</font>(args[<font color="#F0E130">0</font>]);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#DF7401">int</font> num2 = <font color="#999900">Integer</font>.<font color="#ADD8E6">parseInt</font>(args[<font color="#F0E130">1</font>]);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//eredmény kiírása</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#DF7401">int</font> res = num1 + num2;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(<font color="#2E8B57">"Az eredmény: "</font> + res);
<br/>}
        
    ]]></code>
    <interactive instruction="Egészítse ki a programot úgy, hogy azonnal visszatérjen, ha vannak parancssori argumentumok!">
        <data><![CDATA[

<font color="#E65100">public</font> <font color="#E65100">static</font> <font color="#DF7401">void</font> <font color="#ADD8E6">main</font>(<font color="#999900">String</font>[] args) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">if</font>(___ > <font color="#F0E130">0</font>) <font color="#E65100">return</font>;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//További kód...
</font>
<br/>}

        ]]></data>
        <answer place="0">args.length</answer>
    </interactive>
    <title text="System.in és Scanner használata"/>
    <text>
        <![CDATA[
        A <i>System.in</i> a Java által biztosított <b>bemeneti folyam</b> (input stream), amely a billentyűzet bemenetnek (más néven standard inputnak) felel meg.
        A felhasználó konzolról történő bemenetének elmentéséhez ezt egy <b>java.util.Scanner</b>-el kombinálva használjuk.
        <p>
        A szkenner arra szolgál, hogy a bemeneti adatfolyam nyers bájtjaiból primitív típusokat és karakterláncokat hozzon létre (amelyeket a kódunkban használhatunk).
        ]]>
    </text>
    <boxed title="Parancssor az IDE-n belül">
        <![CDATA[
        A programunk a parancssori felületen (<i>CLI</i> - Command Line Interface) keresztül kapja meg, amit a felhasználó beír. Szükség esetén az <i>IDE</i> 
        "szimulálja" a <i>CLI</i>-t, így fejlesztés közben könnyen tesztelhetjük a programot.
        <p>
        Az Eclipse-ben a "konzol" a képernyő alja közelében jelenik meg, így:
        ]]>
    </boxed>
    <image name="eclipse_console"/>
    <text>
        <![CDATA[
        Hozzunk létre egy programot, amely egy sor szöveget kér a felhasználótól, majd azt kiírja:
        ]]>
    </text>
    <code><![CDATA[
        
        <font color="#E65100">import</font> java.<font color="#ADD8E6">util</font>.<font color="#999900">Scanner</font>;
<br/>
<br/><font color="#E65100">public class</font> <font color="#999900">Main</font> {
<br/>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public static</font> <font color="#DF7401">void</font> <font color="#ADD8E6">main</font>(<font color="#999900">String</font>[] args) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(<font color="#2E8B57">"Írj be valamit:"</font>);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//szkenner létrehozása System.in-ből</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">Scanner</font> input = <font color="#E65100">new</font> <font color="#999900">Scanner</font>(<font color="#999900">System</font>.<font color="#ADD8E6">in</font>);
<br/>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">String</font> line = input.<font color="#ADD8E6">nextLine</font>();
<br/>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//írjuk ki amit a felhasználó beírt</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(<font color="#2E8B57">"Ezt írtad be: "</font> + line);
<br/>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//szkenner bezárása
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;input.<font color="#ADD8E6">close</font>();
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
<br/>}
        
    ]]></code>
    <text>
        <![CDATA[
        A szkenner lezárása nem szükséges, de ajánlott. Csak akkor zárd le, ha megbizonyosodtál arról, hogy
        hogy nem lesz rá többé szükséged, mivel lezárt szkenner már többé nem használható, olyankor újat kell létrehozni.
        ]]>
    </text>
    <boxed title="A nextLine metódus">
        <![CDATA[
        A beolvasó <b>nextLine</b> metódusa <b>megállítja a programot</b>, amíg nem érkezik egy sor szöveg a bemeneti adatfolyamból! A
        esetünkben ez addig tart, amíg a felhasználó beír egy sort a konzolra, és megnyomja az enter billentyűt. Ezt követően a sort stringként adja vissza.
        <p>
        A beolvasónak vannak más hasonló metódusai is (<i>nextX</i>), ezek ugyanúgy viselkednek: megvárják, amíg az <i>enter billentyű lenyomását</i> nem érzékelik,
        majd visszaad egy <i>X</i>-et (vagy kivételt dob, ha a sort nem lehet <i>X</i>-vé alakítani). Például <i>nextInt, nextDouble</i>, stb.
        ]]>
    </boxed>
    <text>
        <![CDATA[
        Most a <i>System.in és a Scanner</i> segítségével oldjuk meg a számok összeadásának feladatát:
        ]]>
    </text>
    <code><![CDATA[
        
        <font color="#E65100">import</font> java.<font color="#ADD8E6">util</font>.<font color="#999900">Scanner</font>;
<br/>
<br/><font color="#E65100">public class</font> <font color="#999900">Main</font> {
<br/>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public static</font> <font color="#DF7401">void</font> <font color="#ADD8E6">main</font>(<font color="#999900">String</font>[] args) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//szkenner létrehozása
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">Scanner</font> input = <font color="#E65100">new</font> <font color="#999900">Scanner</font>(<font color="#999900">System</font>.<font color="#ADD8E6">in</font>);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//kérjük és beolvassuk a számokat
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(<font color="#2E8B57">"Első szám:"</font>);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#DF7401">int</font> num1 = input.<font color="#ADD8E6">nextInt</font>();
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(<font color="#2E8B57">"Második szám:"</font>);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#DF7401">int</font> num2 = input.<font color="#ADD8E6">nextInt</font>();
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#DF7401">int</font> sum = num1 + num2;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">print</font>(<font color="#2E8B57">"Az összegük: "</font> + sum);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;input.<font color="#ADD8E6">close</font>();
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>}
        
    ]]></code>
    <text>
        <![CDATA[
        Vegyük észre, hogy a <b>nextInt</b> metódus egész számot vár! Ha olyan sort kap, amely nem konvertálható át
        egész számra, akkor <b>InputMismatchException</b>-t fog dobni. Mivel nem implementáltuk a kivételkezelést, ez összeomlasztja a programunkat.
        ]]>
    </text>
    <interactive instruction="Egészítsd ki a ciklust úgy, hogy addig megy, amíg a billentyűzeten -1-et nem írtál be!">
        <data><![CDATA[

<font color="#999900">Scanner</font> scanner = <font color="#E65100">new</font> <font color="#999900">Scanner</font>(___);
<br/><font color="#DF7401">int</font> number = <font color="#F0E130">0</font>;
<br/><font color="#E65100">while</font>(number ___ <font color="#F0E130">-1</font>) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;number = scanner.<font color="#ADD8E6">___</font>();
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(number + <font color="#2E8B57">" lett beírva..."</font>);
<br/>}
<br/><font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(<font color="#2E8B57">"Megállás."</font>);
<br/>scanner.<font color="#ADD8E6">close</font>();

        ]]></data>
        <answer place="0">System.in</answer>
        <answer place="1">!=</answer>
        <answer place="2">nextInt</answer>
    </interactive>
    <title text="Fájlok olvasása"/>
    <text>
        <![CDATA[
        Az utolsó bemeneti típus, amellyel foglalkozunk, a fájlokból való olvasás. Egy program általában soronként olvas be egy szöveges fájlt. 
		Ezt a <b>Files</b> segédosztály segítségével fogjuk megtenni.
        ]]>
    </text>
    <boxed title="A beolvasott szöveg tárolása">
        <![CDATA[
        Az első ötlet, ami eszünkbe jut, hogy egy tömböt használjunk a sorok tárolására. Ezzel a megközelítéssel azonban van egy probléma.
        Egy tömbnek fix hosszúsága van, de mi azt szeretnénk, hogy a programunk működjön, függetlenül attól, hogy hány sor van a fájlban!
        <p>
        Ennek kiküszöbölésére használhatunk egy <b>List</b>-t (listát). Ez egy olyan osztály (valójában egy interfész, de erről majd később), 
		amely biztosítja a metódusokat az elemek hozzáadásához és eltávolításához, és szükség esetén "átméretezi" magát.
        ]]>
    </boxed>
    <advanced title="Adatstruktúra">
        <![CDATA[
        A lista egyfajta <b>adatstruktúra</b> (Java-ban <b>gyűjteményeknek</b> vagy <b>kollekcióknak</b> nevezik őket). Ezek úgy tárolják az adatokat, hogy
        bizonyos műveletek (például a legnagyobb elemek kinyerése) garantáltan hatékonyak legyenek.
        <p>
        A JDK számos adatszerkezeti implementációt tartalmaz, amelyekről egy későbbi kurzusban lesz szó, de bátran böngészhetsz a
        <a href="https://docs.oracle.com/javase/7/docs/api/java/util/Collection.html">kollekciók</a> között további példákért!
        ]]>
    </advanced>
    <text>
        <![CDATA[
        Mielőtt szöveges fájlokat olvashatnánk, nézzük meg, hogyan tudunk létrehozni, és hova kell helyeznünk őket. A legegyszerűbb módja
        ha a projektünk mappájába tesszük őket (ez a mappa az, amelyikben a <b>src és bin</b> mappák találhatóak).
        <p>
        Ebben az IDE is tud segíteni, például az Eclipse-ben a projekt könyvtárába helyezhetünk el egy fájlt, ha jobb egérgombbal kattintunk a projektre,
        majd a következő utasításokat követjük:
        ]]>
    </text>
    <image name="eclipse_file_create_1"/>
    <text>
        <![CDATA[
        A név bármi lehet, de a forráskódban ezt kell használnunk.
        Ne felejtsük el megadni a <b>fájl kiterjesztést (.txt)</b> is, ahogy az alábbi képen látható!
        ]]>
    </text>
    <image name="eclipse_file_create_2"/>
   <text>
       <![CDATA[
       Íme egy egyszerű példaprogram, amely beolvassa és kiírja az összes sort az imént létrehozott fájlból.
       a konzolra. Ne felejtsd el <b>beírni néhány sort a fájlba és elmenteni</b>, mielőtt futtatod! Enélkül a program 
	   nem lesz túl látványos, mivel a fájl alapból üres.
       ]]>
   </text>
    <code><![CDATA[
        
<font color="#E65100">package</font> input;
<br/>
<br/><font color="#E65100">import</font> java.<font color="#ADD8E6">nio</font>.<font color="#ADD8E6">file</font>.<font color="#999900">Files</font>;
<br/><font color="#E65100">import</font> java.<font color="#ADD8E6">nio</font>.<font color="#ADD8E6">file</font>.<font color="#999900">Path</font>;
<br/><font color="#E65100">import</font> java.<font color="#ADD8E6">nio</font>.<font color="#ADD8E6">file</font>.<font color="#999900">Paths</font>;
<br/><font color="#E65100">import</font> java.<font color="#ADD8E6">util</font>.<font color="#999900">List</font>;
<br/>
<br/><font color="#E65100">public class</font> <font color="#999900">Main</font> {
<br/>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public static</font> <font color="#DF7401">void</font> <font color="#ADD8E6">main</font>(<font color="#999900">String</font>[] args) <font color="#E65100">throws</font> <font color="#999900">Exception</font> {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//Path (útvonal) létrehozása, ami a fájlra mutat</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">Path</font> filePath = <font color="#999900">Paths</font>.<font color="#ADD8E6">get</font>(<font color="#2E8B57">"data.txt"</font>);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//a sorok beolvasása egy listába</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">List</font>&lt;<font color="#999900">String</font>> lines = <font color="#999900">Files</font>.<font color="#ADD8E6">readAllLines</font>(filePath);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//for-each ciklus a listán</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">for</font>(<font color="#999900">String</font> line: lines) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(line);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>}
        
    ]]></code>
    <advanced title="'throws Exception' rész">
        <![CDATA[
        Talán kíváncsi vagy, hogy mit jelent a <b>throws Exception</b> a main metódus deklarációjának végén. 
        Bizonyos esetekben a Java rákényszerít minket a kivételek kezelésére. A fájlok olvasása az egyik ilyen eset. Azonban még nem volt szó arról, hogy
        hogyan kell ezt csinálni, ezért helyette ezt a "haknizós" megoldást használhatjuk.
        <p>
        Miután megismertük a kivételkezelést, <b>NE</b> használjunk ilyen megoldást. A kivételeket kezelni kell, főleg 
		az ilyen esetekben.
        ]]>
    </advanced>
    <advanced title="Első pillantás generikus kódra">
        <![CDATA[
        A lista deklarációjánál az <b>&lt;String></b> szintaxis látható. A List egy <b>generikus</b> objektum, ami azt jelenti, hogy 
        tartalmazhat <b>mindenféle típusú elemet</b>, de a deklarációnál meg kell írnunk a leendő elemek típusát. Ez az, amit ez a darab
        kódrészlet csinál. Megmondja, hogy ez a lista <i>String</i>-eket tartalmaz majd.
        <p>
        A generikus kódról egy későbbi kurzuson részletesebben is szó lesz.
        ]]>
    </advanced>
    <text>
        <![CDATA[
        Ha a program futtatásakor <b>NoSouchFileException</b> hibaüzenetet kapsz, győződj meg róla, hogy a fájl a megadott könyvtárban van,
        és hogy a fájl neve megegyezik azzal, amit a kódba írtál.
        ]]>
    </text>
    <boxed title="Régi módszerek">
        <![CDATA[
        A fájl beolvasásához itt használt használt osztályok a <b>Java 7</b>-ben kerültek bevezetésre a <b>java.nio</b> csomaggal. Ezt megelőzően egy
        <a href="https://docs.oracle.com/javase/7/docs/api/java/io/BufferedReader.html">BufferedReader</a> osztályt használtuk.
        <p>
        Ez a fájlolvasási módszer egy kicsit hosszabb, de még mindig széles körben használt, ezért ha meg akarsz ismerkedni vele, 
		kövesd <a href="https://stackoverflow.com/questions/16104616/using-bufferedreader-to-read-text-file">ezt</a> a linket.
        ]]>
    </boxed>
    <title text="A legmenőbb megoldás"/>
    <text>
        <![CDATA[
        Íme a számok összeadásának egy újabb változata. Ez a program képes <b>bármennyi számot</b> beolvasni és összeadni <i>data.txt</b>-ből.
        Futtatás előtt töltsük fel a fájlt egész számokkal, egy sorba csak egy számot tegyünk!
        ]]>
    </text>
    <code><![CDATA[
        
<font color="#E65100">package</font> input;
<br/>
<br/><font color="#E65100">import</font> java.<font color="#ADD8E6">nio</font>.<font color="#ADD8E6">file</font>.<font color="#999900">Files</font>;
<br/><font color="#E65100">import</font> java.<font color="#ADD8E6">nio</font>.<font color="#ADD8E6">file</font>.<font color="#999900">Path</font>;
<br/><font color="#E65100">import</font> java.<font color="#ADD8E6">nio</font>.<font color="#ADD8E6">file</font>.<font color="#999900">Paths</font>;
<br/><font color="#E65100">import</font> java.<font color="#ADD8E6">util</font>.<font color="#999900">List</font>;
<br/>
<br/><font color="#E65100">public</font> class <font color="#999900">Main</font> {
<br/>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> static <font color="#DF7401">void</font> <font color="#ADD8E6">main</font>(<font color="#999900">String</font>[] args)
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	<font color="#E65100">throws</font> <font color="#999900">Exception</font> {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//Path objektum létrehozása, ami a fájlra mutat</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">Path</font> filePath = <font color="#999900">Paths</font>.<font color="#ADD8E6">get</font>(<font color="#2E8B57">"data.txt"</font>);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//sorok listába olvasása</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">List</font>&lt;<font color="#999900">String</font>> lines = <font color="#999900">Files</font>.<font color="#ADD8E6">readAllLines</font>(filePath);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//az összeg alapból 0</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#DF7401">int</font> sum = <font color="#F0E130">0</font>;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//a sorok bejárása</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">for</font>(<font color="#999900">String</font> line: lines) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//a szöveges sor átalakítása számmá</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#DF7401">int</font> lineAsInt = <font color="#999900">Integer</font>.<font color="#ADD8E6">parseInt</font>(line);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//az összeg növelése ezzel az értékkel</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;sum = sum + lineAsInt;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(<font color="#2E8B57">"Az összeg: "</font> + sum);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>}
        
    ]]></code>
</resources>
