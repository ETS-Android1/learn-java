<?xml version="1.0" encoding="utf-8" standalone="no"?>
<!-- Chapter about introduction to parallel programming. --><resources>
    <chapterdata>
        <id>251</id>
        <name>Bevezetés</name>
    </chapterdata>

    <!-- In general, not in Java? Possible dangers
     definitions, basic concept -->

    <text>
        <![CDATA[
        A párhuzamos programozás több folyamat <b>egyidejűleg</b> történő végrehajtása. Kérjük, vegye figyelembe, 
		Ez a fejezet nem Java-specifikus lesz, inkább csak egy gyors áttekintés a 
		témáról, ami más nyelvekre is alkalmazható.
        ]]>
    </text>
    <boxed title="Más elnevezések">
        <![CDATA[
        A folyamatokat, amik párhuzamosan futnak <b>feladatoknak</b>, 
		<b>munkáknak</b>, Javában gyakran <b>szálaknak (thread)</b> nevezik.
        A nem párhuzamos programot <b>szekvenciálisnak</b> nevezzük (eddig minden 
		programunk ilyen volt).
        ]]>
    </boxed>
    <text>
        <![CDATA[
        A párhuzamosan futtatható folyamatok száma több tényezőtől függ:
        ]]>
    </text>
    <list>
        <![CDATA[
        <ul>
        <li>A <b>operációs rendszertől</b>. A programok végül is csak "kérhetik" a 
		szálak indítását. Az <i>OS</i> dönt majd arról, hogy ténylegesen hány 
		folyamatot indít el, és mikor.</li>
        <li>A hardvertől. A folyamatok párhuzamos futtatásához több <i>CPU</i> 
		magra van szükség.</li>
        </ul>
        ]]>
    </list>
    <title text="Előnyök"/>
    <text>
        <![CDATA[
        A párhuzamosított alkalmazások létrehozása jobb teljesítményt eredményezhet, 
		mivel kódunk több részét futtathatjuk egyszerre, és ezeknek nem kell a 
		többire várnia.
        ]]>
    </text>
    <boxed title="Jobb modellek">
        <![CDATA[
        A Java (és minden objektumorientált nyelv) fontosnak tartja a probléma minél 
		reálisabb modellezését. Az osztályok és az interfészek mind ezt a célt 
		szolgálják. Most, a párhuzamos programozással még jobb modelleket készíthetünk 
		(vannak a valóságban is párhuzamosan történő dolgok, ezeket modellezhetjük). 
        ]]>
    </boxed>
    <text>
        <![CDATA[
        Egyes programok esetében a párhuzamosság elengedhetetlen. Ilyenek például a 
		<b>grafikus felhasználói felülettel</b> (<i>GUI</i>) rendelkező alkalmazások.
        Ezek az alkalmazások saját ablakokat hoznak létre a parancssor használata 
		helyett, és így sokkal felhasználóbarátabbak.
        ]]>
    </text>
    <boxed title="Párhuzamosság a GUI alkalmazásokban">
        <![CDATA[
        Egy <i>GUI</i> alkalmazásnak a hosszú műveleteket párhuzamosan kell futtatnia, 
		úgynevezett <b>háttérszálakon</b>. Ellenkező esetben, a hosszú művelet közben 
		a felhasználói felület nem tudna továbbra is interaktív maradni, és a program
        "<i>lefagyottnak</i>" tűnne.
        <p>
        Példaként ez az androidos alkalmazás több szálat használ az erőforrások 
		betöltésére, így a gombok és egyéb elemek reaktívak maradnak, amíg a 
		betöltés folyamatban van.
        ]]>
    </boxed>
    <title text="Hátrányok"/>
    <text>
        <![CDATA[
        Eddig a programjaink <b>determinisztikusak</b> voltak. Ez azt jelenti, 
		hogy azonos bemenet esetén mindig ugyanazt a kimenetet adták. Most a 
		párhuzamos programozással <b>nemdeterminizmust</b> viszünk a rendszerbe. 
		Ez azért van, mert a <i>OS</i> dönti el, hogy mely folyamatok végrehajtását 
		kezdi el, és ezt nem tudhatjuk előre.
        ]]>
    </text>
    <advanced title="Hibák javítása">
        <![CDATA[
        A párhuzamos programokat lényegesen nehezebb debugolni (javítania hibákat). 
		Emiatt fontos, hogy valóban megértsük az előző kurzusokat, 
		mielőtt belevágnánk ebbe.
        ]]>
    </advanced>
    <text>
        <![CDATA[
        Nagy kihívás (néha egyenesen lehetetlen) egy szekvenciális programot vagy 
		algoritmust párhuzamosan végrehajtható részekre bontani. A programozónak kell 
		eldöntenie, hogy ez a többletmunka megéri-e a lehetséges teljesítménynövekedést.
        ]]>
    </text>
    <title text="További anyagok"/>
    <text>
        <![CDATA[
        Nehéz felfogni, hogy mi is valójában a párhuzamos programozás. 
		Összegyűjtöttem itt néhány forrást, amelyek segíthetnek megérteni. 
		Ezek az anyagok angol nyelvűek.
        ]]>
    </text>
    <list>
        <![CDATA[
        <ul>
        <li>Rövid videó a párhuzamosságról: <a href="https://www.youtube.com/watch?v=q7sgzDH1cR8">Parallel Computing Explained In 3 Minutes</a>.</li>
        <li>Egy hosszabb és részletesebb videó: <a href="https://www.youtube.com/watch?v=RNVIcm8-6RE">Introduction To Parallel Computing</a>.</li>
        </ul>
        ]]>
    </list>
    <text>
        <![CDATA[
        Ezeket a videókat nem én készítettem. Köszönet a szerzőknek.
        ]]>
    </text>
</resources>
