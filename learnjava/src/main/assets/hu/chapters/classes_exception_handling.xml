<?xml version="1.0" encoding="utf-8" standalone="no"?>
<resources>
    <chapterdata>
        <id>156</id>
        <name>Kivételkezelés</name>
    </chapterdata>
    <text>
        <![CDATA[
        A kivétel olyan probléma, amely a program végrehajtása során felmerülhet. A kivételek osztályok,
        és mindannyian a <b>java.lang.Exception</b>-ből származnak.
        <p>
        Egy kezeletlen kivétel összeomlasztja az alkalmazásodat, ezért a biztonságos programozás egyik 
		alapfeltétele a kivételek kezelése.
        ]]>
    </text>
    <title text="A try-catch blokk"/>
    <text>
        <![CDATA[
        A kivételek kezelése a <b>try-catch blokk</b> segítségével történik. A kódot, amely kivételt dobhat, a
        a <i>try</i> blokkba rakjuk, a <i>catch</i> blokkba pedig azt, aminek történnie kell, ha a kivétel bekövetkezik.
        ]]>
    </text>
    <code><![CDATA[
        
<font color="#E65100">public static</font> <font color="#DF7401">void</font> <font color="#ADD8E6">main</font>(<font color="#999900">String</font>[] args) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">try</font> {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(<font color="#2E8B57">"Enter a number:"</font>);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">Scanner</font> s = <font color="#E65100">new</font> <font color="#999900">Scanner</font>(<font color="#999900">System</font>.<font color="#ADD8E6">in</font>);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#DF7401">int</font> number = s.<font color="#ADD8E6">nextInt</font>(); <font color="gray">//this line may throw InputMismatchException</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;s.<font color="#ADD8E6">close</font>();
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;} <font color="#E65100">catch</font>(<font color="#999900">InputMismatchException</font> e) { <font color="gray">//InputMismatchException was caught
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(<font color="#2E8B57">"Invalid number!"</font>);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#ADD8E6">main</font>(args); <font color="gray">//try again
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>}
        
    ]]>
	</code>
	<text>
	<![CDATA[
		Ha a <i>nextInt</i> metódus kivételt dob, akkor azt a <i>catch</i> blokk "elkapja", és az 
		alkalmazás nem omlik össze, hanem azok az utasítások fognak futni, amik a <i>catch</i> blokkban 
		vannak.
	]]>
	</text>
    <boxed title="Rekurzió">
        <![CDATA[
        A rekurzió az, amikor egy metódus újra meghívja önmagát (mint a fenti példában a <i>main</i>). Bár ez egy hasznos eszköz, 
		óvatosnak kell lennünk hogy valahogyan kontrolláljuk, különben a metódus egy "végtelen ciklusba" ragad, és önmagát megállás nélkül hívja.
        ]]>
    </boxed>
    <text>
        <![CDATA[
        Általában egy <i>catch</i> blokk egyféle kivételhez tartozik (bár a <a href="https://docs.oracle.com/javase/7/docs/technotes/guides/language/catch-multiple.html">szintaxis</a> többféle kivételt is megenged).
        Ha további kivételeket szeretnénk kezelni, a legjobb megoldás egy újabb catch-block hozzáadása:
        ]]>
    </text>
    <code><![CDATA[
        
        <font color="#E65100">public static</font> <font color="#DF7401">void</font> <font color="#ADD8E6">main</font>(<font color="#999900">String</font>[] args) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">try</font> {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">List</font>&lt;String> lines = <font color="#999900">Files</font>.<font color="#ADD8E6">readAllLines</font>(<font color="#999900">Paths</font>.<font color="#ADD8E6">get</font>(<font color="#2E8B57">"data.txt"</font>)); <font color="gray">//may throw IOException</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">for</font>(<font color="#999900">String</font> line: lines) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#DF7401">int</font> number = <font color="#999900">Integer</font>.<font color="#ADD8E6">parseInt</font>(line); <font color="gray">//may throw NumberFormatException</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;} <font color="#E65100">catch</font>(<font color="#999900">NumberFormatException</font> nfe) { <font color="gray">//format exception was caught</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(<font color="#2E8B57">"Invalid line in file!"</font>);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;} <font color="#E65100">catch</font>(<font color="#999900">IOException</font> ioe) { <font color="gray">//file related exception was caught</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(<font color="#2E8B57">"Can'</font>t find file!");
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>}
        
    ]]></code>
    <text>
        <![CDATA[
        Nézzük meg újra az első példát. Megvalósítottuk a kivételkezelést, de még mindig felmerülhet 
		egy probléma! Ha egy kivétel lép fel, a <i>Scanner</i>-ünket lezáró (<i>close</i>) utasítás 
		nem kerül végrehajtásra.
        <br><br>
        Egy megoldás, ha a <i>catch</i> blokkba is beleírjuk a lezáró utasítást. Elegánsabb azonban a 
		<b>finally blokk</b> használata:
        ]]>
    </text>
    <code><![CDATA[
        
        <font color="#E65100">public static</font> <font color="#DF7401">void</font> <font color="#ADD8E6">main</font>(<font color="#999900">String</font>[] args) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">Scanner</font> s = <font color="#E65100">new</font> <font color="#999900">Scanner</font>(<font color="#999900">System</font>.<font color="#ADD8E6">in</font>);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">try</font> {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(<font color="#2E8B57">"Enter a number: "</font>);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#DF7401">int</font> number = s.<font color="#ADD8E6">nextInt</font>(); <font color="gray">//this line may throw InputMismatchException
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;} <font color="#E65100">catch</font>(<font color="#999900">InputMismatchException</font> ime) { <font color="gray">//InputMismatchException was caught
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(<font color="#2E8B57">"Invalid number!"</font>);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#ADD8E6">main</font>(args); <font color="gray">//try again
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;} <font color="#E65100">finally</font> {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;s.<font color="#ADD8E6">close</font>(); <font color="gray">//always executed
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>}
        
    ]]></code>
    <text>
        <![CDATA[
        A finally blokknak a végén kell lennie, és a benne lévő utasítások <b>garantáltan</b> le fognak futni, 
		akkor is ha történt kivétel, és akkor is ha nem.
        ]]>
    </text>
    <advanced title="Hibák">
        <![CDATA[
        A súlyosabb problémákat a <b>java.lang.Error</b> alosztályai képviselik. Olyan problémát jeleznek, 
		amelyet az alkalmazás nem tud jól kezelni. Ennek ellenére a hibákat is el lehet kapni <i>catch</i> blokk segítségével.
        Egy példa a </i>java.lang.OutOfMemoryError</i>, ami akkor dobódik, ha a <i>JVM</i> kifogy a memóriából.
        ]]>
    </advanced>
    <interactive instruction="Írd meg a kivételkezelést! Nézd meg a fenti mintákban a kivétel nevét, vagy használd az ősosztályt!">
        <data><![CDATA[

___ {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">Path</font> path = <font color="#999900">Paths</font>.<font color="#ADD8E6">get</font>(<font color="#2E8B57">"input.txt"</font>);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">List</font>&lt;<font color="#999900">String</font>> lines = <font color="#999900">Files</font>.<font color="#ADD8E6">readAllLines</font>(path);
<br/>} ___ (___ e) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">err</font>.<font color="#ADD8E6">println</font>(<font color="#2E8B57">"Could not find file!"</font>);
<br/>}

        ]]></data>
        <answer place="0">try</answer>
        <answer place="1">catch</answer>
        <answer place="2">IOException</answer>
        <answer place="2">Exception</answer>
        <answer place="2">Throwable</answer>
    </interactive>
    <title text="Kivételek dobása"/>
    <text>
        <![CDATA[
        A <b>throw</b> kulcsszó egy kivétel létrehozására és dobására szolgál:
        ]]>
    </text>
    <code><![CDATA[
        <font color="gray">//you MUST NOT pass 'a' as parameter!</font>
<br/><font color="#E65100">public</font> <font color="#DF7401">void</font> <font color="#ADD8E6">charInput</font>(<font color="#DF7401">char</font> letter) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">if</font>(letter == <font color="#2E8B57">'a'</font>) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">throw new</font> <font color="#999900">IllegalArgumentException</font>();
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(<font color="#2E8B57">"Nice character!"</font>);
<br/>}
        
    ]]></code>
    <text>
        <![CDATA[
        Bár a <i>JDK</i> számos előre megírt kivételt tartalmaz, a programozók mégis gyakran készítenek 
		egyéni kivételeket. Ez nagyon egyszerű, csak annyit kell tennünk, hogy az osztályunkat a 
		<i>java.lang.Exception</i> osztályból származtatjuk (vagy a <b>java.lang.RuntimeException</b>-ből, 
		lásd a következő részt).
        ]]>
    </text>
    <title text="Ellenőrzött és nem ellenőrzött kivételek"/>
    <text>
        <![CDATA[
        Az ellenőrzött kivétel olyan kivétel, amelyet a programozó kénytelen kezelni. Például az <i>IOException vagy a FileNotFoundException</i>.
        ilyenek. A nem ellenőrzött kivételek (<i>ArithmeticException, NumberFormatException</i>, ...) kezelése ezzel szemben opcionális.
        ]]>
    </text>
    <boxed title="Mitől lesz ellenőrzött?">
        <![CDATA[
        Alapesetben a kivételek ellenőrzöttek. Az <i>Exception</i>-nek azonban van egy speciális gyerek osztálya, 
		a <b>java.lang.RuntimeException</b>. Amegyik kivétel ebből származik, az nem lesz ellenőrzött.
		Íme egy kép a könnyebb megértéshez:
        ]]>
    </boxed>
    <image name="exception_hierarchy"/>
    <text>
        <![CDATA[
        Mint látható, a kivételeknek és a hibáknak is van egy alaposztálya, a <i>Throwable</i>. Csak ennek az osztálynak az alosztályai
        használhatóak <i>catch</i> blokkokban, valamint a <i>throw és throws</i> utasítások után.
        ]]>
    </text>
    <title text="Ellenőrzött kivételek kezelése"/>
    <text>
        <![CDATA[
        Nem mindig akarunk egy ellenőrzött kivételt <i>try-catch</i> blokkba zárni. A <b>throws</b> 
		(NEM <i>throw</i>) kulcsszó használható arra, hogy egy hibát továbbadjunk egy metódusból. 
		Ilyenkor ezt annak kell kezelnie, aki meghívja a metódust.
        ]]>
    </text>
    <code><![CDATA[
        
        <font color="gray">//returns the first line of the file on the given path</font>
<br/><font color="#E65100">public</font> <font color="#999900">String</font> <font color="#ADD8E6">getFirstLine</font>(<font color="#999900">String</font> filePath) <font color="#E65100">throws</font> <font color="#999900">IOException</font> {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">Path</font> p = <font color="#999900">Paths</font>.<font color="#ADD8E6">get</font>(filePath);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">List</font>&lt;String> lines = <font color="#999900">Files</font>.<font color="#ADD8E6">readAllLines</font>(p);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">if</font>( lines.<font color="#ADD8E6">size</font>() > <font color="#F0E130">0</font>) { <font color="gray">//there is a first line
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">return</font> lines.<font color="#ADD8E6">get</font>(<font color="#F0E130">0</font>);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;} <font color="#E65100">else</font> {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">return</font> null;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>}
        
    ]]></code>
    <text>
        <![CDATA[
        Vegyük észre, hogy a <i>Files.readAllLines</i> metódus arra kényszerítene minket, hogy kezeljük a <i>IOException</i>-t (mivel a <i>Files.readAllLines</i> metódus
        a throws kulcsszóval feljebb dobja azt). De azzal, hogy a mi metódusunkat is '<i>throws IOException</i>'-ként jelöljük meg, 
		a kivételt majd a metódus hívójának kell kezelnie.
        ]]>
    </text>
    <boxed title="Throws kiírása">
        <![CDATA[
        Jó gyakorlat, hogy a <i>throws</i> kulcsszóval jelezzük az összes olyan kivételt, amelyet a metódusunk dobhat,
        még akkor is, ha ezek nem ellenőrzött kivételek. Így a hívó mindig tudni fogja, hogy milyen kivételekre számíthat.
        ]]>
    </boxed>
	<text>
		<![CDATA[
		A korábbi fejezetekben az ellenőrzött kivételekkel úgy birkóztunk meg, hogy még a főmetódusból 
		is feljebb dobtuk őket. Mivel azonban a főmetódusnál nincs feljebb, ezért ezek a kivételek valójában 
		nem lesznek kezelve, és összeomlasztják a programot. Most, hogy ismerjük a kivétel kezelést, már a 
		megfelelő módon reagálhatunk a kivételekre.
		]]>
	</text>
    <!-- try-catch-finally, Throwable, Exception, Error, RuntimeException
     throw and throws keywords -->
</resources>
