<?xml version="1.0" encoding="utf-8" standalone="no"?>
<resources>
    <chapterdata>
        <id>201</id>
        <name>A tömbök hátrányai</name>
    </chapterdata>
    <text>
        <![CDATA[
        Tanultunk a tömbökről, amelyek hasznos eszközök az adatcsoportok kezelésére, de jelentős korlátaik vannak. 
		Ebben a fejezetben látunk néhány példát ezekre a korlátokra.
        ]]>
    </text>
    <title text="Példák"/>
    <text>
        <![CDATA[
        Tegyük fel, hogy szükségünk van egy egyszerű programra, amely számokat kér a felhasználótól, és kiszámítja 
		azok összegét. Hozzunk létre egy tömböt használó megoldást!
        ]]>
    </text>
    <code><![CDATA[
        
        <font color="#E65100">public static</font> <font color="#DF7401">void</font> <font color="#ADD8E6">main</font>(<font color="#999900">String</font>[] args) {	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#DF7401">boolean</font> reading = <font color="#E65100">true</font>; <font color="gray">//szükséges változók létrehozása
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#DF7401">int</font> counter = <font color="#F0E130">0</font>;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">String</font> input = <font color="#E65100">null</font>;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">Scanner</font> scanner = <font color="#E65100">new</font> <font color="#999900">Scanner</font>(System.<font color="#ADD8E6">in</font>);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#DF7401">int</font>[] numbers = <font color="#E65100">new</font> <font color="#DF7401">int</font>[<font color="#F0E130">5</font>]; <font color="gray">//mekkora legyen a tömb?!
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">while</font>(reading) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">print</font>(<font color="#2E8B57">"Add meg a "</font> + counter + <font color="#2E8B57">". számot, vagy 'q'-t a megálláshoz: "</font>);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">try</font> {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;input = scanner.<font color="#ADD8E6">next</font>(); <font color="gray">//szám elmentése
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;numbers[counter++] = <font color="#999900">Integer</font>.<font color="#ADD8E6">parseInt</font>(input);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;} <font color="#E65100">catch</font>(<font color="#999900">NumberFormatException</font> e) { <font color="gray">//nem szám, talán 'q'?</font>
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">if</font>(<font color="#2E8B57">"q"</font>.<font color="#ADD8E6">equals</font>(input)) reading = <font color="#E65100">false</font>; <font color="gray">//'q' lett megadva, megállás</font>
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#DF7401">int</font> sum = <font color="#F0E130">0</font>; <font color="gray">//összeadás
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">for</font>(<font color="#DF7401">int</font> i: numbers) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;sum += i;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(<font color="#2E8B57">"Az összeg "</font> + sum);	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;scanner.<font color="#ADD8E6">close</font>();
<br/>}
        
    ]]></code>
    <text>
        <![CDATA[
        A kód működik, de csak akkor, ha óvatosak vagyunk. Könnyen látható, hogy kifogyunk a tömbindexekből, 
		ha megpróbálunk beírni 5-nél több számot (mert ez a tömb mérete):
        ]]>
    </text>
    <image name="array_problem"/>
    <text>
        <![CDATA[
        Hát akkor növeljük a tömb méretét valamilyen nagy egész számra, például
        <b>1000</b>-re! A felhasználó szinte biztosan nem fog 1000 számot beírni. De ez nem egy jó megoldás, 
		talán nem is megoldás, mivel:
        ]]>
    </text>
    <list>
        <![CDATA[
        <ul>
        <li>A memória nem hatékony használatát eredményezi.</li>
        <li>Még mindig előfordulhatnak hibák, ha a felhasználó úgy dönt, hogy valóban több ezer számot ír be.</li>
        <li>Ez nem egy elegáns módja a kód megírásának, ez rossz gyakorlat.</li>
        </ul>
        ]]>
    </list>
    <boxed title="Nem hatékony memória használat">
        <![CDATA[
        Ha egy 1000 egész számot tartalmazó tömböt hozunk létre, és a felhasználó csak például 3 számot ad meg, 
		akkor 997 egész szám tárolásához szükséges memóriát pazarolunk. Nem túl szörnyű, figyelembe véve a modern számítógépek 
        <i>RAM</i> mennyiségét, de mégis pazarlás.
        ]]>
    </boxed>
    <text>
        <![CDATA[
        Hatékonyabb és könnyebben használható módszerekre, implementációkra van szükségünk 
		adatok tároláshoz és kezeléshez. Ezeket nevezzük fejlett adatstruktúráknak.
        ]]>
    </text>
    <advanced title="Biztonságos megoldás tömbökkel">
        <![CDATA[
		A tömbök használhatók a fenti probléma biztonságos megoldására, csak figyelnünk kell bizonyos kivételekre. 
		Ha a tömb megtelik, akkor új, nagyobb tömböt kell létrehozni, és a régi elemeket átmásolni. 
		Ez azonban még egyszerű feladatokhoz is bonyolult kódot eredményez, és helyette a más 
		adatszerkezetek használata előnyösebb.
        ]]>
    </advanced>
    <title text="Adatstruktúra"/>
    <text>
        <![CDATA[
        Adatstruktúra lehet bármi, ami az adatokat szervezett módon tárolja (akár egy tömb is). Minden adatstruktúrának 
		megvannak a maga előnyei és hátrányai, ezért ügyelnünk kell arra, hogy a problémákhoz a megfelelő struktúrát 
		válasszuk. Egy adatstruktúrát fejlettnek nevezünk, ha a tömböknél több funkcióval bír.
        ]]>
    </text>
    <boxed title="Kollekció">
        <![CDATA[
        A fejlett adatszerkezeteket a Java-ban <b>kollekcióknak</b> nevezik. A <i>JDK-ban</i> mindegyikük megvalósítja 
		a <a href="https://docs.oracle.com/javase/7/docs/api/java/util/Collection.html">java.util.Collection</a> 
		interfészt. Ez alapvető metódusokat tartalmaz elemek hozzáadására és eltávolítására, a gyűjtemény méretének 
		lekérdezésére, stb. Ezeket minden kollekcióban használhatjuk.
        ]]>
    </boxed>
    <text>
        <![CDATA[
        A <i>JDK</i>-s kollekciók <b>generikusak</b> (azoknak, akiknek van <i>C++</i> háttere, ez a sablonok Java-s verziója). 
        Egyelőre elég annyit tudni, hogy egy generikus kollekció lehetővé teszi, hogy bármilyen típusú objektumot 
		felvegyünk bele, de a típust az objektummal együtt kell deklarálni:
        ]]>
    </text>
    <code><![CDATA[
        
        <font color="gray">//String-ek listája, egyenlőre üres</font>
<br/><font color="#999900">ArrayList</font>&lt;<font color="#999900">String</font>> strings = <font color="#E65100">new</font> <font color="#999900">ArrayList</font>&lt;>();
        
    ]]></code>
    <text>
        <![CDATA[
        Vegyük észre, hogy az elemek típusának második alkalommal történő megírása (a <i>new</i> kulcsszó után) nem szükséges, 
		a fordító ezt kitalálja helyettünk. Ezt néha <b>gyémánt operátornak</b> hívják, nevét az üres
        <i>&lt;></i> szimbólumok után kapta.
        ]]>
    </text>
    <advanced title="Generikus kód írása">
        <![CDATA[
        Generikus adatszerkezetek (vagy bármilyen generikus Java kód) írása nem könnyű feladat. Ez lesz a tárgya
        egy későbbi kurzusnak. Egyelőre a <i>JDK</i> generikus osztályait fogjuk használni, de amikor a sajátjainkat a 
		implementáljuk a kurzus feladatai során, akkor csak nem generikus, egyszerű változatok kellenek majd.
        ]]>
    </advanced>
    <text>
        <![CDATA[
        A generikus kollekciók csak más osztályokat vehetnek fel elemtípusként. Primitíveket nem fogadhatnak el! 
        Például a <i>LinkedList&lt;int></i> nem szabályos, mert az <i>int</i> primitív, nem pedig osztály.
        <p>
        Szerencsére ez nem jelent komoly problémát, hiszen a wrapper osztályokról már tanultunk a primitívek fejezetben.
        Használjuk ezeket a wrappereket elemtípusokként a primitívek helyett (<i>List&lt;Integer></i>).
        ]]>
    </text>
    <interactive instruction="Egészítsd ki az generikus listadeklarációt úgy, hogy float eleleket tároljon!">
        <data><![CDATA[
            
___&lt;<font color="#999900">Float</font>> numbers = <font color="#E65100">new</font> <font color="#999900">ArrayList</font><font color="#ADD8E6">___</font>();

        ]]></data>
        <answer place="0">ArrayList</answer>
        <answer place="0">List</answer>
        <answer place="0">Collection</answer>
        <answer place="1"><![CDATA[<>]]></answer>
        <answer place="1"><![CDATA[<Float>]]></answer>
    </interactive>
</resources>
