<?xml version="1.0" encoding="utf-8" standalone="no"?>
<resources>
    <chapterdata>
        <id>353</id>
        <name>Lambda kifejezések</name>
    </chapterdata>
    <text>
        <![CDATA[
        Mielőtt átugranánk a lambda kifejezésekre, vessünk még egy pillantást a funkcionális interfészekre, melyekről 
		az előző fejezetben szó volt.
        ]]>
    </text>
    <boxed title="Egy függvény, metódus">
        <![CDATA[
        Vegyük észre, hogy egy funkcionális interfész egy függvényt/metódust reprezentál, és ez a függvény éppen az 
		egyetlen absztrakt metódus lesz (a funckionális interfész definíciójából adódik, hogy ilyen mindig lesz).
        ]]>
    </boxed>
    <text>
        <![CDATA[
        Ilyen interfészek használatával a függvényeket <b>változóként</b> kezelhetjük. Vegyünk például egy egyszerű
        funkcionális interfészt, a <i>Runnable</i>-t, ami futtatható kódot tartalmaz a <i>run</i> metódusában.
        <br><br>
        Ez azért lesz funkcionális, mert csak egy absztrakt metódusa van, a <i>run</i>. Amit ebbe írunk, az fog 
		lefutni.
        ]]>
    </text>
    <code><![CDATA[
        
        <font color="#E65100">final</font> <font color="#999900">Runnable</font> myFunction = <font color="#E65100">new</font> <font color="#999900">Runnable</font>() {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="red">@Override</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#DF7401">void</font> <font color="#ADD8E6">run</font>() {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(<font color="#2E8B57">"Java 8"</font>);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>};
<br/><font color="gray">//átadunk egy 'függvényt' paraméterként ennek az objektumnak, ami majd futtatja azt
</font>
<br/><font color="#E65100">new</font> <font color="#999900">Thread</font>(myFunction).<font color="#ADD8E6">start</font>();
        
    ]]></code>
    <text>
        <![CDATA[
        Nos, ebben a kódban nincs semmi újdonság, ezt már a <i>Java 8</i> előtt is megtehettük. Egy anonim osztályt 
		használtunk a <i>Runnable</i> megvalósításához. Ez az a pont, ahol a 
		lambda kifejezések bejönnek a képbe. Azzla, hogy micsoda a <i>Thread</i> egyenlőre ne foglalkozz, erre egy későbbi kurzusban
		kerül sor. Egyenlőre elég annyi, hogy elfogad egy <i>Runnable</i>-t.
        ]]>
    </text>
    <title text="Mi az a lambda kifejezés?"/>
    <text>
        <![CDATA[
        A lambda kifejezés egy olyan függvény, amely helyben, <i>inline</i> van deklarálva, nagyon kompakt módon. 
		Íme a szintaxisa:
        <br><br>
        <i>(paraméterek) -> { utasítások }</i>
        ]]>
    </text>
    <boxed title="Automatikus konverzió">
        <![CDATA[
        A fordító képes a lambdákat funkcionális interfészekké alakítani, és így ez a két fogalom szorosan 
		összekapcsolódik.
        ]]>
    </boxed>
    <text>
        <![CDATA[
        Írjuk át a fenti példát úgy, hogy lambda kifejezést használjon.
        ]]>
    </text>
    <code><![CDATA[
        
        <font color="#999900">Runnable</font> myFunction = () -> { <font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(<font color="#2E8B57">"Java 8"</font>); };
<br/><font color="#E65100">new</font> <font color="#999900">Thread</font>(myFunction).<font color="#ADD8E6">start</font>();
        
    ]]></code>
    <text>
        <![CDATA[
		Látható, hogy az anonim osztály helyett egy sokkal kompaktabb és tisztább szintaxisú lambda kifejezést használtunk.
		<p>
        A zárójelek üresek, mivel a <i>Runnable</i> metódusának, a <i>run</i>-nak nincsenek paraméterei. Hasonlóan a 
		<i>if</i> blokkhoz, ha csak egy utasítás van a lambdában, akkor nincs szükség a szögletes zárójelek kiírására, 
		így a fenti példa még kompaktabbá tehető:
        ]]>
    </text>
    <code><![CDATA[
        
<font color="#999900">Runnable</font> myFunction = () -> <font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(<font color="#2E8B57">"Java 8"</font>);
<br/><font color="#E65100">new</font> <font color="#999900">Thread</font>(myFunction).<font color="#ADD8E6">start</font>();
        
    ]]></code>
    <text>
        <![CDATA[
        Innen már csak egy lépés, hogy létrehozzunk és átadjunk egy <i>Runnable</i>-t, egy nagyon rövid és lényegretörő 
		egysoros utasítással:
        ]]>
    </text>
    <code><![CDATA[
        
        <font color="#E65100">new</font> <font color="#999900">Thread</font>(() -> <font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(<font color="#2E8B57">"Java 8"</font>));
        
    ]]></code>
    <text>
        <![CDATA[
        <i>Java 8</i> előtt elképzelhetetlen volt ez a rövid és kompakt kód, amit a lambdák lehetővé tesznek.
        ]]>
    </text>
    <title text="Paraméterek lambda kifejezések"/>
    <text>
        <![CDATA[
        Nézzünk meg egy másik funkcionális interfészt a szabványos könyvtárból, a <i>Consumer</i>-t. Ez a generikus
        interfész egy paramétert vesz fel, csinál vele valamit, de nem ad vissza eredményt (tehát "elfogyasztja" a paramétert).
        ]]>
    </text>
    <boxed title="Egy paraméter esete">
        <![CDATA[
        Ha egy lambda kifejezésnek pontosan egy paramétere van, akkor nem szükséges kiírni a
        zárójelet körülötte:
        <br><br>
        <i>p -> { utasítások }</i>
        <br><br>
        Ha azonban nincsenek paraméterek, akkor <b>kell</b> üres zárójeleket írni!
        ]]>
    </boxed>
    <code><![CDATA[
        
        <font color="#999900">Consumer</font>&lt;<font color="#999900">String</font>> printer = s -> <font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(s);
<br/><font color="gray">//így lehet meghívni a Consumer-t
</font>
<br/>printer.<font color="#ADD8E6">accept</font>(<font color="#2E8B57">"Java 8"</font>);
        
    ]]></code>
    <interactive instruction="Javítsd ki a lambdát úgy, hogy a két szám összegét számolja ki!">
        <data><![CDATA[
            
(n1, n2___ -> <font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(n1 ___ n2)
            
        ]]></data>
        <answer place="0">)</answer>
        <answer place="1">+</answer>
        <default place="1">-</default>
    </interactive>
    <text>
        <![CDATA[
		Vegyünk észre itt valami érdekeset. Elég, ha csak egy azonosítót teszünk a paraméterlistába (<i>s</i>). Normál függvények esetén,
		a paraméterek típusait is ki kell írni, de lambdáknál ez nem szükséges (bár megteheted). Ez azért van, hogy
		lambdák a lehető legtömörebbek legyenek. A fordító képes kitalálni a típusokat.
        ]]>
    </text>
    <boxed title="Paraméterlista egyezés">
        <![CDATA[
        Figyelj, hogy a funkcionális interfészhez rendelt lambdának ugyanannyi paraméterrel kell rendelkeznie, mint a
        mint az adott interfész absztrakt metódusának! Ha ez nem így van, a rendszer fordítási hibát fog dobni.
        ]]>
    </boxed>
    <text>
        <![CDATA[
        Ez például <b>hibás kód</b>, mivel a <i>Runnable</i> metódusa, a <i>run</i> nem fogad el paramétereket:
        ]]>
    </text>
    <code><![CDATA[
        
<font color="gray">//a fordító hibát ad, mert a run-nak nincs paramétere!!!
</font>
<br/><font color="#E65100">new</font> <font color="#999900">Thread</font>(param -> <font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(<font color="#2E8B57">"Hello"</font>));
        
    ]]></code>
    <text>
        <![CDATA[
        Teszteljük az előzőekben látott "fogyasztót" (<i>Consumer</i>). A <i>Java 8</i>-ban a legtöbb kollekció 
		(lista, szótár, stb...) kapott egy új metódust: <i>forEach</i>.
        Ez a metódus paraméterként egy <i>Consumer</i>-t fogad, és ezt a <i>Consumer<i>-t hívja meg az adott 
		kollekció minden elemére (innen a <i>forEach</i>, azaz "mindegyikre" név).
        ]]>
    </text>
    <code><![CDATA[
        
<font color="#999900">List</font>&lt;<font color="#999900">String</font>> myList = <font color="#999900">Arrays</font>.<font color="#ADD8E6">asList</font>(<font color="#2E8B57">"s1"</font>, <font color="#2E8B57">"s2"</font>, <font color="#2E8B57">"s3"</font>);
<br/>myList.<font color="#ADD8E6">forEach</font>(s -> <font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(s));
        
    ]]></code>
    <text>
        <![CDATA[
        Ez ismét a lambdák erejét mutatja, képesek voltunk kiírni egy lista összes elemét egy 
        egysoros utasítással, for ciklus nélkül.
        ]]>
    </text>
    <title text="Lambda kifejezések visszatérési értéke"/>
    <text>
        <![CDATA[
        Ha olyan funkcionális interfészt használunk, amelynek metódusa visszatérési értékkel rendelkezik, akkor a lambdának, 
		amelyet hozzárendelünk is kell, hogy legyen visszatérési értéke, és ugyanolyan típusú objektumot kell visszaadnia!
        <p>
        Vegyük a <i>Function</i> interfészt a szabványos könyvtárból. Ennek a generikus interfésznek 2 típusparamétere van,
        és a metódusa az első típusú paramétert fogadja, és valahogyan "átalakítja" a második típusba, amit visszaad.
        ]]>
    </text>
    <code><![CDATA[
        
        <font color="#999900">Function</font>&lt;<font color="#999900">String</font>, <font color="#999900">Integer</font>> converter = s -> {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">try</font> {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">return</font> <font color="#999900">Integer</font>.<font color="#ADD8E6">parseInt</font>(s);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;} <font color="#E65100">catch</font>(<font color="#999900">NumberFormatException</font> e) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">return</font> null;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>};
        
    ]]></code>
    <text>
        <![CDATA[
		Ez az objektum <i>String</i>-et alakít számmá (vagy <i>null</i>-lá).
        Itt a szögletes zárójeleket meg kellett írnunk, mivel a lambdán belül több utasítás is van. Azonban, ha
        a tömörség kedvéért hajlandóak vagyunk elengedni a kivételkezelést, akkor ez a következőképpen írható le
        röviden:
        ]]>
    </text>
    <code><![CDATA[
        
        <font color="#999900">Function</font>&lt;<font color="#999900">String</font>, <font color="#999900">Integer</font>> converter = s -> <font color="#999900">Integer</font>.<font color="#ADD8E6">parseInt</font>(s);
        
    ]]></code>
    <text>
        <![CDATA[
        Vegyük észre, hogy ebben az esetben még a <i>return</i> kulcsszót sem kell leírnunk. Bármit is ad vissza ez az 
		egyetlen utasítás a lambda is azt fogja visszaadni!
        ]]>
    </text>
    <interactive instruction="Egészítsd ki predikátumot úgy, hogy negatív számokra adjon vissza igazat!">
        <data><![CDATA[
            
            <font color="#999900">Predicate</font>&lt;<font color="#999900">Double</font>> isNegative = d -> ___ &lt; ___;
            
        ]]></data>
        <answer place="0">d</answer>
        <answer place="1">0</answer>
        <answer place="1">0.0</answer>
    </interactive>
</resources>
