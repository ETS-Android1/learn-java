<?xml version="1.0" encoding="utf-8" standalone="no"?>
<resources>
    <chapterdata>
        <id>254</id>
        <name>Kölcsönös kizárás</name>
    </chapterdata>
    <text>
        <![CDATA[
        A kölcsönös kizárás a párhuzamos programozás egyik alapkoncepciója. Ez azt 
		jelenti, hogy a kód bizonyos részeihez (az úgynevezett <b>kritikus részekhez</b>) 
		mindig csak meghatározott számú szál (általában egy) férhet hozzá egyszerre.
        ]]>
    </text>
    <text>
        <![CDATA[
        Először is megmutatom, hogy miért van szükségünk kölcsönös kizárásra. Tegyük 
		fel, hogy növelni kell egy változó értékét 0-ról 10000-re, két szál 
		segítségével. Úgy gondolhatnánk, hogy ez egy helyes megoldás:
        ]]>
    </text>
    <code><![CDATA[
        
<font color="#E65100">static volatile</font> <font color="#DF7401">int</font> counter = <font color="#F0E130">0</font>; <font color="gray">//start at 0</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/><font color="#E65100">public static</font> <font color="#DF7401">void</font> <font color="#ADD8E6">main</font>(<font color="#999900">String</font>[] args) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">Thread</font> t1 = <font color="#E65100">new</font> <font color="#999900">Thread</font>(<font color="#E65100">new</font> R<font color="#ADD8E6">unnable</font>() {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="red">@Override</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#DF7401">void</font> <font color="#ADD8E6">run</font>() {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">for</font>(<font color="#DF7401">int</font> i=<font color="#F0E130">0</font>; i&lt;<font color="#F0E130">5000</font>; i++) counter++;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;});
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">Thread</font> t2 = <font color="#E65100">new</font> <font color="#999900">Thread</font>(<font color="#E65100">new</font> R<font color="#ADD8E6">unnable</font>() {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="red">@Override</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#DF7401">void</font> <font color="#ADD8E6">run</font>() {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">for</font>(<font color="#DF7401">int</font> i=<font color="#F0E130">0</font>; i&lt;<font color="#F0E130">5000</font>; i++) counter++;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;});
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;t1.<font color="#ADD8E6">start</font>();
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;t2.<font color="#ADD8E6">start</font>();
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">try</font> { <font color="gray">//wait
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;t1.<font color="#ADD8E6">join</font>();
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;t2.<font color="#ADD8E6">join</font>();
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;} <font color="#E65100">catch</font> (<font color="#999900">InterruptedException</font> e) {}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//both threads increased it by 5000, so it should be 10000...
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(<font color="#2E8B57">"Counter is "</font> + counter);
<br/>}
        
    ]]></code>
    <text>
        <![CDATA[
        Ha ezt a kódot futtatod, különböző eredményeket fogsz látni, de valószínűleg 
		nem 10000-et. Hogyan lehetséges ez? Összesen 10000 növelés történt, de mégsem 
		ez a végső érték. Íme egy rövid magyarázat (nevezzük a két szálat <i>t1</i>-nek 
		és <i>t2</i>-nek):
        ]]>
    </text>
    <list>
        <![CDATA[
        <ul>
        <li><i>t1</i> és <i>t2</i> nagyjából egy időben érkezik a növelő utasításhoz. 
		Tegyük fel, hogy az érték jelenleg <i>N</i>.</li>
        <li>Mindkét szál azt gondolja, hogy "az érték <i>N</i>, tehát növelem <i>N+1</i>-re".</li>
        <li>Az eredmény az, hogy gyakorlatilag 'elveszítettünk' egy növelést. Ez 
		többször is megtörténhez.</li>
        </ul>
        ]]>
    </list>
    <text>
        <![CDATA[
        Amint a kódból látható, a számláló <i>volatile</i>-nak jelölése nem elég 
		ahhoz, hogy ezt megakadájozzuk. A megoldás a kölcsönös kizárás lesz.
        ]]>
    </text>
    <boxed title="Mikor kell kölcsönös kizárás">
        <![CDATA[
        Az előző példa világossá teszi, hogy amikor egy változót több szálról írunk, 
		akkor <b>kell</b> használnunk a kölcsönös kizárást.
        Akkor is elengedhetetlen, ha egy kollekciót több szál módosít egyidejűleg.
        ]]>
    </boxed>
    <text>
        <![CDATA[
        A Java beépített kölcsönös kizárással rendelkezik. Létrehozhatunk úgynevezett 
		<b>szinkronizált blokkot</b>. Ez garantálja, hogy egy adott időpontban csak 
		egy szál tudja végrehajtani az ebben a blokkban lévő utasításokat.
        ]]>
    </text>
    <boxed title="Zár">
        <![CDATA[
        A szinkronizált blokkoknak szükségük van egy zárra (néha <b>mutexnek</b> 
		nevezik). Ez lehet bármilyen objektum. Egyszerűen fogalmazva, ez az objektum 
		számon tartja, hogy hány szál hajtja végre éppen az adott blokkot.
        ]]>
    </boxed>
    <text>
        <![CDATA[
        Fontos, hogy ugyanazt a zárat használjuk, hogy a szinkronizált blokk a várt 
		módon működjön. Javítsuk ki az előző példát egy közös zárral, amelyet mindkét 
		szál használni fog. Cseréljük ki az előző szálakat ezekre:
        ]]>
    </text>
    <code><![CDATA[
        
<font color="#999900">Object</font> lock = <font color="#E65100">new</font> <font color="#999900">Object</font>();
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;
<br/><font color="#999900">Thread</font> t1 = <font color="#E65100">new</font> <font color="#999900">Thread</font>(<font color="#E65100">new</font> <font color="#999900">Runnable</font>() {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="red">@Override</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#DF7401">void</font> <font color="#ADD8E6">run</font>() {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">for</font>(<font color="#DF7401">int</font> i=<font color="#F0E130">0</font>; i&lt;<font color="#F0E130">5000</font>; i++) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">synchronized</font> (lock) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;counter++;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>});
<br/><font color="#999900">Thread</font> t2 = <font color="#E65100">new</font> <font color="#999900">Thread</font>(<font color="#E65100">new</font> <font color="#999900">Runnable</font>() {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="red">@Override</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#DF7401">void</font> <font color="#ADD8E6">run</font>() {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">for</font>(<font color="#DF7401">int</font> i=<font color="#F0E130">0</font>; i&lt;<font color="#F0E130">5000</font>; i++)  {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">synchronized</font> (lock) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;counter++;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>});
        
    ]]></code>
    <text>
        <![CDATA[
        Az növelési utasítás mostantól <b>kritikus szakasz</b>. Fontos, hogy ne tegyük az 
		egész for ciklust szinkronizálttá, mert akkor a szálak lényegében úgy 
		viselkednének, mint egy szekvenciális program.
        <p>
        Lényeges, hogy közös zárat használtunk. Ha például valami ilyesmit csinálnánk, 
		az eredmény ugyanolyan hibás lenne, mint szinkronizált blokkok nélkül:
        ]]>
    </text>
    <code><![CDATA[
        
<font color="#999900">Thread</font> t1 = <font color="#E65100">new</font> <font color="#999900">Thread</font>(<font color="#E65100">new</font> <font color="#999900">Runnable</font>() {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="red">@Override</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#DF7401">void</font> <font color="#ADD8E6">run</font>() {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">for</font>(<font color="#DF7401">int</font> i=<font color="#F0E130">0</font>; i&lt;<font color="#F0E130">5000</font>; i++) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">synchronized</font> (<font color="#E65100">new</font> <font color="#999900">Object</font>()) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;counter++;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>});
<br/><font color="#999900">Thread</font> t2 = <font color="#E65100">new</font> <font color="#999900">Thread</font>(<font color="#E65100">new</font> <font color="#999900">Runnable</font>() {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="red">@Override</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#DF7401">void</font> <font color="#ADD8E6">run</font>() {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">for</font>(<font color="#DF7401">int</font> i=<font color="#F0E130">0</font>; i&lt;<font color="#F0E130">5000</font>; i++)  {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">synchronized</font> (<font color="#E65100">new</font> <font color="#999900">Object</font>()) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;counter++;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>});
        
    ]]>
	</code>
	<text>
	    <![CDATA[
        A hibát az okozza, hogy a szálak különböző zárakat használnak. Az egyik szál által 
		használt zár sosem tud a másik szálról. Ezért kell közös zárat használni.
        ]]>
	</text>
    <title text="Szinkronizált metódusok"/>
    <text>
        <![CDATA[
        A metódusok is megjelölhetők szinkronizáltként. Ez egyenértékű azzal, hogy a 
		metódus összes utasítását egy szinkronizált blokkba rakjuk. A kérdés csak az, 
		hogy ilyen esetekben mit használ majd zárként?
        <p>
        Kicsit átírtam az előző kódot. A számlálót most elrejtettem ebbe a <i>Counter</i> 
		osztályba, melynek a <i>increment</i> metódusát szinkronizáltnak jelöltem:
        ]]>
    </text>
    <code><![CDATA[
        
        <font color="#E65100">public class</font> <font color="#999900">Counter</font> {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">private</font> <font color="#DF7401">int</font> counter = <font color="#F0E130">0</font>;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public synchronized</font> <font color="#DF7401">void</font> <font color="#ADD8E6">increment</font>() {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;counter++;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#DF7401">int</font> <font color="#ADD8E6">getValue</font>() {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">return</font> counter;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>}
        
    ]]></code>
    <text>
        <![CDATA[
        Létrehozunk egy objektumot ebből az osztályból, és a szálak meghívják a 
		<i>increment</i> metódust:
        ]]>
    </text>
    <code><![CDATA[
        
<font color="#999900">Counter</font> counter = <font color="#E65100">new</font> <font color="#999900">Counter</font>();
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;
<br/><font color="#999900">Thread</font> t1 = <font color="#E65100">new</font> <font color="#999900">Thread</font>(<font color="#E65100">new</font> <font color="#999900">Runnable</font>() {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="red">@Override</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#DF7401">void</font> <font color="#ADD8E6">run</font>() {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">for</font>(<font color="#DF7401">int</font> i=<font color="#F0E130">0</font>; i&lt;<font color="#F0E130">5000</font>; i++) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;counter.<font color="#ADD8E6">increment</font>();
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>});
<br/><font color="#999900">Thread</font> t2 = <font color="#E65100">new</font> <font color="#999900">Thread</font>(<font color="#E65100">new</font> <font color="#999900">Runnable</font>() {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="red">@Override</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#DF7401">void</font> <font color="#ADD8E6">run</font>() {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">for</font>(<font color="#DF7401">int</font> i=<font color="#F0E130">0</font>; i&lt;<font color="#F0E130">5000</font>; i++)  {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;counter.<font color="#ADD8E6">increment</font>();
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>});
<br/>t1.<font color="#ADD8E6">start</font>();
<br/>t2.<font color="#ADD8E6">start</font>();
<br/><font color="#E65100">try</font> { <font color="gray">//wait
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;t1.<font color="#ADD8E6">join</font>();
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;t2.<font color="#ADD8E6">join</font>();
<br/>} <font color="#E65100">catch</font> (<font color="#999900">InterruptedException</font> e) {}
<br/><font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(<font color="#2E8B57">"Counter is "</font> + counter.<font color="#ADD8E6">getValue</font>());
        
    ]]></code>
    <text>
        <![CDATA[
        Helyesen működik. A használt zár maga a <b>Counter objektum</b> volt. Általában így 
		működik:
        ]]>
    </text>
    <list>
        <![CDATA[
        <ul>
        <li>Egy nem statikus, szinkronizált metódus esetében a hozzá tartozó objektumot 
		lesz zárként használva.</li>
        <li>Egy statikus, szinkronizált metódus esetében az osztály 
		<a href="https://docs.oracle.com/javase/7/docs/api/java/lang/Class.html">Class</a> objektuma</a> 
		lesz zárként használva (erről nem tanultunk).</li>
        </ul>
        ]]>
    </list>
    <text>
        <![CDATA[
        A kölcsönös kizárás beépített módja tehát a <i>synchronized</i> kulcsszóval érhető el. 
        ]]>
    </text>
    <interactive instruction="Az előző kurzuson használt metódust most több szálon fogjuk hívni. Végezd el a szükséges korrekciót, hogy a lista egységes maradjon!">
        <data><![CDATA[

<font color="#E65100">public</font> ___ <font color="#DF7401">void</font> <font color="#ADD8E6">removeFirstLast</font>(<font color="#999900">List</font>&lt;?> list) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;list.<font color="#ADD8E6">remove</font>(<font color="#F0E130">0</font>);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;list.<font color="#ADD8E6">remove</font>(list.<font color="#ADD8E6">size</font>()<font color="#F0E130">-1</font>);
<br/>}

        ]]></data>
        <answer place="0">synchronized</answer>
    </interactive>
    <title text="Szemafor"/>
    <text>
        <![CDATA[
        A szemaforok speciális objektumok, gondolhatsz rájuk úgy, mint általánosított 
		szinkronizált blokkokra.
        ]]>
    </text>
    <boxed title="Több szál beengedése">
        <![CDATA[
        Míg a szinkronizált blokkok csak egy szálat engednek be egyszerre, addig a 
		szemafor egy egész számot vesz fel létrehozáskor, és legfeljebb ennyi szálat 
		enged be a kritikus szakaszaiba.
        ]]>
    </boxed>
    <text>
        <![CDATA[
        A standard könyvtár rendelkezik egy szemafor implementációval, ez a <a href="https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/Semaphore.html">java.util.concurrent.Semaphore</a>.
        Egy kritikus szakasz indításához használjuk a <i>acquire</i> metódust, befejezéséhez pedig a <i>release</i> metódust.
        <p>
        Oldjuk meg az előző feladatot, ezúttal egy szemaforral (A számlálóhoz most egész számot 
		használok, nem a <i>Counter</i> osztályt). Ebben az esetben nem használom ki a szemafor 
		teljes erejét, mert csak egy szálat engedek be a kritikus szakaszra. Ezáltal úgy működik majd, 
		mint egy szinkronizált blokk.
        ]]>
    </text>
    <code><![CDATA[
        
        <font color="gray">/*
<br/>Ez a szemafor csak egy szálat enged be,
<br/>mint egy sima szinkronizált blokk.
<br/> */</font>
<br/><font color="#999900">Semaphore</font> sema = <font color="#E65100">new</font> <font color="#999900">Semaphore</font>(<font color="#F0E130">1</font>);
<br/>
<br/><font color="#999900">Thread</font> t1 = <font color="#E65100">new</font> <font color="#999900">Thread</font>(<font color="#E65100">new</font> <font color="#999900">Runnable</font>() {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="red">@Override</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#DF7401">void</font> <font color="#ADD8E6">run</font>() {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">for</font>(<font color="#DF7401">int</font> i=<font color="#F0E130">0</font>; i&lt;<font color="#F0E130">5000</font>; i++) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">try</font> {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;sema.<font color="#ADD8E6">acquire</font>();
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;counter++;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;} <font color="#E65100">catch</font> (<font color="#999900">InterruptedException</font> e) {}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">finally</font> {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;sema.<font color="#ADD8E6">release</font>();
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>});
<br/><font color="#999900">Thread</font> t2 = <font color="#E65100">new</font> <font color="#999900">Thread</font>(<font color="#E65100">new</font> <font color="#999900">Runnable</font>() {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="red">@Override</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#DF7401">void</font> <font color="#ADD8E6">run</font>() {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">for</font>(<font color="#DF7401">int</font> i=<font color="#F0E130">0</font>; i&lt;<font color="#F0E130">5000</font>; i++)  {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">try</font> {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;sema.<font color="#ADD8E6">acquire</font>();
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;counter++;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;} <font color="#E65100">catch</font> (<font color="#999900">InterruptedException</font> e) {}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">finally</font> {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;sema.<font color="#ADD8E6">release</font>();
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>});
        
    ]]></code>
    <text>
        <![CDATA[
        Az <i>acquire</i> hívása során figyelnünk kell a <i>InterruptedException</i>-ra. 
		Annak érdekében, hogy a szemafor mindig felszabaduljon, tegyük a <i>release</i> 
		hívást a <i>finally</i> blokkba!
        <p>
        Bár nem gyakran, de több szálat beengedő szemaforokra is szükség van néha. Egy 
		példát láthatsz, ha átnézel a kurzus <b>étkező filozófusok</b> feladatához.
        ]]>
    </text>
    <title text="Atomi műveletek"/>
    <text>
        <![CDATA[
        Egy művelet akkor atomikus, ha többszálas környezetben is biztonságosan és helyesen működik. 
		Ezeket a műveleteket előnyben részesítjük többszálú futás esetén, mivel nincs esély arra, hogy
        hogy egy másik szál bármi olyat tegyen, ami tönkreteheti az eredményt, amíg a 
		művelet be nem fejeződik.
        ]]>
    </text>
    <boxed title="Inkrementálás">
        <![CDATA[
        Ahogy az előző példákban láttuk, egy egész szám inkrementálása (1-el növelése) 
		NEM atomikus, mivel kölcsönös kizárás nélkül a két szál belezavart egymás 
		inkrementálási műveleteibe, és az eredmény hibás lett.
        ]]>
    </boxed>
    <text>
        <![CDATA[
        Gyakran van szükség primitíveken végzett atomi műveletekre, ezért a <i>JDK</i> olyan osztályokat biztosít, amelyek ezeket végzik, mint például az
        <a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicInteger.html">java.util.concurrent.atomic.AtomicInteger</a> és az
        <a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicBoolean.html">java.util.concurrent.atomic.AtomicBoolean</a>. 
		Ezeknél az osztályoknál minden metódus atomikus, és így biztonságosak a
        többszálú környezetben (nem minden primitívnek van megfelelő "<i>atomic</i>" osztálya.).
        ]]>
    </text>
    <boxed title="Atomikussá tétel">
        <![CDATA[
        A műveletek atomikussá tételéhez már megvannak az eszközeink. A <i>synchronized</i> 
		kulcsszó használható. Ez garantálja, hogy egyszerre csak egy szál végezheti el a 
		műveletet, és nem lesz interferencia.
        ]]>
    </boxed>
    <text>
        <![CDATA[
        Oldjuk meg a növelése problémát az <i>AtomicInteger</i> osztállyal, csak hogy 
		valami ilyesmit is lássunk. Ezúttal a számláló nem egy sima <i>int</i> lesz, hanem 
		ennek az atomi változata:
        ]]>
    </text>
    <code><![CDATA[
        
        <font color="#E65100">final</font> <font color="#999900">AtomicInteger</font> counter = <font color="#E65100">new</font> <font color="#999900">AtomicInteger</font>(<font color="#F0E130">0</font>);
<br/><font color="#999900">Thread</font> t1 = <font color="#E65100">new</font> <font color="#999900">Thread</font>(<font color="#E65100">new</font> <font color="#999900">Runnable</font>() {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="red">@Override</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#DF7401">void</font> <font color="#ADD8E6">run</font>() {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">for</font>(<font color="#DF7401">int</font> i=<font color="#F0E130">0</font>; i&lt;<font color="#F0E130">5000</font>; i++) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//getAndIncrement is equivalent to the ++ operation
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;counter.<font color="#ADD8E6">getAndIncrement</font>();
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>});
<br/><font color="#999900">Thread</font> t2 = <font color="#E65100">new</font> <font color="#999900">Thread</font>(<font color="#E65100">new</font> <font color="#999900">Runnable</font>() {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="red">@Override</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#DF7401">void</font> <font color="#ADD8E6">run</font>() {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">for</font>(<font color="#DF7401">int</font> i=<font color="#F0E130">0</font>; i&lt;<font color="#F0E130">5000</font>; i++)  {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//getAndIncrement is equivalent to the ++ operation
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;counter.<font color="#ADD8E6">getAndIncrement</font>();
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>});
        
    ]]></code>
    <text>
        <![CDATA[
        Nagyon hasonló a szinkronizált blokkokkal való megoldáshoz, csak most az <i>AtomicInteger</i> osztály gondoskodik erről,
        és meg tudjuk hívni a <i>getAndIncrement</i> szinkronizált metódust. Ez hasonlóan működik, mint a megoldás az egyedi <i>Counter</i>-ünkkel. 
		Az alapvetően egy egyszerű atomi egész szám osztály volt, csak az inkrementáló metódussal.
        ]]>
    </text>
    <interactive instruction="Hozz létre egy boolean változót atomi műveletekkel, majd a szálban állítsd az értékét false-ra!">
        <data><![CDATA[

___ condition = <font color="#E65100">new</font> <font color="#ADD8E6">___</font>(true);
<br/><font color="#E65100">new</font> <font color="#999900">Thread</font>(<font color="#E65100">new</font> <font color="#999900">Runnable</font>() {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="red">@Override</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#DF7401">void</font> <font color="#ADD8E6">run</font>() {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//Some long operation here...
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;condition.<font color="#ADD8E6">set</font>(___);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>}).<font color="#ADD8E6">start</font>();

        ]]></data>
        <answer place="0">AtomicBoolean</answer>
        <answer place="1">AtomicBoolean</answer>
        <answer place="2">false</answer>
    </interactive>

    <!-- keywords: synchronized, semaphores, atomic  -->

</resources>
