<?xml version="1.0" encoding="utf-8" standalone="no"?>
<resources>
    <chapterdata>
        <id>152</id>
        <name>Overload és konstruktorok</name>
    </chapterdata>
    <title text="Overload"/>
    <text>
        <![CDATA[
        Az overload ("túltöltés") lehetővé teszi, hogy különböző metódusokat hozzunk létre, amelyeknek <b>egyezik a nevük</b>. 
		De hogyan különbözteti meg a Java a ezeket a metódusokat? Nos, különböző paraméterekkel kell rendelkezniük, és ez alapján lehet megmondani, hogy melyik
        meghívásra kerül közülük!
        ]]>
    </text>
    <boxed title="Statikus polimorfizmus">
        <![CDATA[
        A overload-ot néha statikus polimorfizmusnak is nevezik (a polimorfizmus <b>többalakúságot</b> jelent). Polimorfizmus, mivel több olyan metódus is létezhet, amelyeknek a
        azonos a nevük. Statikus, mert a fordításkor már ismert, hogy ezek közül melyik metódus hívódik meg (a paraméterek alapján).
        ]]>
    </boxed>
    <code><![CDATA[
        
        <font color="#E65100">public class</font> <font color="#999900">Arithmetic</font> {
<br/>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#DF7401">double</font> <font color="#ADD8E6">add</font>(<font color="#DF7401">int</font> num1, <font color="#DF7401">int</font> num2) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">return</font> num1 + num2;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#DF7401">double</font> <font color="#ADD8E6">add</font>(<font color="#DF7401">double</font> num1, <font color="#DF7401">double</font> num2) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">return</font> num1 + num2;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>}
        
    ]]></code>
    <text>
        <![CDATA[
        Mint látható, ennek az osztálynak két <i>add</i> metódusa van, de az egyik egész számokat, a <i>double</i> paramétereket használ. 
		Itt van, hogyan használhatjuk őket:
        ]]>
    </text>
    <code><![CDATA[
        
        <font color="#E65100">public static</font> <font color="#DF7401">void</font> <font color="#ADD8E6">main</font>(<font color="#999900">String</font>[] args) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">Arithmetic</font> a = <font color="#E65100">new</font> <font color="#999900">Arithmetic</font>(); <font color="gray">//create the object
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(a.<font color="#ADD8E6">add</font>(<font color="#F0E130">1</font>, <font color="#F0E130">3</font>)); <font color="gray">//uses the integer add method
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(a.<font color="#ADD8E6">add</font>(<font color="#F0E130">3.14</font>, <font color="#F0E130">1.22</font>)); <font color="gray">//uses the double add method
</font>
<br/>}
        
    ]]></code>
    <advanced title="Különbség a visszatérési értékben">
        <![CDATA[
        Nem tudunk egy metódust overload-olni úgy, hogy csak a visszatérési típust változtatjuk meg! Ha beillesztenénk egy új <i>add</i> metódust
        az előző példába két egész szám paraméterrel, de <i>int</i> visszatérési típussal <i>double</i> helyett, akkor ez 
        fordítási hibát okozna (mivel a két metódus közt csak a visszatérési típus lenne a különbség).
        <p>
        A visszatérési típus megváltoztatása azonban megengedett, ha a paramétereket is megváltoztatjuk.
        ]]>
    </advanced>
    <text>
        <![CDATA[
        A overload-olás oka meglehetősen egyszerű. Lehetővé teszi, hogy egy metódusnevet használjunk hasonló feladatok elvégzésére (
        mint például egész számok vagy páros számok összeadása, mint korábban láttuk), ahelyett, hogy az osztályt minden feladathoz más-más névvel zsúfolnánk tele.
        ]]>
    </text>
    <interactive instruction="Egészítsd ki a metódus deklarációját úgy, hogy az overload-olja a másik metódust!">
        <data><![CDATA[

<font color="#DF7401">void</font> <font color="#ADD8E6">setProperties</font>(<font color="#DF7401">int</font> id) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">this</font>.<font color="#ADD8E6">id</font> = id;
<br/>}
<br/>
<br/><font color="#DF7401">void</font> <font color="#ADD8E6">___</font>(<font color="#DF7401">int</font> id, <font color="#999900">String</font> activityName) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">this</font>.<font color="#ADD8E6">id</font> = id;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">this</font>.<font color="#ADD8E6">activityName</font> = activityName;
<br/>}

        ]]></data>
        <answer place="0">setProperties</answer>
    </interactive>
    <title text="Konstruktorok"/>
    <text>
        <![CDATA[
        A konstruktorok objektumok létrehozására szolgálnak (ez a <b>new</b> kulcsszó után következnek). Arra használjuk őket, 
		hogy az objektum tagjainak kezdeti értéket adjunk.
        ]]>
    </text>
    <boxed title="Elnevezési szabály">
        <![CDATA[
        A konstruktorok nevének meg kell egyeznie az osztály nevével. Ha például az osztály neve <i>Data</i>, akkor a konstruktoroknak is 
		ez kell, hogy legyen a neve.
        ]]>
    </boxed>
    <text>
        <![CDATA[
        Ha nem írunk konstruktort az osztályba, a Java létrehoz egyet helyettünk. Ennek nem lesznek paraméterei, és
        <b>alapértelmezett konstruktornak</b> nevezzük (az objektum létrehozásán kívül semmi mást nem csinál). Ez az, amit mi
        használtunk az előző példákban objektumok létrehozására!
        ]]>
    </text>
    <code><![CDATA[
        
        <font color="#E65100">public class</font> <font color="#999900">Animal</font> {
<br/>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">String</font> species;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#DF7401">int</font> age;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">/*
<br/>	&nbsp;&nbsp;&nbsp;&nbsp; Constructor with 2 parameters, sets the values of both members.
<br/>	&nbsp;&nbsp;&nbsp;&nbsp; */</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#999900">Animal</font>(<font color="#999900">String</font> species, <font color="#DF7401">int</font> age) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//the this keyword is used to reference members
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">this</font>.<font color="#ADD8E6">species</font> = species;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">this</font>.<font color="#ADD8E6">age</font> = age;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">/*
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;Constructor with 1 parameter, defaults the value of
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;'age' to 0.
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;*/</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#999900">Animal</font>(<font color="#999900">String</font> species) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">this</font>.<font color="#ADD8E6">species</font> = species;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#DF7401">void</font> <font color="#ADD8E6">printData</font>() {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(<font color="#2E8B57">"Species: "</font> + species +
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#2E8B57">", age: "</font> + age);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>}
        
    ]]></code>
    <text>
        <![CDATA[
        Láthatjuk, hogy az overload itt is működik, lehetővé teszi, hogy különböző konstruktoraink legyenek (ez fontos, mert minden 
		konstruktornak azonos neve kell, hogy legyen). Most már többféleképpen is létrehozhatunk objektumokat:
        ]]>
    </text>
    <code><![CDATA[
        
        <font color="#E65100">public static</font> <font color="#DF7401">void</font> <font color="#ADD8E6">main</font>(<font color="#999900">String</font>[] args) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">Animal</font> parrot = <font color="#E65100">new</font> <font color="#999900">Animal</font>(<font color="#2E8B57">"Parrot"</font>, <font color="#F0E130">21</font>);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;parrot.<font color="#ADD8E6">printData</font>();
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">Animal</font> bear = <font color="#E65100">new</font> <font color="#999900">Animal</font>(<font color="#2E8B57">"Bear"</font>); <font color="gray">//age is defaulted to 0
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;bear.<font color="#ADD8E6">printData</font>();
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">/*
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;This is not allowed now! See the next section for the reason.
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;Animal animal = new Animal();
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;*/</font>
<br/>}
        
    ]]></code>
    <text>
        <![CDATA[
        Amikor létrehozzuk a saját konstruktorainkat, az alapértelmezett már nem fog létrejönni! Ezért van az, hogy a kommentált kód a
        példában nem megengedett. Ha szeretnénk egy paraméterek nélküli konstruktort is a többi mellé, akkor azt nekünk kell létrehoznunk.
        ]]>
    </text>
    <interactive instruction="Egészítsd ki a kontstruktort!">
        <data><![CDATA[

<font color="#E65100">public</font> <font color="#E65100">class</font> <font color="#999900">Activity</font> {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#DF7401">int</font> id = <font color="#F0E130">0</font>;
<br/>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#ADD8E6">___</font>(<font color="#DF7401">int</font> id) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;___.<font color="#ADD8E6">id</font> = id;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>}

        ]]></data>
        <answer place="0">Activity</answer>
        <answer place="1">this</answer>
    </interactive>
    <title text="Egységbe zárás, láthatóság"/>
    <text>
        <![CDATA[
        Az <b>egységbe zárás</b> az OOP egyik fontos alapelve. Ez azt jelenti, hogy csak annyit mutatunk meg a
        osztályainkból, amennyit szükséges (gyakran "interfésznek" nevezik), a többit ("megvalósítás") elrejtjük.
        <br><br>
        Miért van ez így? Két fő okból:
        ]]>
    </text>
    <list>
        <![CDATA[
        <ul>
        <li><u>Biztonság</u>: azok, akik az osztályt használják, csak azt látják, amit használni KELL. Például nem lesznek képesek megváltoztatni a
        olyan tagértékeket, amelyek megváltoztatásával hibás állapotba hozhatnák az objektumot.</li>
        <li><u>Egyszerűség</u>: az osztály megvalósítása lehet összetett. Annak a programozónak, aki később használja ezt az osztályt, nem
        kell látnia és foglalkoznia vele, mert el van rejtve.</li>
        </ul>
        ]]>
    </list>
    <boxed title="Egységbe zárás Java-ban">
        <![CDATA[
        A Java-ban a kapszulázást <b>láthatósági fokozatokkal</b> valósítják meg. Ezekből 4 van, <b>public,
        protected, private és package private (alapértelmezett)</b>. Illusztrálom őket néhány példával:
        ]]>
    </boxed>
    <title text="Publikus láthatóság"/>
    <text>
        <![CDATA[
        A <b>public</b> jelölésű metódusok és tagok mindenhonnan láthatóak és hivatkozhatóak lesznek. Ez azt jelenti, hogy használhatjuk 
		őket az osztályon belülről, kívülről, vagy akár más csomagokból is.
        ]]>
    </text>
    <code><![CDATA[
        
         <font color="gray">/*
<br/> Represents a rational number (numerator/denominator).
<br/> */</font>
<br/><font color="#E65100">public class</font> <font color="#999900">Rational</font> {
<br/>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#DF7401">int</font> numerator;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#DF7401">int</font> denominator;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#999900">Rational</font>(<font color="#DF7401">int</font> numerator, <font color="#DF7401">int</font> denominator) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">this</font>.<font color="#ADD8E6">numerator</font> = numerator;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">this</font>.<font color="#ADD8E6">denominator</font> = denominator;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">/*
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;This constructor basically creates an 'integer'.
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;*/</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#999900">Rational</font>(<font color="#DF7401">int</font> numerator) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">this</font>.<font color="#ADD8E6">numerator</font> = numerator;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">this</font>.<font color="#ADD8E6">denominator</font> = <font color="#F0E130">1</font>;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">/*
<br/>	&nbsp;&nbsp;&nbsp;&nbsp; Returns the value of the rational as a double.
<br/>	&nbsp;&nbsp;&nbsp;&nbsp; */</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#DF7401">double</font> <font color="#ADD8E6">asDouble</font>() {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray<font color="#2E8B57">">//needed because '</font>integer division'
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#DF7401">double</font> dNumerator = numerator;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">return</font> dNumerator/denominator;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>}
        
    ]]></code>
    <text>
        <![CDATA[
        Ebben az osztályban minden nyilvános, így egy másik osztályban (akár egy másik csomagban) is használhatjuk őket,
        például a main metódusban (a main metódus egy másik osztályban van):
        ]]>
    </text>
    <code><![CDATA[
        
<font color="#E65100">public static</font> <font color="#DF7401">void</font> <font color="#ADD8E6">main</font>(<font color="#999900">String</font>[] args) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">Rational</font> r1 = <font color="#E65100">new</font> <font color="#999900">Rational</font>(<font color="#F0E130">3</font>, <font color="#F0E130">4</font>); <font color="gray">//represents 3/4
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(r1.<font color="#ADD8E6">asDouble</font>()); <font color="gray">//will print 0.75
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;r1.<font color="#ADD8E6">numerator</font> = <font color="#F0E130">2</font>; <font color="gray">//can also change member values
</font>
<br/>}
        
    ]]></code>
    <boxed title="Publikus osztályok">
        <![CDATA[
        Az osztályok is jelölhetők nyilvánosnak, ahogyan ez az előző példákban is látható. Egy nyilvános osztály látható és 
        importálható lesz <b>minden csomagba</b>. Azok az osztályok, amiket nem jelölünk publikusnak, csak a saját csomagjukban lesznek 
		használhatóak.
        ]]>
    </boxed>
    <title text="Privát láthatóság"/>
    <text>
        <![CDATA[
        A <b>private</b> jelzésű metódusok és tagok csak az osztályon belül lesznek láthatóak. Nem lehet rájuk hivatkozni, vagy meghívni őket a
        más osztályból!
        <p>
        Az előbb látott <i>Rational</i> osztállyal a következő problémás helyzetet hozhatjuk létre:
        ]]>
    </text>
    <code><![CDATA[
        
        <font color="#999900">Rational</font> r1 = <font color="#E65100">new</font> <font color="#999900">Rational</font>(<font color="#F0E130">3</font>, <font color="#F0E130">4</font>); <font color="gray">//represents 3/4
</font>
<br/><font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(r1.<font color="#ADD8E6">asDouble</font>()); <font color="gray">//will print 0.75
</font>
<br/>
<br/>r1.<font color="#ADD8E6">denominator</font> = <font color="#F0E130">0</font>;
<br/><font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(r1.<font color="#ADD8E6">asDouble</font>()); <font color="gray">//problem, division by 0</font>
        
    ]]></code>
    <text>
        <![CDATA[
        A privát láthatósággal megakadályozhatjuk, hogy a <i>denominator</i> (nevező) értéke 0 legyen. Ha már itt tartunk,
        a <i>numerator</i> (számláló) láthatóságát is állítsuk privátra, mivel ez jó szokás:
        ]]>
    </text>
    <code><![CDATA[
        
<font color="gray">/*
<br/> Represents a rational number (numerator/denominator).
<br/> */</font>
<br/><font color="#E65100">public class</font> <font color="#999900">Rational</font> {
<br/>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">private</font> <font color="#DF7401">int</font> numerator;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">private</font> <font color="#DF7401">int</font> denominator;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#999900">Rational</font>(<font color="#DF7401">int</font> numerator, <font color="#DF7401">int</font> denominator) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">this</font>.<font color="#ADD8E6">numerator</font> = numerator;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#ADD8E6">setDenominator</font>(denominator); <font color="gray">this method will take care of <font color="#F0E130">0</font>, see below</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">/*
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;This constructor basically creates an 'integer'.
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;*/</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#999900">Rational</font>(<font color="#DF7401">int</font> numerator) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">this</font>.<font color="#ADD8E6">numerator</font> = numerator;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">this</font>.<font color="#ADD8E6">denominator</font> = <font color="#F0E130">1</font>;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">/*
<br/>	&nbsp;&nbsp;&nbsp;&nbsp; Returns the value of the rational as a double.
<br/>	&nbsp;&nbsp;&nbsp;&nbsp; */</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#DF7401">double</font> <font color="#ADD8E6">asDouble</font>() {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray<font color="#2E8B57">">//needed because '</font>integer division'
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#DF7401">double</font> dNumerator = numerator;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">return</font> dNumerator/denominator;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//getter for the numerator
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#DF7401">int</font> <font color="#ADD8E6">getNumerator</font>() {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">return</font> numerator;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//setter for the numerator
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#DF7401">void</font> <font color="#ADD8E6">setNumerator</font>(<font color="#DF7401">int</font> numerator) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">this</font>.<font color="#ADD8E6">numerator</font> = numerator;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//getter for the denominator
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#DF7401">int</font> <font color="#ADD8E6">getDenominator</font>() {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">return</font> denominator;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//setter for the denominator
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#DF7401">void</font> <font color="#ADD8E6">setDenominator</font>(<font color="#DF7401">int</font> denominator) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">if</font>(denominator == <font color="#F0E130">0</font>) { <font color="gray">//0 is not allowed, set to 1 instead
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;this.<font color="#ADD8E6">denominator</font> = <font color="#F0E130">1</font>;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;} <font color="#E65100">else</font> {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">this</font>.<font color="#ADD8E6">denominator</font> = denominator;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>}
        
    ]]></code>
    <boxed title="Getter-ek és setter-ek">
        <![CDATA[
        Azokat a metódusokat, amelyek egyszerűen csak rejtett tagokat adnak vissza, <b>getter-eknek</b> nevezzük. Azok a metódusok, 
		amelyek új értéket állítanak be egy privát tagnak (esetleg előtte elvégeznek néhány ellenőrzést), a <b>setterek</b>. 
		Szokás szerint ennek megfelelően nevezzük el őket. 
		<br><br>
		A nevezőt tehát elrejtettük, és csak getter és setter segítségével férhetünk hozzá kívülről. A setter soha nem fogja megengedni, 
		hogy a nevező 0 legyen. Ezzel megakadájoztuk, hogy az objektum hibás állapotba kerüljön.
        ]]>
    </boxed>
    <text>
        <![CDATA[
        Láthatjuk, hogy a konstruktor is kapott egy frissítést, most már a setter-t használja, hogy megakadályozza a 0 nevezőt.
        Most már nem tudjuk a nevezőt 0-ra állítani, így <b>az objektum integritása</b> biztosított:
        ]]>
    </text>
    <image name="not_visible"/>
    <text>
        <![CDATA[
        Ehelyett az osztályon kívül csak a setterhez van hozzáférésünk, mivel az nyilvános:
        ]]>
    </text>
    <code><![CDATA[
        
        <font color="#999900">Rational</font> r1 = <font color="#E65100">new</font> <font color="#999900">Rational</font>(<font color="#F0E130">3</font>, <font color="#F0E130">4</font>); <font color="gray">//represents 3/4
</font>
<br/><font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(r1.<font color="#ADD8E6">asDouble</font>()); <font color="gray">//will print 0.75
</font>
<br/>
<br/>r1.<font color="#ADD8E6">setDenominator</font>(<font color="#F0E130">0</font>); <font color="gray">//will be set to 1 instead
</font>
<br/><font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(r1.<font color="#ADD8E6">asDouble</font>()); <font color="gray">//no problem, will print 3.0</font>
        
    ]]></code>
    <text>
        <![CDATA[
        A <i>public</i>-tól eltérően a <i>private</i>-et nem használhatjuk osztályok jelölésére, csak metódusok és tagok jelölésére!
        ]]>
    </text>
    <title text="Alap láthatóság"/>
    <text>
        <![CDATA[
        Ha nem írunk semmilyen láthatóságot egy osztály tagja vagy metódusa elé, akkor az <i>alap láthatóságú</i> lesz.
        (más néven <b>csomag-privát</b>). Vegyük észre, hogy az összes korábbi fejezetbeli példák ilyenek voltak.
        <p>
        Könnyű kitalálni, hogy valami, ami csomag-privát, az csak ugyanazon a csomagon belül lesz látható.
        ]]>
    </text>
    <boxed title="Csomag privát osztályok">
        <![CDATA[
        Az osztályok is lehetnek alap láthatóságúak. Ha nem írjuk a <i>public</i> módosítót a nevük elé, akkor
        csak ugyanabból a csomagból lesznek láthatóak (nem importálhatók és nem használhatók egy másik csomagban).
        ]]>
    </boxed>
    <title text="Védett láthatóság"/>
    <text>
        <![CDATA[
        Az utolsó láthatósági típus, a védett (<b>protected</b>), hasonló az alapértelmezett láthatósághoz. A
        védettnek jelölt tagok és metódusok csak ugyanabban a csomagban ÉS az <b>alosztályokban</b> (amelyek különböző csomagokban is lehetnek) 
		lesznek láthatóak.
        <p>
        A következő fejezetben lesz részletezve, hogy mit jelent az alosztály. Az osztályok nem jelölhetők védettnek.
        ]]>
    </text>
    <title text="Összegzés"/>
    <text>
        <![CDATA[
        Összefoglalva, 4 láthatósági típus létezik. Itt vannak, a legszigorúbbtól a legkevésbé szigorúig:
        ]]>
    </text>
    <list>
        <![CDATA[
        <ul>
        <li>Privát (private).</li>
        <li>Alap, vagy csomag-privát (osztályokra is használható).</li>
        <li>Védett (protected).</li>
        <li>Nyilvános, azaz public (osztályokra is használható).</li>
        </ul>
        ]]>
    </list>
    <interactive instruction="Legyen úgy, hogy az első változó csak az osztályon belül látható, de a második mindenhol látható!">
        <data><![CDATA[

___ <font color="#999900">String</font> sensitiveData;
<br/>___ <font color="#999900">Date</font> timeOfCreation;

        ]]></data>
        <answer place="0">private</answer>
        <answer place="1">public</answer>
    </interactive>

    <!-- visibility (why?), class visibility
    overloading (why, how, examples)
    constructors (how ,default, overloading)-->
</resources>
