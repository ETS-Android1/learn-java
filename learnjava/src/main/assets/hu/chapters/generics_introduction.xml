<?xml version="1.0" encoding="utf-8" standalone="no"?>
<resources>
    <chapterdata>
        <id>301</id>
        <name>Bevezetés a generikus programozásba</name>
    </chapterdata>
    <text>
        <![CDATA[
        Az előző kurzusokban néhányszor már szerepelt generikus kód, például az adatszerkezetekről szóló kurzuson. 
		Ebben a kurzusban azt fogjuk megtanulni, hogy miként lehet ilyen kódot készíteni.
        ]]>
    </text>
    <title text="Definíció"/>
    <text>
        <![CDATA[
        A generikus (általános) osztály egy sablon vagy tervrajz a hagyományos osztályok létrehozásához. Ezek <b>típusparamétereket</b> 
		vehetnek fel, és ennek megfelelően viselkednek.
        ]]>
    </text>
    <boxed title="Hasonlóság">
        <![CDATA[
        Vegyük észre, hogy ez hasonló ahhoz, ahogyan az osztályok alapvetően tervrajzok az objektumok létrehozásához. Egy 
		generikus osztály egy absztraktabb fogalom, de ugyanúgy egy tervrajz, csak nem objektumokhoz, hanem osztályokhoz.
        ]]>
    </boxed>
    <text>
        <![CDATA[
        Más programnyelveken ezt a funkciót template-nek, azaz sablonoknak nevezik (például <i>C++</i>-ban).
        ]]>
    </text>
    <title text="Miért van erre szükség?"/>
    <text>
        <![CDATA[
        Vegyünk egy egyszerű példát, ahol szükségünk van egy osztályra, amely egy <i>String</i>-et írat ki a konzolra.
        ]]>
    </text>
    <code><![CDATA[
        
          <font color="#E65100">public</font> <font color="#E65100">class</font> <font color="#999900">Printer</font> {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">private</font> <font color="#999900">String</font> text;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#999900">Printer</font>(<font color="#999900">String</font> text) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">this</font>.<font color="#ADD8E6">text</font> = text;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#DF7401">void</font> <font color="#ADD8E6">print</font>() {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(text);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>}
        
    ]]></code>
    <text>
        <![CDATA[
        Elég egyszerű. De mi van akkor, ha ki kell bővítenünk ennek az osztálynak a funkcionalitását, hogy ne csak a 
		<i>String</i> típust támogassa, hanem a mondjuk egész számokat, páros számokat, és így tovább.
        ]]>
    </text>
    <boxed title="Több osztály felvétele">
        <![CDATA[
        A legegyszerűbb, de valószínűleg a legrosszabb ötlet az, hogy létrehozzuk a <i>Printer</i> osztályt minden egyes 
		típushoz, amelyet támogatni szeretnénk. A probléma ezzel a megközelítéssel az, hogy rengeteg duplikált kódot generál. 
		Sok osztályunk lesz, amelyek mindegyike alapvetően ugyanazt csinálja.
        ]]>
    </boxed>
    <text>
        <![CDATA[
        A generikus kód <b>nem volt mindig a Java része</b>, csak az 5. verzióban került bele. Hogyan működtek azelőtt az olyan 
		osztályok, amelyek most már generikusak, mint például a listák? A <i>Object</i> alaposztály használatával. Ezt az ötletet 
		felhasználva megírhatjuk a saját <i>Printer</i>-t is (felhasználva a <i>toString</i> metódust):
        ]]>
    </text>
    <code><![CDATA[
        
<font color="#E65100">public</font> <font color="#E65100">class</font> <font color="#999900">Printer</font> {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">private</font> <font color="#999900">Object</font> object;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#999900">Printer</font>(<font color="#999900">Object</font> object) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">this</font>.<font color="#ADD8E6">object</font> = object;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#DF7401">void</font> <font color="#ADD8E6">print</font>() {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(object.<font color="#ADD8E6">toString</font>());
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#999900">Object</font> <font color="#ADD8E6">getPrintObject</font>() {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">return</font> object;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>}
<br/>
        
    ]]></code>
    <text>
        <![CDATA[
        Nem rossz megoldás, ez a <i>Printer</i> bármilyen objektummal működik. De még mindig van néhány nemkívánatos
        tulajdonsága. Például a típuskonverzió (cast) szükségessége bizonyos esetekben:
        ]]>
    </text>
    <code><![CDATA[
        
        <font color="#999900">Printer</font> p = <font color="#E65100">new</font> <font color="#999900">Printer</font>(<font color="#2E8B57">"text"</font>);
<br/>p.<font color="#ADD8E6">print</font>();
<br/><font color="gray">//muszály explicit módon konvertálni, ez veszélyes lehet</font>
<br/><font color="#999900">String</font> text = (<font color="#999900">String</font>)p.<font color="#ADD8E6">getPrintObject</font>();
        
    ]]></code>
    <text>
        <![CDATA[
        Ez egy lefelé irányuló konverzió (downcast) és ezért veszélyes művelet. Nincs fordítási idejű figyelmeztetés, 
		hanem a program váratlanul, futásidőben fog összeomlani:
        ]]>
    </text>
    <code><![CDATA[
        
        <font color="gray">/**
<br/> * Később ugyanabban a programban...
<br/> * elfelejtettük az eredeti típust, és
<br/> * egész számra próbálunk konvertálni.
<br/> */</font>
<br/><font color="#DF7401">int</font> number = (<font color="#DF7401">int</font>)p.<font color="#ADD8E6">getPrintObject</font>();
        
    ]]></code>
    <text>
        <![CDATA[
        Ez egy csúnya <i>ClassCastException</i>-t eredményez, amely futásidőben dobódik.
        ]]>
    </text>
    <boxed title="A fordítási hiba jobb">
        <![CDATA[
        Egy fordítási idejű hibát mindig könnyebb elhárítani, mint egy futásidejűt. Ezért a programozók
        a fenti kódpéldához hasonló hibákat a lehető leghamarabb látni szeretnék, azaz már fordításkor. 
		A generikus programozással ez lehetséges.
        ]]>
    </boxed>
    <text>
        <![CDATA[
        Természetesen ezt a kódot a <b>instanceof</b> operátor használatával is biztonságossá tehetnénk, de 
		ez megint csak feleslegesen sok kódot eredményezne. A generikus kód használata az ideális megoldás.
        ]]>
    </text>
</resources>
