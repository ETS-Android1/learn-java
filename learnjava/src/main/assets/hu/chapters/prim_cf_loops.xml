<?xml version="1.0" encoding="utf-8" standalone="no"?>
<!--Belongs to course 'Primitives, control flow and I/O' --><resources>
    <chapterdata>
        <id>103</id>
        <name>Vezérlés: ciklusok</name>
    </chapterdata>
    <text>
        <![CDATA[
        Sokszor előfordul, hogy bizonyos utasításokat többször is szeretnénk futtatni.
        Ilyenkor érdemes <b>ciklusokat</b> használni. Vegyünk egy példát.
        ]]>
    </text>
    <boxed title="Példa">
        <![CDATA[
        Szeretném kiíratni az első 10 természetes számot a konzolra, mindegyiket egy új sorba.
        ]]>
    </boxed>
    <text>
        <![CDATA[
        Az ehhez használt kiírató utasítást már ismerjük, ezért a feladatot a következőképpen tudnánk
        elvégezni:
        ]]>
    </text>
    <code><![CDATA[
        
         <font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(<font color="#F0E130">0</font>);
<br/><font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(<font color="#F0E130">1</font>);
<br/><font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(<font color="#F0E130">2</font>);
<br/><font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(<font color="#F0E130">3</font>);
<br/><font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(<font color="#F0E130">4</font>);
<br/><font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(<font color="#F0E130">5</font>);
<br/><font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(<font color="#F0E130">6</font>);
<br/><font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(<font color="#F0E130">7</font>);
<br/><font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(<font color="#F0E130">8</font>);
<br/><font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(<font color="#F0E130">9</font>);
        
    ]]></code>
    <text>
        <![CDATA[
        Az ilyen kód azonban nem elegáns, és jóval hosszabb mint kellene. Érdemes megismerni a
        <b>ciklusokat</b>, mert az ehhez hasonló feladatok megoldását megkönnyítik, és sok olyan
        probléma is van, ahol elengedhetetlenek.
        ]]>
    </text>
    <title text="For ciklus"/>
    <text>
        <![CDATA[
        A <i>for</i> ciklus segítségével utasítás blokkokat tudunk többször futtatni. Olyankor célszerű
        a használata, amikor előre ismerjük, hogy hányszor szeretnénk futtatni a kód blokkot. Mivel az
        előző példára ez igaz (10 ismétlés), ezért a <i>for</i> ciklus használata célszerű.
        <br><br>
        Itt látható a <i>for</i> ciklusos megoldás:
        ]]>
    </text>
    <code><![CDATA[
        
<font color="#E65100">for</font>(<font color="#DF7401">int </font>i=<font color="#F0E130">0</font>; i&lt;<font color="#F0E130">10</font>; i++) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(i);
<br/>}
        
    ]]></code>
    <text>
        <![CDATA[
        Látható hogy egy ilyen ciklus írásához három dolgot "kell" megadni, pontosvesszővel elválasztva:
        ]]>
    </text>
    <list>
        <![CDATA[
        <ul>
        <li> Az <b>iterátor változót</b> (<i>'int i = 0</i>).
        Ez a változó csak a cikluson belül elérhető.</li>
        <li> A <b>megállási feltételt</b> (<i>i < 10</i>). Amíg ez a feltétel igaz, addig a ciklus
        ismétlődik. Gyakran az iterátor változóra adunk meg feltételt (ahogy a példában is).</li>
        <li>Az <b>iterátor változó frissítését</b>, ami minden ismétlés után futni fog. Ez azt a célt szolgálja, hogy a megállási feltétel
        valamennyi ismétlés után hamissá váljon.</li>
        </ul>
        ]]>
    </list>
    <boxed title="i++, i--">
        <![CDATA[
        A <b>++</b> operátor újdonság, azonban a használata elég egyszerű. Az <i>int</i> típusú változókon
        lehet használni és az értéküket eggyel meg fogja növelni (<b>inkrementálás</b>). Az <b>i++</b> lényegében csak
        egy rövidítése az <i>i = i + 1</i> utasításnak.
        <br><br>
        Hasonlóképpen működik a <b>--</b> operátor, ami eggyel csökkenti (dekrementálja) a változó
        értékét.
        ]]>
    </boxed>
    <text>
        <![CDATA[
        Szokás az iterátor változót <i>i</i>-nek nevezni, vagy ha ez a név foglalt lenne, akkor
        az ABC rákövetkező betűivel.
        ]]>
    </text>
    <advanced title="Opcionális komponensek">
        <![CDATA[
        Meglepő módon a for ciklus egyik fent felsorol komponensét sem kell megadni. Ha például nem adjuk meg a
        megállási feltételt, akkor a ciklus nem fog megállni. A pontosvesszőket azonban így is ki kell írni:
        <br><br>
        <i>for(int j=-3 ; ; j++) { ... }</i>
        ]]>
    </advanced>
    <interactive instruction="Egészítsd ki ezt a for ciklust úgy, hogy 8-szor fusson le!">
        <data><![CDATA[

___ (<font color="#DF7401">int</font> i = <font color="#F0E130">0</font>; i &lt; ___; i++) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//További kód ide...
</font>
<br/>}

        ]]></data>
        <answer place="0">for</answer>
        <answer place="1">8</answer>
    </interactive>
    <title text="while loop"/>
    <text>
        <![CDATA[
        A <i>while</i> ("amíg") ciklust olyan esetekben érdemes használni, amikor nem ismerjük
        előre, hogy hány ismétlésre van szükség. A <i>for</i> ciklussal ellentétben itt csak egy
        komponens adható meg: a megállási feltétel. Ha iterátor változóra van szükség, azt nekünk a
        ciklus előtt kell deklarálni.
        ]]>
    </text>
    <code><![CDATA[
        
<font color="#999900">String</font> text = <font color="#2E8B57">"aabbbaaXaaaaaba"</font>;
<font color="#DF7401">
<br/>int </font>i = <font color="#F0E130">0</font>; <font color="gray">//iterátor változó létrehozása külön</font>
<br/><font color="#E65100">while</font>(i&lt;text.<font color="#ADD8E6">length</font>() && text.<font color="#ADD8E6">charAt</font>(i) != <font color="#2E8B57">'X'</font>) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">print</font>(text.<font color="#ADD8E6">charAt</font>(i));
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;i++;
<br/>}
        
    ]]></code>
    <text>
        <![CDATA[
        A fenti kódmintában addig írjuk ki a <i>String</i> karaktereit, amíg egy <i>X</i> betűhöz nem
        érünk. A megállási feltétel összetett, ÉS logikai operátort tartalmaz. A feltétel első része arra szolgát,
        hogy a ciklus akkor is megálljon, ha a <i>String</i>-ben esetleg nincs <i>X</i> betű. A második részen megnézzük,
        hogy a vizsgált karakter <i>X</i>-e, ha igen, akkor a ciklus megáll.
        <br><br>
        Ennek a feladatnak a megoldásához azért választottam a <i>while</i> ciklust, mert nem tudjuk előre,
        hogy hányadik betű lesz az <i>X</i>.
        ]]>
    </text>
    <boxed title="Iterátor változó a while ciklusban">
        <![CDATA[
        A fenti példa azt is megmutatja, hogy lehetséges a <i>while</i> ciklusban is iterátor változót
        használni. Ilyenkor azonban a deklarálást és inicializálást a ciklus előtt kell elvégezni, a
        frissítését pedig a ciklus blokkján belül (mivel a <i>while</i> nem biztosít erre speciális szintaxist).
        <br><br>
        A <i>while</i> és a <i>for</i> ciklusok átkonvertálhatóak egymásba. Például, ha a <i>for</i> ciklusnak nem adunk meg
        iterátor változót, és iterátor frissítést sem, akkor az úgy fog működni, mint egy <i>while</i> ciklus.
        ]]>
    </boxed>
    <interactive instruction="Egészítsd ki a ciklust hogy addig vágja le a karaktereket a String végéről, amíg a hossza 3 lesz!">
        <data><![CDATA[

<font color="#999900">String</font> text = <font color="#2E8B57">"a1b2c3d4e5f6"</font>;
<br/>___ (text.<font color="#ADD8E6">length</font>() > ___) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//ez levágja az utolsó karaktert!
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;text = text.<font color="#ADD8E6">substring</font>(<font color="#F0E130">0</font>, text.<font color="#ADD8E6">length</font>() - <font color="#F0E130">1</font>);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(text);
<br/>}

        ]]></data>
        <answer place="0">while</answer>
        <answer place="1">3</answer>
    </interactive>
    <title text="do-while ciklus"/>
    <text>
        <![CDATA[
        Ez a ritkán használt ciklus a <i>while</i>-hoz hasonló, azzal a különbséggel, hogy a megállási
        feltétel minden ismétlés <b>után</b> lesz ellenőrizve, nem pedig előtte. Ez azt eredményezi, hogy
        a <i>do-while</i> ciklus mindig legalább egyszer fut.
        ]]>
    </text>
    <code><![CDATA[
        
<font color="#DF7401">int </font>num = <font color="#ADD8E6">getInt</font>();
<font color="#E65100">
<br/><font color="#E65100">do</font> </font>{
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(num);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;num--;
<br/>} <font color="#E65100">while</font>(num > <font color="#F0E130">0</font>);
        
    ]]></code>
    <text>
        <![CDATA[
        Tegyük fel, hogy a <i>getInt</i> metódus visszaad egy számot. Ez a ciklus addig íratja ki és
        csökkenti a számot, amíg az pozitív. Mivel azonban ez egy <i>do-while</i> ciklus, ezért akkor is le fog futni egyszer,
        ha a kapott szám nem pozitív.
        ]]>
    </text>
    <title text="Korai megállás: break"/>
    <text>
        <![CDATA[
        A <b>break</b> azonnal "ki tudunk törni" a ciklusból, és az utána következő utasításra ugrani.
        Menjünk vissza ahhoz a példához, ahol az <i>X</i> betűig írtuk ki a <i>String</i> karaktereit.
        Ennek egy alternatív megoldása így néz ki <i>break</i> használatával:
        ]]>
    </text>
    <code><![CDATA[
        
<font color="#999900">String</font> text = <font color="#2E8B57">"aabbbaaXaaaaaba"</font>;
<font color="#DF7401">
<br/>int </font>i = <font color="#F0E130">0</font>; <font color="gray">//iterátor
</font>
<br/><font color="#E65100">while</font>(i &lt; text.<font color="#ADD8E6">length</font>()) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">if</font>(text.<font color="#ADD8E6">charAt</font>(i) == <font color="#2E8B57">'X'</font>) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">break</font>;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">print</font>(text.<font color="#ADD8E6">charAt</font>(i));
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;i++;
<br/>}
        
    ]]></code>
    <text>
        <![CDATA[
        Látható, hogy a <i>break</i> segítségével sikerült egyszerűsíteni a megállási feltételt. Az is
        világos, hogy a ciklusokon belül akár elágazásokat is írhatunk (például <i>if</i>-et), ahogy az
        elágazásokon belülre is írhatunk ciklusokat.
        ]]>
    </text>
    <advanced title="Visszatérés a ciklusból">
        <![CDATA[
        A <b>return</b> (visszatérés) utasítás lehet akár egy cikluson belül is. Mivel ilyenkor a
        teljes metódusból kilépünk, ezért a ciklus futása is megszakad.
        ]]>
    </advanced>
    <title text="Előrelépés: continue"/>
    <text>
        <![CDATA[
        A <b>continue</b> utasítással arra is lehetőség van, hogy egy ismétlésnek azonnal a
        végére ugorjunk, hogy kezdődhessen a következő. A <i>break</i>-kel ellentétben ez nem fog
        az egész ciklusból kilépni.
        <br><br>
        Tegyük fel, hogy egy <i>String</i> karaktereit szeretnénk kiíratni, de az <i>X</i> betűt nem
        szeretjük, ezért ezt minden esetben át akarjuk ugorni. A <i>continue</i> utasítás tökéletes
        erre a feladatra:
        ]]>
    </text>
    <code><![CDATA[
        
<font color="#999900">String</font> text = <font color="#2E8B57">"aabbbaaXabaaaba"</font>;
<font color="#E65100">
<br/>for</font>(<font color="#DF7401">int </font>i=<font color="#F0E130">0</font>; i&lt;text.<font color="#ADD8E6">length</font>(); i++) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#ADD8E6">if</font>(text.<font color="#ADD8E6">charAt</font>(i) == <font color="#2E8B57">'X'</font>) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">continue</font>;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">print</font>(text.<font color="#ADD8E6">charAt</font>(i));
<br/>}
        
    ]]></code>
    <text>
        <![CDATA[
        Ebben az esetben a <i>for</i> ciklus használata mellett döntöttem, mert előre tudjuk,
        hogy hányszor szeretnénk ismételni a ciklust (annyiszor, amilyen hosszú a szöveg, ezt
        pedig a ciklus indulása előtt megtudhatjuk a <i>length</i> segítségével).
        ]]>
    </text>
    <interactive instruction="Egészítsd ki a ciklust úgy, hogy az X átugrásra kerül, a Q pedig megállítja a ciklust!">
        <data><![CDATA[

<font color="#999900">String</font> data = <font color="#2E8B57">"aaabbabaXabXaabQab"</font>;
<br/><font color="#E65100">for</font>(<font color="#DF7401">int</font> i=<font color="#F0E130">0</font>; i &lt; data.<font color="#ADD8E6">length</font>(); ___) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">if</font>(data.<font color="#ADD8E6">charAt</font>(i) == <font color="#2E8B57">'X'</font>) { <font color="gray">//X, átugrás de nem megállás</font>
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;___;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;} <font color="#E65100">else</font> <font color="#E65100">if</font>(data.<font color="#ADD8E6">charAt</font>(i) == <font color="#2E8B57">'Q'</font>) { <font color="gray">//Q, megállás
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;___;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">print</font>(data.<font color="#ADD8E6">charAt</font>(i));
<br/>}

        ]]></data>
        <answer place="0">i++</answer>
        <answer place="0">i = i + 1</answer>
        <answer place="1">continue</answer>
        <answer place="2">break</answer>
    </interactive>
    <title text="Végtelen ciklusok"/>
    <text>
        <![CDATA[
        Amennyiben a megállási feltétel sosem lesz hamis, akkor a ciklus nem áll meg. Egészen addig
        fog ismétlődni, amíg a programot, vagy magát a számítógépet nem kapcsolják ki.
        ]]>
    </text>
    <boxed title="Végtelen ciklus javítása">
        <![CDATA[
        Egy végtelenül futó ciklus általában hibát jelez. Ilyenkor érdemes alaposan megnézni, hogy milyen
        megállási feltételt adtunk meg.
        ]]>
    </boxed>
    <text>
        <![CDATA[
        Ritkán azonban előfordul az is, hogy szándékosan adunk meg végtelen ciklust. Például szerver
        programok esetén:
        ]]>
    </text>
    <code><![CDATA[
        
<font color="#E65100">while</font>(<font color="#E65100">true</font>) {
<br/><font color="#E65100"> &nbsp;&nbsp;&nbsp;&nbsp;if</font>(<font color="#ADD8E6">connectionDetected</font>()) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#ADD8E6">processConnection</font>();
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>}
        
    ]]></code>
    <text>
        <![CDATA[
        A <i>connectionDetected</i> és a <i>processConnection</i> metódusok máshol vannak megírva.
        A szerver addig várakozik a ciklus segítségével, amíg nem jön bejövő csatlakozás, majd azt
        feldolgozza, és tovább várakozik, mivel a ciklus végtelen (a megállási feltétel egyszerűen <i>true</i>,
        ami nyilván sosem lesz hamis).
        ]]>
    </text>
</resources>
