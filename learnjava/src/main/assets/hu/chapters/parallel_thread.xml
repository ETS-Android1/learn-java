<?xml version="1.0" encoding="utf-8" standalone="no"?>
<resources>
    <chapterdata>
        <id>252</id>
        <name>A Thread osztály</name>
    </chapterdata>

    <!-- Basic classes: Thread, Runnable, ...
     different ways to start threads -->

    <text>
        <![CDATA[
        Ebben a fejezetben megnézzük, hogyan indíthatunk új szálakat Javában, amik 
		párhuzamosan futnak majd.
        ]]>
    </text>
    <title text="A Thread (szál) osztály"/>
    <text>
        <![CDATA[
        Nem meglepő, hogy a többszálú futás is objektum orientált módon van 
		megvalósítva. A legfontosabb osztály a 
		<a href="https://docs.oracle.com/javase/7/docs/api/java/lang/Thread.html">java.lang.Thread</a>, 
		ami egy szálat reprezentál.
        ]]>
    </text>
    <code><![CDATA[
        
        <font color="gray">//create a thread</font>
<br/><font color="#999900">Thread</font> t1 = <font color="#E65100">new</font> <font color="#999900">Thread</font>();	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;
<br/><font color="gray">//start this thread</font>
<br/>t1.<font color="#ADD8E6">start</font>();
        
    ]]></code>
    <text>
        <![CDATA[
        Szóval mit fog is ez a szál csinálni? Nos, semmit. Ez nyilvánvaló, mivel nem 
		adtunk meg semmit, amit végre tudna hajtani.
        ]]>
    </text>
    <boxed title="A szál életciklusa">
        <![CDATA[
        A <i>Thread</i> osztály példányosításakor a végrehajtás még nem indul el. 
		A <i>start</i> metódus meghívása után, a szál elkezdi végrehajtani az 
		utasításait. Ez megállítható és folytatható. A végrehajtás befejezésekor a
        szál 'meghal', és nem indítható újra.
        ]]>
    </boxed>
    <text>
        <![CDATA[
        A végrehajtandó utasítások átadására egy interfészt használunk: 
		<a href="https://docs.oracle.com/javase/7/docs/api/java/lang/Runnable.html">java.lang.Runnable</a>. 
		Ennek az interfésznek csak egy metódusa van, a <i>run</i>, és ami ebben a 
		metódusban van, azt a szál végre fogja hajtani.
        ]]>
    </text>
    <title text="Az utasítások átadása"/>
    <text>
        <![CDATA[
        Többféleképpen is átadhatjuk a <i>Runnable</i>-t a szálobjektumnak. 
		A legegyszerűbb (de nem a legrövidebb) valószínűleg a <i>Runnable</i> 
		implementálása egy külön osztályban:
        ]]>
    </text>
    <code><![CDATA[
        
<font color="#E65100">class</font> <font color="#999900">GreetRunnable</font> <font color="#E65100">implements</font> <font color="#999900">Runnable</font> {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//override the run method to do something</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="red">@Override</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#DF7401">void</font> <font color="#ADD8E6">run</font>() {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(<font color="#2E8B57">"Hello from a thread!"</font>);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>}
        
    ]]></code>
    <text>
        <![CDATA[
        Ezután példányosíthatjuk ezt az osztályt, és átadhatjuk egy szálnak, 
		mivel ez egy <i>Runnable</i> lesz:
        ]]>
    </text>
    <code><![CDATA[
        
<font color="gray">//create a thread using the runnable</font>
<br/><font color="#999900">Thread</font> t1 = <font color="#E65100">new</font> <font color="#999900">Thread</font>(<font color="#E65100">new</font> <font color="#999900">GreetRunnable</font>());	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;
<br/><font color="gray">//start the thread</font>
<br/>t1.<font color="#ADD8E6">start</font>();
        
    ]]></code>
    <text>
        <![CDATA[
        A várakozásoknak megfelelően ez a szál kiírja az üdvözlést a konzolra.
        ]]>
    </text>
    <text>
        <![CDATA[
        A <i>Runnable</i> átadásának másik, előnyösebb módja egy névtelen (anonim) 
		osztály használata. Ezekről már volt szó korábban, de itt egy kis ismétlés.
        ]]>
    </text>
    <boxed title="Anonim osztályok">
        <![CDATA[
        A Java lehetőséget biztosít egy osztály gyors deklarálására és használatára. 
		Az ilyen osztályok csak egyszer használhatók, mert nem lesz nevük, hogy 
		később hivatkozhassunk rájuk (innen az anonim kifejezés). Bőven tájékozódhatsz 
		<a href="https://docs.oracle.com/javase/tutorial/java/javaOO/anonymousclasses.html">itt</a>.
        ]]>
    </boxed>
	<text>
		<![CDATA[
        Tehát anonim módon is megadhatjuk a <i>Runnable</i>-t, ott helyben:
        ]]>
	</text>
    <code><![CDATA[
        
<font color="gray">//create a thread using an anonymous runnable</font>
<br/><font color="#999900">Thread</font> t1 = <font color="#E65100">new</font> <font color="#999900">Thread</font>(<font color="#E65100">new</font> <font color="#999900">Runnable</font>() {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="red">@Override</font> <font color="gray">//override the run method here</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#DF7401">void</font> <font color="#ADD8E6">run</font>() {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(<font color="#2E8B57">"Hello from an anonymous runnable!"</font>);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>});	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;
<br/><font color="gray">//start the thread
</font>
<br/>t1.<font color="#ADD8E6">start</font>();
        
    ]]></code>
    <text>
        <![CDATA[
        Ez ugyanezt teszi mintha külön osztályban lenne, de nem kellett egy 
		teljes értékű egyéni osztályt deklarálnunk. Ha a <i>Runnable</i>-t csak 
		egyszer használod, ez az egyik legjobb megoldás. Ha újrafelhasználást 
		tervezel, akkor csak írj egy normál osztályt, ahelyett, hogy az anonim 
		deklaráció mindenhova átmásolod.
        ]]>
    </text>
    <boxed title="Lambda kifejezés">
        <![CDATA[
        A <i>Java 8</i> bevezette a <i>Runnable</i> átadásának egy új, még kompaktabb 
		módját, a lambda kifejezéseket. Ez azért lehetséges, mert a <i>Runnable</i> egy 
		funckionális interfész, egyetlen absztrakt metódusa a <i>run</i>.
        ]]>
    </boxed>
	<text>
		<![CDATA[
        Tehát még az anonim osztály létrehozását is megspórolhatjuk ha egy lambda 
		kifejezéssel adjuk meg a <i>Runnable</i>-t:
        ]]>
	</text>
    <code><![CDATA[
        
        <font color="gray">//create a thread using a lambda expression</font>
<br/><font color="#999900">Thread</font> t1 = <font color="#E65100">new</font> <font color="#999900">Thread</font>(() -> <font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(<font color="#2E8B57">"Hello from a lambda!"</font>));
<br/><font color="gray">//start the thread</font>
<br/>t1.<font color="#ADD8E6">start</font>();
        
    ]]></code>
    <text>
        <![CDATA[
        Nem, még mindig nincs vége. Érdekes módon a <i>Thread</i> osztály is 
		implementálja a <i>Runnable</i>-t, de a <i>run</i> metódusa üres. Ezért nem 
		csinált semmit az első kódpéldánk. Származtathatunk azonban a 
		<i>Thread</i>-ből, és felülírhatjuk a metódust:
        ]]>
    </text>
    <code><![CDATA[
        
<font color="#E65100">class</font> <font color="#999900">GreetThread</font> <font color="#E65100">extends</font> <font color="#999900">Thread</font> {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="red">@Override</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#DF7401">void</font> <font color="#ADD8E6">run</font>() {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">String</font> name = <font color="#ADD8E6">getName</font>(); <font color="gray">//get the thread's name
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">for</font>(<font color="#DF7401">int</font> i=<font color="#F0E130">0</font>; i&lt;<font color="#F0E130">50</font>; i++) { <font color="gray">//greet us 50 times
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(<font color="#2E8B57">"Hello, I'm "</font> + name);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>}
        
    ]]></code>
    <text>
        <![CDATA[
		Ez a szál éppen 50-szer fog kiírni a konzolra. Ennek hamarosan jelentősége 
		lesz.
		<p>
        Amint láthatod, a szálobjektumoknak nevük is van, amelyeket a megfelelő 
		getterekkel és setterekkel kaphatsz és állíthatsz be.
        ]]>
    </text>
    <code><![CDATA[
        
 <font color="#999900">GreetThread</font> t1 = <font color="#E65100">new</font>  <font color="#999900">GreetThread</font>();
<br/>t1.<font color="#ADD8E6">setName</font>(<font color="#2E8B57">"Thread 1"</font>); <font color="gray">//set the thread's name
</font>
<br/>t1.<font color="#ADD8E6">start</font>();
        
    ]]></code>
    <interactive instruction="Hozz létre egy szálat anonim osztály segítségével!">
        <data><![CDATA[

<font color="#999900">Thread</font> thread = <font color="#E65100">new</font> <font color="#999900">Thread</font>(<font color="#E65100">new</font> <font color="#ADD8E6">___</font>() {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="red">@Override</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#DF7401">void</font> <font color="#ADD8E6">___</font>() {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//do some long calculation here...
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>});

        ]]></data>
        <answer place="0">Runnable</answer>
        <answer place="1">run</answer>
    </interactive>
    <title text="Demonstráció"/>
    <text>
        <![CDATA[
        Ennyi erőfeszítés, és még csak nem is láttuk a párhuzamos végrehajtás 
		megfelelő bemutatását. Ezt most megteszem, és használni fogom a
        a korábban létrehozott <i>GreetThread</i> osztályt.
        ]]>
    </text>
    <code><![CDATA[
        
<font color="gray">//create 2 threads, with different names</font>
<br/><font color="#999900">GreetThread</font> t1 = <font color="#E65100">new</font> <font color="#999900">GreetThread</font>();
<br/>t1.<font color="#ADD8E6">setName</font>(<font color="#2E8B57">"Thread 1"</font>);
<br/><font color="#999900">GreetThread</font> t2 = <font color="#E65100">new</font> <font color="#999900">GreetThread</font>();
<br/>t2.<font color="#ADD8E6">setName</font>(<font color="#2E8B57">"Thread 2"</font>);
<br/>
<br/><font color="gray">//start both</font>
<br/>t1.<font color="#ADD8E6">start</font>();
<br/>t2.<font color="#ADD8E6">start</font>();
        
    ]]></code>
    <text>
        <![CDATA[
        Egy szekvenciális programban az 1-es szál 50-szer üdvözölne minket, 
		majd a 2-es szál ugyanezt tenné, miután az 1-es végzett. De ha lefuttatjuk
        ezt, észrevehetjük, hogy az üdvözlések keverednek, így a szálak párhuzamosan 
		futnak és írnak a konzolra.
        ]]>
    </text>
    <image name="thread_demonstration"/>
    <boxed title="Nem determinisztikus">
        <![CDATA[
        Ez a példa azt is mutatja, hogy a párhuzamos programok valójában nem 
		determinisztikusak. Futtasd le néhányszor, és látni fogod, hogy
        hogy a pontos sorrend, amelyben a két szál üdvözöl, minden alkalommal 
		változik. Ez azért van így, mert a két szál "versenyez" a
        a konzol kimenetéhez való hozzáférésért, és a <i>OS</i> kiszámíthatatlan 
		módon dönti el, hogy melyik szál éppen mikor férhet hozzá.
        ]]>
    </boxed>
</resources>
