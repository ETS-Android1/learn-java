<?xml version="1.0" encoding="utf-8" standalone="no"?>
<resources>
    <chapterdata>
        <id>154</id>
        <name>Statikusság, konstansok, enumok</name>
    </chapterdata>
    <title text="Statikus tagok és metódusok"/>
    <text>
        <![CDATA[
        Ennek a kurzusnak a korábbi fejezeteiben az adattagok és metódusok az objektumhoz tartoztak. Vegyük ezt a példát:
        ]]>
    </text>
    <code><![CDATA[
        
        <font color="#E65100">public class</font> <font color="#999900">User</font> {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">private</font> <font color="#999900">String</font> email;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#999900">User</font>(<font color="#999900">String</font> email) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">this</font>.<font color="#ADD8E6">email</font> = email;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#999900">String</font> <font color="#ADD8E6">getEmail</font>() {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">return</font> email;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>}
<br/>
        
    ]]></code>
    <text>
        <![CDATA[
        Minden felhasználói objektumnak külön email változója lesz (tehát ez a tag az objektumhoz tartozik). Ez rendben van, de
        vannak olyan esetek, amikor azt szeretnénk, hogy egy tag (vagy egy metódus) minden objektum számára azonos legyen (hogy <i>'az osztályhoz tartozzon'</i>).
        ]]>
    </text>
    <boxed title="Mennyi felhasználónk van?">
        <![CDATA[
        Fontos tudni, hogy hány felhasználónk van! Használhatunk egy egész számot ennek megszámlálására, de felesleges tárolni ezt az 
		információt minden egyes objektumban, amit létrehozunk, és nehéz is így megvalósítani.
        ]]>
    </boxed>
    <text>
        <![CDATA[
        A <b>static</b> kulcsszóval jelölhetjük, hogy egy változónak vagy metódusnak az osztályhoz kell tartoznia:
        ]]>
    </text>
    <code><![CDATA[
        
        <font color="#E65100">public class</font> <font color="#999900">User</font> {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//minden User objektum osztozik ezen, 'az osztályhoz tartozik'.
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">private static</font> <font color="#DF7401">int</font> userCounter = <font color="#F0E130">0</font>;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//nem statikus, ez minden objektumnak külön van
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">private</font> <font color="#999900">String</font> email;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#999900">User</font>(<font color="#999900">String</font> email) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">this</font>.<font color="#ADD8E6">email</font> = email;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//új User jött létre, számláló növelése
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;userCounter++;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//statikus metódus, az osztályhoz tartozik
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public static</font> <font color="#DF7401">void</font> <font color="#ADD8E6">makeReport</font>() {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(<font color="#2E8B57">"Összesen "</font> + userCounter + <font color="#2E8B57">" felhasználó van."</font>);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//nem statikus, objektumokhoz tartozó metódus
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#999900">String</font> <font color="#ADD8E6">getEmail</font>() {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">return</font> email;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>}
        
    ]]></code>
    <text>
        <![CDATA[
        Minden egyes új felhasználó létrehozásakor a számláló növekszik (a konstruktorban).
        <p>
        Vedd figyelembe, hogy a nem statikus tagokra és metódusokra nem lehet statikus kontextusból hivatkozni! Nem használhatjuk a <i>email
        </i> tagot a <i>makeReport</i> metódusban (az e-mailek a felhasználókhoz tartoznak, és ebben a statikus metódusban nincs egyéni felhasználónk). Statikus tagokra és metódusokra 
        viszont az osztály minden metódusából hivatkozhatunk. Ugyanezen okokból a <i>this</i> sem használható statikus környezetben.
        ]]>
    </text>
    <boxed title="Hivatkozás statikus elemekre">
        <![CDATA[
        Egy nem statikus metódust az objektum és a pont operátor segítségével hívtunk meg, de az újonnan hozzáadott statikus metódus nem
        nem tartozik semmilyen objektumhoz! Mivel az osztályhoz tartozik, azt fogjuk használni a meghívásához:
        ]]>
    </boxed>
    <code><![CDATA[
        
        <font color="#E65100">public static</font> <font color="#DF7401">void</font> <font color="#ADD8E6">main</font>(<font color="#999900">String</font>[] args) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">User</font> u1 = <font color="#E65100">new</font> U<font color="#ADD8E6">ser</font>(<font color="#2E8B57">"email@email.com"</font>);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">User</font> u2 = <font color="#E65100">new</font> U<font color="#ADD8E6">ser</font>(<font color="#2E8B57">"email2@email.com"</font>);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">User</font>.<font color="#ADD8E6">makeReport</font>();
<br/>}
        
    ]]></code>
    <text>
        <![CDATA[
        Figyeljük meg, hogy amikor a statikus tagra hivatkoztunk a konstruktorban, nincs <b>User.</b> rész. Ebben a kontextusban,
        a Java képes kikövetkeztetni, hogy melyik változóra gondolunk a <b>userCounter</b> alatt, anélkül is, hogy az osztály nevét odaírnánk (mert a
        az osztályon belül vagyunk).
        <p>
        Osztályon kívül azonban ki kell írni az <b>User.</b>-t, hogy a Java be tudja azonosítani a metódust.
        ]]>
    </text>
    <title text="Konstansok"/>
    <text>
        <![CDATA[
        A Java lehetőséget kínál a konstansok deklarálására. Ezek olyan változók, amelyeknek csak egyszer, a deklarációkor lehet értéket adni,
        és azután soha többé.
        <p>
        Erre a <b>final</b> kulcsszó használható. Szokás szerint a konstansok nevei teljesen nagybetűsek.
        ]]>
    </text>
    <interactive instruction="Deklaráljuk ezt a változót úgy, hogy konstans legyen és az osztályhoz tartozzon!">
        <data><![CDATA[

<font color="#E65100">public</font> ___ ___ <font color="#DF7401">int</font> RESULT_OK = <font color="#F0E130">1</font>;

        ]]></data>
        <answer group="final_first" place="0" required_places="1">final</answer>
        <answer group="final_first" place="1" required_places="0">static</answer>
        <answer group="static_first" place="0" required_places="1">static</answer>
        <answer group="static_first" place="1" required_places="0">final</answer>
    </interactive>
    <boxed title="Emlékeztető: final">
        <![CDATA[
        A <i>final</i> kulcsszót már megismertük. Osztályok és metódusok jelölhetők <i>final</i>-nak, ennek köze van a
        öröklődéshez. A változók is lehetnek <i>final</i> jelölésőek, de ez a konstans értékekkel kapcsolatos, nem az öröklődéssel!
        ]]>
    </boxed>
    <code><![CDATA[
        
<font color="#E65100">final</font> <font color="#DF7401">int</font> ONE = <font color="#F0E130">1</font>;
<br/><font color="gray">//ONE = 2;</font>
        
    ]]></code>
    <text>
        <![CDATA[
        Mi akadályozhat meg minket abban, hogy újra értéket adjunk egy ilyen változónak? Ha a második sort nem kommentáljuk ki, 
		és futtatjuk a kódot, látni fogod, hogy a fordító fog hibát adni:
        ]]>
    </text>
    <image name="final_error"/>
    <text>
        <![CDATA[
        A konstans változó értékadása alól egy kivétel van. Egy osztály konstans tagját a konstruktorban is lehet inicializálni:
        ]]>
    </text>
    <code><![CDATA[
        
        <font color="#E65100">public class</font> <font color="#999900">User</font> {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//final-al jelölt, de mégsem kap itt értéket</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">private final</font> <font color="#999900">String</font> email;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#999900">User</font>(<font color="#999900">String</font> email) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">this</font>.<font color="#ADD8E6">email</font> = email; <font color="gray">//itt kap értéket</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#999900">String</font> <font color="#ADD8E6">getEmail</font>() {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">return</font> email;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>}
        
    ]]></code>
    <text>
        <![CDATA[
        A <i>final</i>-t gyakran kombinálják a <i>static</i>-kal, hogy globális (mindenhol elérhető) konstansokat hozzanak létre. Például a JDK
        a híres pi konstans értékét egy ilyen változóban tárolja:
        ]]>
    </text>
    <code><![CDATA[
        
<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(<font color="#2E8B57">"A pi értéke "</font> + <font color="#999900">Math</font>.PI);
        
    ]]></code>
    <title text="Enum-ok"/>
    <text>
        <![CDATA[
        Van egy másik, fejlettebb módja is a konstansok deklarálásának. Az <b>Enum</b>, egy speciális osztálytípus, 
        használható olyan konstansok deklarálására, amelyek valamilyen módon kapcsolódnak egymáshoz.
        ]]>
    </text>
    <code><![CDATA[
        
        <font color="#E65100">public enum</font> <font color="#999900">Day</font> {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;MONDAY,
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;TUESDAY,
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;WEDNESDAY,
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;THURSDAY,
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;FRIDAY,
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;SATURDAY,
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;SUNDAY
<br/>}
        
    ]]></code>
    <text>
        <![CDATA[
        Mint látható, az <b>enum</b> kulcsszót használjuk. Most már van egy konstansunk a hét minden egyes napjára (és ezek a
        helyesen vannak elrendezve, ez fontos lesz)!
        <p>
        Az enumok hasznos beépített metódusokkal rendelkeznek. Hozzunk létre egy metódust, amely megmondja, hogy melyik nap van holnap, az aktuális
        napból:
        ]]>
    </text>
    <code><![CDATA[
        
<font color="#E65100">public static</font> <font color="#999900">Day</font> <font color="#ADD8E6">nextDay</font>(<font color="#999900">Day</font> today) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//beépített enum metódus, a konstansokat a deklarálás sorrendjében adja vissza</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">Day</font>[] allDays = Day.<font color="#ADD8E6">values</font>();
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">Day</font> tomorrow = null;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">if</font>(today == <font color="#999900">Day</font>.SUNDAY) { <font color="gray">//a vasárnap speciális eset, mert ez az utolsó
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">return</font> <font color="#999900">Day</font>.MONDAY;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">for</font>(<font color="#DF7401">int</font> i=<font color="#F0E130">0</font>; i &lt; allDays.<font color="#ADD8E6">length</font>; i++) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">if</font>(today == allDays[i]) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;tomorrow = allDays[i+<font color="#F0E130">1</font>]; <font color="gray">//vasárnapra ez hibás pozíció lenne
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">return</font> tomorrow;
<br/>}
        
    ]]></code>
    <text>
        <![CDATA[
        A primitív típusokhoz hasonlóan a <b>==</b> operátor biztonságosan használható enumokra (bár az <i>
        equals</i> módszer is működik). A témáról nagyszerű beszélgetést találsz 
        <a href="https://stackoverflow.com/questions/1750435/comparing-java-enum-members-or-equals">itt</a>.
        ]]>
    </text>
    <advanced title="További enum funkciók">
        <![CDATA[
        Az enumok támogatják a metódusokat is. Az előző metódust például hozzá lehetne adni a <i>Day</i> enumhoz. Az is lehetséges, hogy
        tulajdonságokat rendelünk minden enum konstanshoz, lásd <a href="https://www.java67.com/2018/07/java-enum-with-constructor-example.html">ezt</a> bemutatót.
        ]]>
    </advanced>
    <interactive instruction="Egészítsd ki az enum deklarációt!">
        <data><![CDATA[

___ <font color="#999900">TernaryLogic</font> {
<br/>&nbsp;&nbsp;&nbsp;&nbsp;TRUE, FALSE, UNDETERMINED;
<br/>}

        ]]></data>
        <answer place="0">enum</answer>
    </interactive>

    <!-- static variables, methods
    enumerations: basic, more advanced -->

</resources>
