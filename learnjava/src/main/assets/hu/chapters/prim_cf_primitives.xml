<?xml version="1.0" encoding="utf-8" standalone="no"?>
<!--Belongs to course 'Primitives, control flow and I/O' --><!--
<interactive instruction="">
    <data>

    </data>
    <answer place="0"></answer>
</interactive>
--><resources>
    <chapterdata>
        <id>101</id>
        <name>Primitív típusok</name>
    </chapterdata>
    <text>
        <![CDATA[
        A primitívek azok az alap típusok, amiket használhatunk. Lehetnek például változók típusai,
        vagy metódusok visszatérési értékei.
        ]]>
    </text>
    <boxed title="Wrapperek">
        <![CDATA[
        Egy későbbi kurzusban szó lesz az osztályokról. Fontos megjegyezni, hogy a primitívek
        nem osztályok. Vannak azonban az osztályoknak nagyon hasznos tulajdonságai, amiket a
        primitívek esetén is szeretnénk kihasználni. Ezért jöttek létre a <b>wrapper</b> osztályok.
        Itt most csak megemlítem, hogy mely wrapper osztályok tartoznak a primitívekhez.
        ]]>
    </boxed>
    <title text="int"/>
    <text>
        <![CDATA[
        Az <i>int</i> primitívet már ismerjük a korábbi fejezetekből. Egész számok tárolására alkalmas.
        <br><br>
        <u>Wrapper:</u> az <b>Integer</b> nevű osztály.
        <br><br>
        <u>Tartomány:</u> 32 bitet tárol, ezért az értéke -2^31 és 2^31-1 között mozoghat. Ezeket nem kell
        megjegyezni, mert a programunkban mindig elérhetjük őket, méghozzá a wrapper osztály segítségével:
        ]]>
    </text>
    <code><![CDATA[
        
        <font color="#DF7401">int</font> min = <font color="#999900">Integer</font>.MIN_VALUE;
        <br/><font color="#DF7401">int</font> max = <font color="#999900">Integer</font>.MAX_VALUE;
        
    ]]></code>
    <text>
        <![CDATA[
        <u>Alap érték:</u> 0.
        ]]>
    </text>
    <advanced title="Túl-, és alulcsordulás">
        <![CDATA[
        Tudjuk, hogy az <i>int</i>-nek van maximum és minimum értéke. Érdekes kérdés, hogy mi történik, ha a
        maximum értéken túlnövünk (vagy a minimum alá megyünk). Intuitív lenne, hogy az érték nem lépi túl a
        szélsőértéket, de nem ez fog történni, hanem úgynevezett <b>túlcsordulás és alulcsordulás</b>.
        <br><br>
        Ezekről részletesebben olvashatsz a <a href="https://en.wikipedia.org/wiki/Integer_overflow">túlcsordulás wikipédia oldalán</a>
        <br><br>
        A most következő szám típusoknál ez szintén igaz lesz, a saját szélsőértékeikkel.
        ]]>
    </advanced>
    <title text="long"/>
    <text>
        <![CDATA[
        A <i>long</i> egy újabb szám típus, egész számokhoz. Azokra az esetekre hozták létre,
        amikor az <i>int</i> érték tartománya nem elég.
        <br><br>
        <u>Wrapper:</u> a <i>Long</i> nevű osztály.
        <br><br>
        <u>Tartomány:</u> 64 biten van tárolva, ezért az értékek -2^63 és 2^63-1 közé eshetnek. Látható,
        hogy ez sokkal nagyobb, mint az <i>int</i> esetén. A szélső értékeket itt is megkaphatjuk a
        wrapper osztálytól.
        <br><br>
        <u>Alap érték:</u> 0.
        ]]>
    </text>
    <code><![CDATA[
        
        <font color="#DF7401">long </font>big = <font color="#999900">Integer</font>.<font color="#999900">MAX_VALUE</font> * <font color="#F0E130">2</font>;
        <br/><font color="#DF7401">long</font> l1 = <font color="#F0E130">141828414</font>9L;
        
    ]]></code>
    <text>
        <![CDATA[
        Ebben a példában látható egy művelet, ahol egy <i>long</i> típusú változónak értékül adjuk a
        maximális <i>int</i> érték kétszeresét. Egy <i>int</i> típusú változónál ez túlcsordulást okozna,
        de a <i>long</i> gond nélkül tárol egy ekkora értéket is.
        <br><br>
        A második utasításban látható <i>L</i> betű azt jelzi, hogy a megadott érték <i>long</i> típusú.
        Ezt nem kell kiírni, csak a programozónak segíthet a kód megértésében.
        ]]>
    </text>
    <title text="byte és short"/>
    <text>
        <![CDATA[
        Újabb egész szám típusok, amik az <i>int</i>-nél kevesebb helyet foglalnak, ezért az érték tartományuk is
        szűkebb. Manapság ezeket nagyon ritkán használják, mivel a számítógépek rengeteg memóriával
        rendelkeznek és néhány bit nem számít.
        <br><br>
        <u>Wrapperek:</u> A <b>Byte and Short</b> nevű osztályok.
        <br><br>
        <u>Tartomány:</u> 8 bit a <i>byte</i> számára és 16 bit a <i>short</i>-nak. Emiatt a <i>byte</i> érték tartománya
        [-128,127], a <i>short</i>é pedig [-32768,32767].
        <br><br>
        <u>Alap értékek:</u> 0 mindkét típusnak.
        ]]>
    </text>
    <title text="double"/>
    <text>
        <![CDATA[
        Szám típus, ami <b>nem csak egészet</b> tárol, hanem tört számokat is.
        <br><br>
        <u>Wrapper:</u> <b>Double</b>.
        <br><br>
        <u>Tartomány:</u> Nagyobb, mint eddigi primitívek bármelyikének. Majdnem minden esetben lehet úgy
        tekinteni, mintha nem lenne felső és alsó korlát.
        <br><br>
        <u>Alap érték:</u> 0.0, vagy csak simán 0.
        ]]>
    </text>
    <code><![CDATA[
        
        <font color="#DF7401">double </font>d1 = <font color="#F0E130">3.65</font>;
<font color="#DF7401">
<br/><font color="#2E8B57">double</font> d2 = <font color="#F0E130">-21.941743242</font>;
<br/><font color="gray>//Don't need to write 423.0, but we can</font>
<br/><font color="#DF7401">double</font> d3 = <font color="#F0E130">423</font>;
<br/>
<br/><font color="#DF7401">double</font> res = d1 + d2;
        
    ]]></code>
    <text>
        <![CDATA[
        A példákból látszik, hogy a pont karakter használt az egész és a törtrész elválasztására.
        A magyar írásmódban használt vessző fordítási hibákat fog okozni! Az egész értékű típusokhoz
        hasonlóan ezeken is végezhetünk matematikai műveleteket.
        ]]>
    </text>
    <title text="float"/>
    <text>
        <![CDATA[
        Az utolsó szám típus, ami a <i>double</i>-hoz hasonló, de kisebb memória használattal, és ezért kisebb
        érték tartománnyal. A <i>byte</i> és <i>short</i> típusokhoz hasonlóan ezt is ritkán használják manapság.
        <br><br>
        <u>Wrapper:</u> <b>Float</b>.
        <br><br>
        <u>Alap érték:</u> 0f
        ]]>
    </text>
    <code><![CDATA[
        
        <font color="#DF7401">float</font> f1 = <font color="#F0E130">0.424242f</font>;
        
    ]]></code>
    <text>
        <![CDATA[
        Egy <i>double</i>-höz hasonlóan deklaráljuk, de itt <b>kötelező</b> kiírni az <b>f</b> betűt a végére.
        Ez is hozzájárul ahhoz, hogy a programozók inkább a <i>double</i>-t preferálják.
        ]]>
    </text>
    <title text="boolean"/>
    <text>
        <![CDATA[
        Két értékű, logikai típus (Igaz - Hamis). A lehetséges értékei a <i>true</i> (igaz) és a
        <i>false</i> hamis.
        <br><br>
        <u>Wrapper:</u> <b>Boolean</b>.
        <br><br>
        <u>Alap érték:</u> <i>false</i>
        ]]>
    </text>
    <code><![CDATA[
        
<font color="#DF7401">int </font>i1 = <font color="#F0E130">1</font>, i2 = <font color="#F0E130">2</font>;
<br/><font color="#DF7401">boolean</font> b1 = i1 &gt; <font color="#F0E130">7</font>; <font color="gray">//false</font>
<br/><font color="#DF7401">boolean</font> b2 = i2 &lt;= <font color="#F0E130">1</font>; <font color="gray">//true</font>
<br/><font color="#DF7401">boolean</font> b3 = i2 == <font color="#F0E130">3</font>; <font color="gray">//false</font>
<br/><font color="#DF7401">boolean</font> b4 = i1 != i2; <font color="gray">//true</font>
        
    ]]></code>
    <text>
        <![CDATA[
        Látszik, hogy <i>boolean</i> változókon nem végezhetünk matematikai műveletet. Ehelyett úgynevezett
        <b>összehasonlító</b> műveletek vannak, melyek értéke <i>boolean</i>. A deklarált két <i>int</i> változó
        értékét összehasonlítjuk (egyenlőek-e? különbözőek-e? az egyik nagyobb-e, mint a másik? stb) és az összehasonlítások eredményét
        <i>boolean</i> változókba mentjük.
        <br><br>
        A legtöbb összehasonlító operátor magától értetődően működik. Ami magyarázatra szorul, az
        a <b>&lt;= és &gt;=</b> operátorok, amik a nagyobb-egyenlő és a kisebb-egyenlő, valamint a
        <b>!=</b>, ami a nem egyenlő.
        ]]>
    </text>
    <code><![CDATA[
        
        <font color="#DF7401">boolean </font>b = <font color="#E65100">true</font>;
<br/>b = !b; <font color="gray">//b will be false</font>
        
    ]]></code>
    <text>
        <![CDATA[
        Itt látható a <b>tagadás</b> operátor. Ez "megfordítja" a kapott boolean értékét, azaz igazból
        hamis lesz, hamisból igaz. Itt a <i>b</i> változó értéke alapból igaz, majd értékül adjuk neki
        a saját tagadását, azaz a hamist.
        <br><br>
        Még vannak további logikai operátorok, az <b>ÉS, VAGY, kizáró VAGY</b>:
        ]]>
    </text>
    <list>
        <![CDATA[
        <ul>
        <li> ÉS (a && b): Csak akkor lesz igaz, ha <i>a</i> és <i>b</i> is igazak.</li>
        <li> VAGY (a || b): Csak akkor lesz igaz, ha vagy <i>a</i>, vagy <i>b</i> igaz (legalább az egyik).</li>
        <li> Kizáró VAGY (a ^ b): Csak akkor lesz igaz, ha vagy <i>a</i>, vagy <i>b</i> igaz, de <b>nem mindkettő</b>. Ez
        az, amit hétköznapi nyelven legtöbbször "vagy" alatt értünk.</li>
        </ul>
        ]]>
    </list>
    <code><![CDATA[
        
        <font color="#DF7401">boolean </font>a = true, b = false;
<font color="#DF7401">
<br/>boolean </font>c = a && b; <font color="gray">//false
</font>
<br/>c = a || b; <font color="gray">//true
</font>
<br/>c = a ^ b; <font color="gray">//true</font>
        
    ]]></code>
    <interactive instruction="Írj be olyan logikai operátort, amitől a c értéke igaz lesz!">
        <data><![CDATA[
            
<font color="#DF7401">boolean</font> a = false, b = true;
<br/><font color="#DF7401">boolean</font> c = a ___ b;
            
        ]]></data>
        <answer place="0">&amp;&amp;</answer>
        <answer place="0">^</answer>
    </interactive>
    <title text="char"/>
    <text>
        <![CDATA[
        Végül az utolsó primitív, aminek Unicode karakter lehet az értéke.
        <br><br>
        <u>Wrapper:</u> <b>Character</b>.
        <br><br>
        <u>Alap érték:</u> '\u0000' (ez az úgynevezett NUL karakter)
        ]]>
    </text>
    <code><![CDATA[
        
        <font color="#DF7401">char </font>c1 = '\u0011';
<font color="#DF7401">
<br/>char </font>c2 = <font color="#2E8B57">'A'</font>;
<font color="#DF7401">
<br/>char </font>c3 = <font color="#2E8B57">'ä'</font>;
        
    ]]></code>
    <text>
        <![CDATA[
        Látható, hogy itt a konkrét karakter értékeket aposztrófok közé kell tenni (egyszeres idézőjel).
        Megadhatunk konkrét Unicode kódot is, mint az első esetben, de a kívánt karaktert is
        beírhatjuk, ahogy a második és harmadik esetekben.
        ]]>
    </text>
    <boxed title="Ez nem String">
        <![CDATA[
        A szöveges változó típust, a <i>String</i>-et már láttuk. Azokat a hagyományos idézőjellel adjuk meg.
        Fontos, hogy a <i>char</i> nem egy <i>String</i>! A <i>String</i> nem primitív típus.
        <br><br>
        Ennek ellenére a Java bizonyos esetekben lehetővé teszi, hogy együtt használjuk a kettőt:
        ]]>
    </boxed>
    <code><![CDATA[
        
 <font color="#999900">String</font> s = <font color="#2E8B57">"mam"</font>;
<br/><font color="#DF7401">char</font> aChar = <font color="#2E8B57">'a'</font>;
<br/>s = s + aChar;
<br/><font color="gray">//will print mama
</font>
<br/><font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(s);
        
    ]]></code>
    <text>
        <![CDATA[
       Itt például az látszik, hogy az összefűzés nem csak két <i>String</i>, hanem <i>String</i> és
       <i>char</i> között is működik.
        ]]>
    </text>
    <interactive instruction="Deklarálj egy karakter típusú változót 'C' értékkel!">
        <data><![CDATA[

___ letter = ___;

        ]]></data>
        <answer place="0">char</answer>
        <answer place="0">Character</answer>
        <answer place="1">'C'</answer>
    </interactive>
    <title text="Automatikus csomagolás"/>
    <text>
        <![CDATA[
        A primitív típus <b>nem azonos</b> a wrapper (csomagoló) osztályával. Azaz például az <i>int</i>
        nem ugyanaz, mint az <i>Integer</i>. Azonban, mivel ezek gyakran együtt vannak használva, a Java
        képes arra, hogy primitívet automatikusan átalakítson a wrapper osztályává, és fordítva is (ezt nevezzük
        "csomagolásnak" és "kicsomagolásnak").
        ]]>
    </text>
    <code><![CDATA[
        
        <font color="#E65100">static</font> <font color="#DF7401">void</font> <font color="#ADD8E6">printChar</font>(<font color="#DF7401">char</font> c) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(c);
<br/>}
        
    ]]></code>
    <text>
        <![CDATA[
        Ez a metódus egy <i>char</i>, primitív típusú paramétert vár, de elfogad egy
        <i>Character</i> (wrapper) változót is:
        ]]>
    </text>
    <code><![CDATA[
        
        <font color="#ADD8E6">printChar</font>(<font color="#2E8B57">'a'</font>); <font color="gray">//with primitive
</font>
<br/><font color="#ADD8E6">printChar</font>(<font color="#E65100">new</font> <font color="#999900">Character</font>(<font color="#2E8B57">'b'</font>)); <font color="gray">//with wrapper
</font>
<br/><font color="#ADD8E6">printChar</font>(<font color="#999900">Character</font>.<font color="#ADD8E6">valueOf</font>(<font color="#2E8B57">'c'</font>)); <font color="gray">//with wrapper</font>
        
    ]]></code>
    <text>
        <![CDATA[
        Ennek oka, hogy a háttérben a Java a <i>Character</i> típust ki fogja csomagolni a primitív
        megfelelőjévé.
        ]]>
    </text>
</resources>
