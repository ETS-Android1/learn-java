<?xml version="1.0" encoding="utf-8" standalone="no"?>
<!-- Chapter about stacks and double sided queues --><resources>
    <chapterdata>
        <id>203</id>
        <name>Sor és verem</name>
    </chapterdata>
    <text>
        <![CDATA[
        Ebben a fejezetben két olyan adatszerkezetet fogunk megvizsgálni, amelyek szabályozzák, hogy mely 
		elemekhez férhetünk hozzá.
        ]]>
    </text>
    <title text="Sor"/>
    <text>
        <![CDATA[
        A sor (<i>queue</i>) alapvetően egy lista, amely bizonyos korlátozásokat szab arra vonatkozóan, 
		hogy hova tudunk elemeket beszúrni és eltávolítani. A következő korlátozások vannak:
        ]]>
    </text>
    <list>
        <![CDATA[
        <ul>
        <li>Az elemek csak a sor "hátsó" részéhez adhatók hozzá.</li>
        <li>Elemeket csak a sor "elejéről" (néha fejnek is nevezik) lehet eltávolítani.</li>
        </ul>
        ]]>
    </list>
    <image name="queue"/>
	<text>
		<![CDATA[
		Úgy képzelhetjük el ezt a struktúrát, mint egy emberekből álló sort. Aki megérkezik, az a 
		sor végére áll be. Aki sorra kerül, az pedig éppen a sor legelején áll.
		]]>
	</text>
    <boxed title="FIFO">
        <![CDATA[
        Amikor a sorokról olvasol, találkozhatsz a <b>FIFO</b> kifejezéssel. Ez azt jelenti, hogy 
		<b>first-in-first-out</b>. Arra utal, hogy az első elem, amelyet a struktúrába helyezel lesz az első, 
		amelyet majd ki tudsz venni belőle.
        ]]>
    </boxed>
    <text>
        <![CDATA[
        A <i>JDK</i> tartalmazza a <b>java.util.Queue</b> interfészt, amelyet a sorként használható kollekciók 
		implementálnak. Furcsa módon a <i>LinkedList</i>, azaz a láncolt lista implementálja ezt, ezért használható 
		sorként:
        ]]>
    </text>
    <code><![CDATA[
        
<font color="gray">//A LinkedList éppen megvalósítja ezt az interfészt</font>
<br/><font color="#999900">Queue</font>&lt;<font color="#999900">Integer</font>> queue = <font color="#E65100">new</font> <font color="#999900">LinkedList</font>&lt;>();
<br/>
<br/><font color="gray">//tipikus sor művelet: elem hozzáadása a végéhez.</font>
<br/>queue.<font color="#ADD8E6">add</font>(<font color="#F0E130">1</font>);
<br/>queue.<font color="#ADD8E6">add</font>(<font color="#F0E130">2</font>);
<br/>queue.<font color="#ADD8E6">add</font>(<font color="#F0E130">3</font>);
<br/>
<br/><font color="gray">//visszaadja az elöl lévő elemet, de nem veszi ki "kukucskálás"
</font>
<br/>queue.<font color="#ADD8E6">element</font>();
<br/><font color="gray">//ugyanaz mint a queue.element().
</font>
<br/>queue.<font color="#ADD8E6">peek</font>();
<br/>
<br/><font color="gray">/*
<br/> * tipikus sor művelet: elemek kivétele a sor elejéről
<br/> * a kukucskálással ellentétben ez eltávolítja az elemet
<br/> */</font>
<br/>queue.<font color="#ADD8E6">remove</font>();
<br/>queue.<font color="#ADD8E6">remove</font>();
<br/>queue.<font color="#ADD8E6">remove</font>();
        
    ]]></code>
    <text>
        <![CDATA[
        A sorok hasznosak lehetnek, ha az elemeket fogadó rendszer kapacitása korlátozott, és az elemek
        olyan elemeket tárolni valahol, amelyek nem férnek el. A sor majd gondoskodik arról, hogy az elem, amelyet
        leghosszabb ideig várakozik, kerüljön be először a rendszerbe (<i>FIFO</i>).
        ]]>
    </text>
    <interactive instruction="Ennek a programnak kérnie kell a felhasználói bemenetet, amit beilleszt egy sorba. A sor ezután kiíratásra kerül.">
        <data><![CDATA[

<font color="#999900">Queue</font>&lt;___> inputQueue = <font color="#E65100">new</font> <font color="#999900">ArrayDeque</font>&lt;>();
<br/><font color="#999900">Scanner</font> scanner = <font color="#E65100">new</font> <font color="#999900">Scanner</font>(<font color="#999900">System</font>.<font color="#ADD8E6">in</font>);
<br/><font color="#999900">String</font> input = scanner.<font color="#ADD8E6">nextLine</font>();
<br/><font color="#E65100">while</font>(!input.<font color="#ADD8E6">equals</font>(<font color="#2E8B57">"stop"</font>)) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;inputQueue.<font color="#ADD8E6">___</font>(input); <font color="gray">//input sorba állítása
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;input = scanner.<font color="#ADD8E6">nextLine</font>();
<br/>}
<br/>scanner.<font color="#ADD8E6">close</font>();
<br/><font color="#E65100">while</font>(!___.<font color="#ADD8E6">isEmpty</font>()) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(inputQueue.<font color="#ADD8E6">remove</font>()); <font color="gray">//kivétel a sorból és kiíratás
</font>
<br/>}

        ]]></data>
        <answer place="0">String</answer>
        <answer place="1">add</answer>
        <answer place="2">inputQueue</answer>
    </interactive>
    <title text="Kétvégű sorok"/>
    <text>
        <![CDATA[
        Ezek a speciális sorok lehetővé teszik az elemek hozzáadását vagy eltávolítását <b>két oldalról</b>. 
		Ez azt jelenti, hogy használhatóak úgy, mint a standard sorok, de többet engednek meg. 
		Az ilyen várólistákat néha <b>deque</b>-nak nevezik.
        ]]>
    </text>
    <boxed title="Deque-k a Java-ban">
        <![CDATA[
        A <i>JDK</i> rendelkezik a <b>java.util.Deque</b> interfésszel. Az implementációk közé tartozik a 
		<i>LinkedList</i> és egy olyan osztály, amelyet még nem láttunk: <b>java.util.ArrayDeque</b>.
        ]]>
    </boxed>
    <text>
        <![CDATA[
        Lássunk néhány kódmintát a <i>ArrayDeque</i> használatáról:
        ]]>
    </text>
    <code><![CDATA[
        
<font color="#999900">Deque</font>&lt;<font color="#999900">Integer</font>> queue = <font color="#E65100">new</font> <font color="#999900">ArrayDeque</font>&lt;>();
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;
<br/><font color="gray">//az elején és a végén is adhatunk hozzá elemet
</font>
<br/>queue.<font color="#ADD8E6">addFirst</font>(<font color="#F0E130">1</font>);
<br/>queue.<font color="#ADD8E6">addLast</font>(<font color="#F0E130">2</font>);
<br/>queue.<font color="#ADD8E6">addFirst</font>(<font color="#F0E130">4</font>);
<br/>queue.<font color="#ADD8E6">add</font>(<font color="#F0E130">3</font>); <font color="gray">//ugyanaz mint az addFirst
</font>
<br/>queue.<font color="#ADD8E6">addLast</font>(<font color="#F0E130">-5</font>);
<br/>
<br/><font color="gray">//az első és utolsó elemek kukucskálása
</font>
<br/>queue.<font color="#ADD8E6">peekFirst</font>();
<br/>queue.<font color="#ADD8E6">peekLast</font>();
<br/>
<br/><font color="gray">//mindkét végről tudunk eltávolítani
</font>
<br/>queue.<font color="#ADD8E6">removeFirst</font>();
<br/>queue.<font color="#ADD8E6">removeLast</font>();
<br/>queue.<font color="#ADD8E6">remove</font>(); <font color="gray">//ugyanaz mint a removeLast</font>
        
    ]]></code>
    <title text="Verem"/>
    <text>
        <![CDATA[
        A vermek olyan adatstruktúrák, amelyek csak az egyik végükön, az elülső oldalon engedik meg az elemek 
		hozzáadását és eltávolítását. Itt van egy kép az illusztrációhoz:
        ]]>
    </text>
    <image name="stack"/>
    <text>
        <![CDATA[
        Egy elem hozzáadását <i>push</i>-nak, eltávolítását pedig <i>pop</i>-nak nevezzük. A <i>peek</i> művelet
        is támogatott, amivel ellenőrizni tudjuk a verem tetején lévő elemet.
        ]]>
    </text>
    <boxed title="LIFO">
        <![CDATA[
        A veremeket <b>LIFO</b> adatszerkezeteknek nevezik, ami a <b>last-in-first-out</b> rövidítése. Ez azért van, 
		mert az utolsó elem, amelyet a verembe helyezünk, az lesz az első, amelyik kivételre kerül.
        ]]>
    </boxed>
    <text>
        <![CDATA[
        A <i>JDK</i> biztosítja a <b>java.util.Stack</b> osztályt, ami veremként működik. A <i>Deque</i> interfész 
		is használható úgy, mint egy verem, mivel rendelkezik a <i>push</i> és <i>pop</i> metódusokkal (amik 
		egyenértékűek az <i>addFirst</i> és a <i>removeFirst</i> metódusokkal).
        ]]>
    </text>
    <text>
        <![CDATA[
        Ahelyett, hogy csak felsorolnám a metódusokat, lássunk egy vermet használó programot, ami megfordít egy 
		String-et:
        ]]>
    </text>
    <code><![CDATA[
        
<font color="#E65100">public static</font> <font color="#999900">String</font> <font color="#ADD8E6">reverseString</font>(<font color="#999900">String</font> text) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//bármelyik Deque implementációt használhatnánk
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">Stack</font>&lt;<font color="#999900">Character</font>> stack = <font color="#E65100">new</font> <font color="#999900">Stack</font>&lt;>();
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">for</font>(<font color="#DF7401">char</font> c: text.<font color="#ADD8E6">toCharArray</font>()) { <font color="gray">//minden karakter verembe rakása
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;stack.<font color="#ADD8E6">push</font>(c);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#DF7401">char</font>[] reversedArray = <font color="#E65100">new</font> <font color="#DF7401">char</font>[text.<font color="#ADD8E6">length</font>()];
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">for</font>(<font color="#DF7401">int</font> i=<font color="#F0E130">0</font>; i&lt;text.<font color="#ADD8E6">length</font>(); i++) { <font color="gray">//karakterek kivétele a veremből
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;reversedArray[i] = stack.<font color="#ADD8E6">pop</font>();
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//a String-nek van karakter tömbös konstruktora
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">return new</font> <font color="#999900">String</font>(reversedArray);
<br/>}
        
    ]]></code>
    <text>
        <![CDATA[
        Mielőtt továbblépsz, gondold végig, hogy a verem miért teszi működőképessé ezt a megoldást. Nyilvánvaló, 
		hogy ez semmiképpen sem a leghatékonyabb megoldás, inkább csak egy demonstráció a veremről.
        ]]>
    </text>
    <interactive instruction="Frissítsd az előző interaktív komponenst úgy, hogy a bemenetet fordított sorrendben írja ki. Ehhez használj egy vermet!">
        <data><![CDATA[

___&lt;<font color="#999900">String</font>> inputStack = <font color="#E65100">new</font> ___&lt;>();
<br/><font color="#999900">Scanner</font> scanner = <font color="#E65100">new</font> <font color="#999900">Scanner</font>(<font color="#999900">System</font>.<font color="#ADD8E6">in</font>);
<br/><font color="#999900">String</font> input = scanner.<font color="#ADD8E6">nextLine</font>();
<br/><font color="#E65100">while</font>(!input.<font color="#ADD8E6">equals</font>(<font color="#2E8B57">"stop"</font>)) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;inputStack.<font color="#ADD8E6">___</font>(input);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;input = scanner.<font color="#ADD8E6">nextLine</font>();
<br/>}
<br/>scanner.<font color="#ADD8E6">close</font>();
<br/><font color="#E65100">while</font>(!inputQueue.<font color="#ADD8E6">isEmpty</font>()) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(inputStack.<font color="#ADD8E6">___</font>());
<br/>}

        ]]></data>
        <answer place="0">Stack</answer>
        <answer place="1">Stack</answer>
        <answer place="2">push</answer>
        <answer place="3">pop</answer>
        <default place="0">Queue</default>
        <default place="1">ArrayDeque</default>
        <default place="2">add</default>
        <default place="3">remove</default>
    </interactive>
</resources>
