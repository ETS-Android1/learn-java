<?xml version="1.0" encoding="utf-8" standalone="no"?>
<resources>
    <chapterdata>
        <id>155</id>
        <name>Absztrakt osztályok, interfészek</name>
    </chapterdata>
    <text>
        <![CDATA[
        Az absztrakt osztály egy olyan osztály, amely nem példányosítható (nem lehet belőle objektumot létrehozni). 
		Gyerek osztályai iszont példányosíthatóak lesznek, ezért bizonyos értelemben az absztrakt osztály is az lesz.
        <p>
        Az <b>abstract</b> kulcsszóval jelölhetünk egy osztályt absztraktnak:
        ]]>
    </text>
    <code><![CDATA[
        
        <font color="#E65100">public abstract class</font> <font color="#999900">Computer</font> {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//...</font>
<br/>}
<br/>
        
    ]]></code>
    <text>
        <![CDATA[
        Egy ilyen osztály példányosítása fordítási hibát eredményez:
        ]]>
    </text>
    <image name="abstract_class_error"/>
    <title text="Miért vannak ilyen osztályok?"/>
    <text>
        <![CDATA[
        Mi értelme van ennek? Az objektumok létrehozása a <i>OOP</i> alapvető része. Miért érdemes ezt letiltani 
        néhány osztály esetében?
        <p>
        Először is a <b>segédosztályok</b> létrehozásához.
        ]]>
    </text>
    <boxed title="Segédosztály">
        <![CDATA[
        A segédosztály olyan osztály, amely csak statikus metódusokat tartalmaz. A <i>JDK</i> tartalmaz ilyen osztályokat, 
		például az <b>Arrays</b>-t (metódusok a tömbökhöz, mint például a rendezés), és a <b>Collections</b>-t 
		(hasonló, mint a <i>Arrays</i>, de az adatszerkezetekhez).
        ]]>
    </boxed>
    <text>
        <![CDATA[
        Mivel a segédosztály csak statikus metódusokkal rendelkezik, nincs értelme objektumokat létrehozni belőle. Mint ilyen, a programozók
        teljesen kikapcsolhatják a példányosítását azzal, hogy absztraktnak jelölik.
        ]]>
    </text>
    <advanced title="Rossz szokás?">
        <![CDATA[
        Egyes programozók úgy vélik, hogy a <i>abstract</i> kulcsszót nem szabad használni a segédosztályok esetében, és azt javasolják, hogy egy
        privát konstruktort írjunk inkább. Erről a témáról <a href="https://stackoverflow.com/questions/25223553/how-can-i-create-an-utility-class">itt</a> találsz egy vitát.
        ]]>
    </advanced>
    <text>
        <![CDATA[
        Absztrakt osztályok segítségével jobban leképezhetjük modelljeinket Java kódba. Értsük ezt 
		meg egy példán keresztül:
        <br><br>
        Egy számítógépes szolgáltatást üzemeltetünk. Az ügyfelek számítógépeket hoznak, mindegyikük vagy egy <b>PC</b> vagy egy <b>Laptop</b>. 
		Milyen osztályokra lesz szükség ennek a modellezéséhez?
        ]]>
    </text>
    <list>
        <![CDATA[
        <ul>
        <li>PC és laptop osztályok, természetesen.</li>
        <li>Egy <i>Computer</i> szülő osztály, mivel a PC-k és a laptopok sok közös tulajdonsággal rendelkeznek, 
		és ezt egy közös ősosztály segítségével tudjuk modellezni.</li>
        </ul>
        ]]>
    </list>
    <image name="abstract_hierarchy"/>
    <text>
        <![CDATA[
        Mivel minden hozzánk hozott számítógép vagy PC, vagy laptop, soha nincs szükségünk a <i>Computer</i> osztály példányosítására. Hogy hangsúlyozzuk
        ezt, jelölhetjük absztraktnak. Csak közös szuperosztályként használjuk. Ezt a példát a későbbiekben folytatjuk.
        ]]>
    </text>
    <title text="Absztrakt metódusok"/>
    <text>
        <![CDATA[
        A metódusok is megjelölhetők absztraktként (ebben az esetben az osztálynak, melyhez tartoznak 
		is absztraktnak kell lennie). Az absztrakt metódus egy metódus
        amely <b>deklarálva van, de nincs implementálva</b>. A metódus implementációja a kapcsos zárójelek közti rész. 
		Absztrakt metódus esetén ez nincs:
        ]]>
    </text>
    <code><![CDATA[
        
        <font color="#E65100">public abstract class</font> <font color="#999900">Computer</font> {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">protected</font> <font color="#999900">String</font> processor;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">protected</font> <font color="#DF7401">int</font> ram; <font color="gray">//in gigabytes
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">protected</font> <font color="#999900">Computer</font>(<font color="#999900">String</font> processor, <font color="#DF7401">int</font> ram) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">this</font>.<font color="#ADD8E6">processor</font> = processor;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">this</font>.<font color="#ADD8E6">ram</font> = ram;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public abstract</font> <font color="#DF7401">void</font> <font color="#ADD8E6">printProperties</font>();
<br/>}
        
    ]]></code>
    <text>
        <![CDATA[
        Ennek az osztálynak nem csak egy absztrakt metódusa van, hanem egy konstruktora is! Hol fogjuk használni ezt a konstruktort, ha az osztályt
        amúgy sem lehet példányosítani? Hogyan hívható meg az absztrakt metódus, ha nincs is implementálva?
        <p>
        A válasz az alosztály. Annak a konstruktora meg fogja hívni ennek az osztálynak a konstruktorát, és fogja implementálni az absztrakt metódust 
		(méghozzá úgy, hogy felülírja).
        ]]>
    </text>
    <code><![CDATA[
        
<font color="#E65100">public class</font> <font color="#999900">PC</font> <font color="#E65100">extends</font> <font color="#999900">Computer</font> {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#999900">PC</font>(<font color="#999900">String</font> processor, <font color="#DF7401">int</font> ram) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">super</font>(processor, ram); <font color="gray">//call superclass constructor
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//implement the abstract method of the superclass
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="red">@Override</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#DF7401">void</font> <font color="#ADD8E6">printProperties</font>() {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>("This is a PC.\n" +
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#2E8B57">"Processor: "</font> + processor + "\n" +
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#2E8B57">"RAM amount: "</font> + ram + <font color="#2E8B57">" GB"</font>);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>}
        
    ]]></code>
    <code><![CDATA[
        
        <font color="#E65100">public class</font> <font color="#999900">Laptop</font> <font color="#E65100">extends</font> <font color="#999900">Computer</font> {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">private</font> <font color="#DF7401">int</font> accumulatorTime; <font color="gray">//in minutes
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#999900">Laptop</font>(<font color="#999900">String</font> processor, <font color="#DF7401">int</font> ram, <font color="#DF7401">int</font> accumulatorTime) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">super</font>(processor, ram); <font color="gray">//call superclass constructor
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">this</font>.<font color="#ADD8E6">accumulatorTime</font> = accumulatorTime;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//implement the abstract method of the superclass
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="red">@Override</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#DF7401">void</font> <font color="#ADD8E6">printProperties</font>() {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>("This is a laptop.\n" +
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#2E8B57">"Processor: "</font> + processor + "\n" +
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#2E8B57">"RAM amount: "</font> + ram + " GB\n" +
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#2E8B57">"It can operate for "</font> + accumulatorTime + <font color="#2E8B57">" minutes if fully charged."</font>);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>}
        
    ]]></code>
    <text>
        <![CDATA[
        Az <i>@Override</i> is utatja, hogy itt felülírás történik, de ebben az esetben az alosztálynak 
		<b>meg kell valósítania</b> a metódust.
        ]]>
    </text>
    <title text="Interfészek"/>
    <text>
        <![CDATA[
        Az interfészek teljesen absztrakt osztályok. Ezeket más osztályok <b>implementálhatják</b> (ami azt jelenti, hogy az implementáló
        osztálynak implementációt kell adnia az interfész összes absztrakt metódusához).
        <p>
        Az osztályokhoz hasonlóan deklaráljuk őket, de helyette a <b>interface</b> kulcsszóval:
        ]]>
    </text>
    <code><![CDATA[
        
        <font color="gray">//an interface for classes that can be printed
</font>
<br/><font color="#E65100">public interface</font> <font color="#999900">Printable</font> {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#DF7401">void</font> <font color="#ADD8E6">print</font>(); <font color="gray">//prints the object</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#DF7401">int</font> <font color="#ADD8E6">printedLines</font>(); <font color="gray">//returns how many lines the printed object uses</font>
<br/>
<br/>}
        
    ]]></code>
    <text>
        <![CDATA[
        Alapértelmezés szerint egy interfész minden metódusa <b>absztrakt és nyilvános (public)</b>. Felesleges oda írni 
		ezeket a módosítókat. Az interfészek neve a konvenció szerint egy melléknév, tulajdonság (mint ebben az esetben a <i>Printable</i>, 
		azaz kiírható, kinyomtatható).
		<p>
		Amelyik osztály implementálja az interfészt, azzal jelzi, hogy ő is rendlkezik ezzel a tulajdonsággal.
        ]]>
    </text>
    <interactive instruction="Ennek az interfésznek 2 metódusa van: read és readAll. Egészítsd ki a deklarációt!">
        <data><![CDATA[

<font color="#E65100">public</font> ___ <font color="#999900">Readable</font> {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#DF7401">int</font> <font color="#ADD8E6">read</font>(<font color="#999900">String</font> data);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#DF7401">int</font> <font color="#ADD8E6">___</font>(<font color="#999900">String</font>[] data);
<br/>}

        ]]></data>
        <answer place="0">interface</answer>
        <answer place="1">readAll</answer>
    </interactive>
    <boxed title="Az interfészek célja">
        <![CDATA[
        Az interfészek segítségével egy osztályt arra kényszeríthetünk, hogy rendelkezzen bizonyos metódussal 
		(például a fenti <i>Readable</i>-t implementáló osztály biztosan rendlkezik majd a <i>read</i> és a <i>readAll</i> metódusokkal).  
		<br><br>
		Arra is használják őket, hogy szimulálják a "többszörös" öröklődést. Egy osztály csak egy 
		szülő osztálytól örökölhet, azonban tetszőleges számú interfészt implementálhat (miközben a
        miközben van egy szülő osztálya).
        ]]>
    </boxed>
    <text>
        <![CDATA[
        Most hozzunk létre egy egyszerű osztályt, amely megvalósítja a <i>Printable</i> interfészt (a <b>implements</b> kulcsszót használjuk):
        ]]>
    </text>
    <code><![CDATA[
        
        <font color="gray">//a class that stores an array of strings</font>
<br/><font color="#E65100">class</font> <font color="#999900">Data</font> <font color="#E65100">implements</font> <font color="#999900">Printable</font> {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">private</font> <font color="#999900">String</font>[] strings;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="red">@Override</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#DF7401">void</font> <font color="#ADD8E6">print</font>() { <font color="gray">//prints all strings, each to 1 line</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">for</font>(<font color="#999900">String</font> s: strings) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(s);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="red">@Override</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#DF7401">int</font> <font color="#ADD8E6">printedLines</font>() { <font color="gray">//returns the number of strings</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">return</font> strings.<font color="#ADD8E6">length</font>;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>}
        
    ]]></code>
    <text>
        <![CDATA[
        Több interfész implementálása esetén a neveket vesszővel kell elválasztani a <i>implements</i> kulcsszó után.
        <br><br>
        Ne próbálj meg objektumokat létrehozni interfészekből, mivel ez nem megengedett (végül is ezek absztrakt osztályok).
        ]]>
    </text>
    <advanced title="További interfész funkciók">
        <![CDATA[
        A Java 8 bevezetésekor az interfészek több változáson mentek keresztül. Onnantól statikus 
		metódusokat és tagokat adhatunk hozzá, sőt, még implementációkat is adhatunk a metódusokhoz, 
		a <b>default</b> kulcsszó használatával. Olvasd el <a href="https://www.journaldev.com/2752/java-8-interface-changes-static-method-default-method">ezt</a>
        a cikket, további információkért.
        <p>
        Már nem feltétlenül igaz, hogy egy interfész teljesen absztrakt, ezt a definíciót viszont még mindig gyakran használják 
		(még ebben a fejezetben is).
        <p>
        Erről bővebben a '<b>Java 8</b>' című kurzusban tanulunk majd.
        ]]>
    </advanced>
    <interactive instruction="Használd az előző interaktív mintát a kód kiegészítéséhez!">
        <data><![CDATA[
            
<font color="#E65100">public</font> <font color="#E65100">class</font> <font color="#999900">TextFile</font> ___ <font color="#999900">File</font> ___ <font color="#999900">Readable</font> {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="red">@Override</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#DF7401">int</font> <font color="#ADD8E6">___</font>(<font color="#999900">String</font> data) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//implementation
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="red">@Override</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#DF7401">int</font> <font color="#ADD8E6">readAll</font>(<font color="#999900">String</font>[] data) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//implementation
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>}
    
        ]]></data>
        <answer place="0">extends</answer>
        <answer place="1">implements</answer>
        <answer place="2">read</answer>
    </interactive>
    <!-- abstract class meaning, the abstract keyword: for class and for method
    special class: interface (static and default methods) and the implements keyword -->
</resources>
