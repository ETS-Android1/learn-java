<?xml version="1.0" encoding="utf-8" standalone="no"?>
<!-- Task of course 'Primitives, control flow and I/O' -->
<resources>
    <taskdata>
        <id>102</id>
        <name>Statisztikák</name>
    </taskdata>
    <text>
        <![CDATA[
        Ebben a feladatban egy olyan programot készíts, amely beolvas néhány számot egy fájlból,
        és elvégez rajtuk néhány alapvető statisztikát (a parancssori argumentumoknak megfelelően)!
        ]]>
    </text>
    <boxed title="Az input fájl létrehozása">
        <![CDATA[
        Ez a program egész számokat fog beolvasni a '<b>numbers.txt</b>' nevű fájlból, amit neked kell létrehozni és feltölteni számokkal.
        <p>
        Töltsd fel úgy, hogy minden számnak saját sora legyen, valahogy így:
        <br><br>
        11<br>
        -223<br>
        43<br>
        ...
        <br><br>
        A programod feltételezheti, hogy a fájl csak érvényes egész számokat tartalmaz, de egy elegánsabb megoldás az, ha le van 
		kezelve, hogy mi történik hibás sor esetén.
        ]]>
    </boxed>
    <title text="Parancssori argumentumok"/>
    <text>
        <![CDATA[
        A felhasználó a parancssori argumentumok segítségével mondhatja meg a programnak, hogy milyen műveleteket hajtson végre. A következő
        argumentumokat kell támogatni:
        ]]>
    </text>
    <list>
        <![CDATA[
        <ul>
        <li><b>AVG</b>: ennek az argumentumnak az átadása azt eredményezi, hogy a program a számok átlagát számolja ki.</li>
        <li><b>MAX</b>: ennek az argumentumnak a megadásával a program a számok maximumát számolja ki.</li>
        <li><b>MIN</b>: ennek az argumentumnak a megadásával a programnak a számok minimumát kell kiszámítania.</li>
        <li><b>RANGE</b>: ennek az argumentumnak a megadásával a program a számok tartományát számolja ki.</li>
        </ul>
        ]]>
    </list>
    <boxed title="Definíciók">
        <![CDATA[
        Ha nem tudod, mit jelentenek ezek a statisztikai kifejezések, nézz utána online útmutatókban! A képletek különösen hasznosak, 
		mivel ezeket a programodban is alkalmazhatod.
        ]]>
    </boxed>
    <text>
        <![CDATA[
        Engedje meg a felhasználónak, hogy ezeket az argumentumokat tetszőleges kombinációban adja át. Ha nem adunk meg argumentumot, 
		hibaüzenetet írj ki, és állítsd le a programot. Az alábbi kódmintából megtudhatod, hogyan kell ezt megtenni.
        ]]>
    </text>
    <code><![CDATA[
        
        <font color="#999900">System</font>.<font color="#ADD8E6">exit</font>();
        
    ]]></code>
    <boxed title="Hibás argumentum">
        <![CDATA[
        Érvénytelen argumentum megadása esetén a <b>System.err</b> használatával értesítsd a felhasználót, majd állítsd le a programot.
        ]]>
    </boxed>
    <title text="A számok beolvasása"/>
    <text>
        <![CDATA[
        Olvassa be a számokat a '<b>numbers.txt</b>' fájlból. A lista használata ajánlott, mivel a program nem tudhatja, hogy mennyi
        szám lesz a fájlban!
        ]]>
    </text>
    <advanced title="Hibás sorok kezelése">
        <![CDATA[
        Kivételkezeléssel lehet felkészülni arra, ha a fájl tartalmaz valamilyen érvénytelen sort, amelyet nem lehet konverálni
        egész számmá.
        <p>
        Az egyik lehetséges megoldás az ilyen sor kihagyása (figyelmen kívül hagyása), a másik a program megszakítása.
        ]]>
    </advanced>
    <text>
        <![CDATA[
        A számok beolvasása után ellenőrizd, hogy a lista nem üres-e. Az üres lista azt jelenti, hogy a fájl is üres volt, 
		így pedig nem lehet műveleteket végezni.
        ]]>
    </text>
    <title text="A műveletek elvégzése"/>
    <text>
        <![CDATA[
        Az összes számot írd ki a konzolra. Ezután menj végig a megadott parancssori argumentumokon, és hajtsd végre 
		a felhasználó által kért műveleteket.
        <p>
        A programnak mindig ki kell írnia, hogy milyen műveleteket hajt végre, és az adott művelet eredményét.
        ]]>
    </text>
    <boxed title="Metódus ajánlás">
        <![CDATA[
        Javaslom, hogy minden statisztikai művelethez hozz létre egy metódust. Ezek például megkaphatják a számok listáját paraméterként, 
		és visszaadhatják az eredményt.
        ]]>
    </boxed>
    <boxed title="String-ek összehasonlítása">
        <![CDATA[
        A <i>String</i>-ek összehasonlításához használd az <a href="https://www.tutorialspoint.com/java/java_string_equals.htm">equals</a> 
		metódust a <b>==</b> operátor helyett! Ennek okait egy későbbi kurzusban ismertetjük.
        ]]>
    </boxed>
    <solution>
        <text>
            <![CDATA[
            Egy osztály és néhány metódus elegendő a feladat megoldásához. Bár a leírás szerint
            a program feltételezheti, hogy a fájlban lévő sorok érvényesek, ez a megoldás a hibás sorokat is lekezeli, méghozzá azok kihagyásával. 
            ]]>
        </text>
        <code><![CDATA[
            
<font color="#E65100">package</font> taskstat;
<br/>
<br/><font color="#E65100">import</font> java.<font color="#ADD8E6">io</font>.<font color="#999900">IOException</font>;
<br/><font color="#E65100">import</font> java.<font color="#ADD8E6">nio</font>.<font color="#ADD8E6">file</font>.<font color="#999900">Files</font>;
<br/><font color="#E65100">import</font> java.<font color="#ADD8E6">nio</font>.<font color="#ADD8E6">file</font>.<font color="#999900">Path</font>;
<br/><font color="#E65100">import</font> java.<font color="#ADD8E6">nio</font>.<font color="#ADD8E6">file</font>.<font color="#999900">Paths</font>;
<br/><font color="#E65100">import</font> java.<font color="#ADD8E6">util</font>.<font color="#999900">ArrayList</font>;
<br/><font color="#E65100">import</font> java.<font color="#ADD8E6">util</font>.<font color="#999900">List</font>;
<br/>
<br/><font color="#E65100">public class</font> <font color="#999900">Main</font> {
<br/>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public static</font> <font color="#DF7401">void</font> <font color="#ADD8E6">main</font>(<font color="#999900">String</font>[] args) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//remove all invalid arguments
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">ArrayList</font>&lt;<font color="#999900">String</font>> validatedArgs = <font color="#ADD8E6">validateArguments</font>(args);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//read the contents of the file into integers
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">ArrayList</font>&lt;<font color="#999900">Integer</font>> numbers = <font color="#ADD8E6">readNumbers</font>();
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//print numbers
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(<font color="#2E8B57">"The numbers:"</font>);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">for</font>(<font color="#DF7401">int</font> number: numbers) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">print</font>(number + <font color="#2E8B57">", "</font>);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>();
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//perform the statistics
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">for</font>(<font color="#999900">String</font> operation: validatedArgs) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">if</font>(operation.<font color="#ADD8E6">equals</font>(<font color="#2E8B57"><font color="#2E8B57">"AVG"</font></font>)) { <font color="gray">//average
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(<font color="#2E8B57">"The average is: "</font> + <font color="#ADD8E6">findAverage</font>(numbers));
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;} <font color="#E65100">else</font> <font color="#ADD8E6">if</font>(operation.<font color="#ADD8E6">equals</font>(<font color="#2E8B57"><font color="#2E8B57">"MAX"</font></font>)) { <font color="gray">//median
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(<font color="#2E8B57">"The maximum is: "</font> + <font color="#ADD8E6">findMax</font>(numbers));
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;} <font color="#E65100">else</font> <font color="#ADD8E6">if</font>(operation.<font color="#ADD8E6">equals</font>(<font color="#2E8B57"><font color="#2E8B57">"MIN"</font></font>)) { <font color="gray">//median
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(<font color="#2E8B57">"The minimum is: "</font> + <font color="#ADD8E6">findMin</font>(numbers));
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;}  <font color="#E65100">else</font> <font color="#ADD8E6">if</font>(operation.<font color="#ADD8E6">equals</font>(<font color="#2E8B57"><font color="#2E8B57">"RANGE"</font></font>)) { <font color="gray">//range
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(<font color="#2E8B57">"The range is: "</font> + <font color="#ADD8E6">findRange</font>(numbers));
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//check the arguments, removing invalid ones.
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">static</font> <font color="#999900">ArrayList</font>&lt;<font color="#999900">String</font>> <font color="#ADD8E6">validateArguments</font>(<font color="#999900">String</font>[] args) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">ArrayList</font>&lt;<font color="#999900">String</font>> validated = <font color="#E65100">new</font> <font color="#999900">ArrayList</font>&lt;>();
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">for</font>(<font color="#999900">String</font> arg: args) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//only keep valid arguments
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">if</font>(arg.<font color="#ADD8E6">equals</font>(<font color="#2E8B57"><font color="#2E8B57">"AVG"</font></font>) || arg.equals(<font color="#2E8B57"><font color="#2E8B57">"RANGE"</font></font>) ||
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;arg.<font color="#ADD8E6">equals</font>(<font color="#2E8B57"><font color="#2E8B57">"MAX"</font></font>) || arg.equals(<font color="#2E8B57"><font color="#2E8B57">"MIN"</font></font>)) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">/*
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;We can use the contains method to check if the argument is
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;already added. This way the program will work correctly, even
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;if the user enters the same argument multiple times!
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp; */</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">if</font>(!validated.<font color="#ADD8E6">contains</font>(arg)) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;validated.<font color="#ADD8E6">add</font>(arg);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;} <font color="#E65100">else</font> {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//notify the user about the invalid argument
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">err</font>.<font color="#ADD8E6">println</font>(<font color="#2E8B57">"Invalid argument: "</font> + arg);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">if</font>(validated.<font color="#ADD8E6">size</font>() == <font color="#F0E130">0</font>) { <font color="gray<font color="#2E8B57">">//if there aren'</font>t any valid arguments
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">err</font>.<font color="#ADD8E6">println</font>(<font color="#2E8B57">"No valid arguments found!"</font>);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">exit</font>(<font color="#F0E130">0</font>);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">return</font> validated;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//reads the lines and parses them into integers
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">static</font> <font color="#999900">ArrayList</font>&lt;<font color="#999900">Integer</font>> <font color="#ADD8E6">readNumbers</font>() {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">Path</font> filePath = <font color="#999900">Paths</font>.<font color="#ADD8E6">get</font>(<font color="#2E8B57">"numbers.txt"</font>);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//we must declare it here, so we can use it below the try block
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">List</font>&lt;<font color="#999900">String</font>> lines = null;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">try</font> { <font color="gray">//this solution uses exception handling
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;lines = <font color="#999900">Files</font>.<font color="#ADD8E6">readAllLines</font>(filePath);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;} <font color="#E65100">catch</font> (<font color="#999900">IOException</font> e) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">err</font>.<font color="#ADD8E6">println</font>(<font color="#2E8B57">"File reading exception"</font>);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">exit</font>(<font color="#F0E130">0</font>);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//create empty list of numbers
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">ArrayList</font>&lt;<font color="#999900">Integer</font>> numbers = <font color="#E65100">new</font> <font color="#999900">ArrayList</font>&lt;>();
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//try to parse each line to an integer, and add it to the list
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">for</font>(<font color="#999900">String</font> line: lines) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">try</font> {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;numbers.<font color="#ADD8E6">add</font>(<font color="#999900">Integer</font>.<font color="#ADD8E6">parseInt</font>(line));
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;} <font color="#E65100">catch</font>(<font color="#999900">NumberFormatException</font> e) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;continue; <font color="gray<font color="#2E8B57">">//ignore the line if it'</font>s invalid
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//check if we actually got any numbers
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">if</font>(numbers.<font color="#ADD8E6">isEmpty</font>()) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">err</font>.<font color="#ADD8E6">println</font>(<font color="#2E8B57">"No valid numbers in the file!"</font>);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">exit</font>(<font color="#F0E130">0</font>);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">return</font> numbers;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">static</font> <font color="#DF7401">double</font> <font color="#ADD8E6">findAverage</font>(<font color="#999900">ArrayList</font>&lt;<font color="#999900">Integer</font>> numbers) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#DF7401">double</font> sum = <font color="#F0E130">0</font>; <font color="gray">//calculate the sum of them
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">for</font>(<font color="#DF7401">int</font> number: numbers) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;sum = sum + number;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//the average is the sum divided by the amount of numbers
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">return</font> sum / numbers.<font color="#ADD8E6">size</font>();
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">static</font> <font color="#DF7401">int</font> <font color="#ADD8E6">findMax</font>(<font color="#999900">ArrayList</font>&lt;<font color="#999900">Integer</font>> numbers) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#DF7401">int</font> max = <font color="#999900">Integer</font>.MIN_VALUE; <font color="gray">//start from the lowest possible
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">for</font>(<font color="#DF7401">int</font> number: numbers) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">if</font>(number > max) { <font color="gray">//we found a larger number
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;max = number;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">return</font> max;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">static</font> <font color="#DF7401">int</font> <font color="#ADD8E6">findMin</font>(<font color="#999900">ArrayList</font>&lt;<font color="#999900">Integer</font>> numbers) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#DF7401">int</font> min = <font color="#999900">Integer</font>.MAX_VALUE; <font color="gray">//start from the highest possible
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">for</font>(<font color="#DF7401">int</font> number: numbers) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">if</font>(number &lt; min) { <font color="gray">//we found a smaller number
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;min = number;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">return</font> min;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">static</font> <font color="#DF7401">int</font> <font color="#ADD8E6">findRange</font>(<font color="#999900">ArrayList</font>&lt;<font color="#999900">Integer</font>> numbers) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//the range is the difference between the max and the min numbers
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">return</font> <font color="#ADD8E6">findMax</font>(numbers) - <font color="#ADD8E6">findMin</font>(numbers);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>}
            
        ]]></code>
        <text>
            <![CDATA[
            Érdemes megjegyezni, hogy a <b>Collections</b> segédosztály rendelkezik olyan metódusokkal, amelyekkel megtalálhatjuk a maximumot
            és a minimumot, így a metódusok leegyszerűsíthetők erre (vagy helyettesíthetők a segédprogram metódusaival):
            ]]>
        </text>
        <code><![CDATA[
            
<font color="#E65100">static</font> <font color="#DF7401">int</font> <font color="#ADD8E6">findMax</font>(<font color="#999900">ArrayList</font>&lt;<font color="#999900">Integer</font>> numbers) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">return</font> <font color="#999900">Collections</font>.<font color="#ADD8E6">max</font>(numbers);
<br/>}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/><font color="#E65100">static</font> <font color="#DF7401">int</font> <font color="#ADD8E6">findMin</font>(<font color="#999900">ArrayList</font>&lt;<font color="#999900">Integer</font>> numbers) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">return</font> <font color="#999900">Collections</font>.<font color="#ADD8E6">min</font>(numbers);
<br/>}
            
        ]]></code>
    </solution>
</resources>
