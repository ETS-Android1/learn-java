<?xml version="1.0" encoding="utf-8" standalone="no"?>
<resources>
    <taskdata>
        <id>352</id>
        <name>Folyam implementáció</name>
    </taskdata>
    <text>
        <![CDATA[
        A feladatod egy olyan generikus osztály létrehozása, amely úgy viselkedik, mint a <i>java.util.stream.Stream</i>, 
		azaz a <i>Java 8</i>-as folyam.
        ]]>
    </text>
    <boxed title="Más mint az igazi">
        <![CDATA[
        A valódi <i>Stream</i> interfész és annak megvalósítása nagyon bonyolult. Ebben a feladatban csak 
        egy, az eredetihez hasonlóan működő osztályt kell készíteni, és még csak nem is kell az összes 
		folyam műveletet implementálnod.
        ]]>
    </boxed>
    <text>
        <![CDATA[
        Javaslom, hogy használj egy kollekciót a "folyam" elemeinek tárolására. Az én megoldásomban egy 
		listát fogok használni.
        ]]>
    </text>
    <title text="Konverziók"/>
    <text>
        <![CDATA[
        Legyen az osztályodnak egy statikus metódusa, amely bármilyen <i>Collection</i>-t képes átalakítani 
		a te saját folyamoddá. Rejtsd el a konstruktort (privát), hogy csak ezzel a metódussal lehessen 
		példányosítani.
        ]]>
    </text>
    <boxed title="Begyűjtés">
        <![CDATA[
        A "folyam" kollekciókká való visszaalakításához két metódusod legyen, a <i>collectToList</i> és a 
		<i>collectToSet</i> (listává és halmazzá). Nem kell bajlódnod a <i>Collectors</i>-hoz hasonló osztályok 
		írásával.
        ]]>
    </boxed>
    <title text="Műveletek"/>
    <text>
        <![CDATA[
        Legalább a következő folyamműveleteket valósítsd meg az osztályodban:
        ]]>
    </text>
    <list>
        <![CDATA[
        <ul>
        <li>Szűrés.</li>
        <li>Leképezés egy másik folyamra (<i>map</i>).</li>
        <li>Feltétel ellenőrzése: az <i>anyMatch</i> és <i>allMatch</i> metódusok.</li>
        <li>Számlálás.</li>
        <li>Iterálás: a <i>forEach</i> metódus.</li>
        <li>Az első elem keresése: a <i>findFirst</i> metódus.</li>
        </ul>
        ]]>
    </list>
    <advanced title="Több művelet">
        <![CDATA[
        Nyugodtan készítsd el további folyamműveleteket. Az eredeti <i>Stream</i>-et böngészheted ötletekért 
        <a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html">itt</a>.
        ]]>
    </advanced>
    <text>
        <![CDATA[
        Fontos, hogy minden folyamműveletünk <b>funkcionális interfészeket</b> fogadjon paraméterként, ahogyan a
        valódiak. Ez lehetővé teszi a lambda kifejezések átadását. Győződj meg arról is, hogy "láncolni" tudod a
        műveleteket. Ezt a helyes visszatérési értékekkel érheted el.
        ]]>
    </text>
    <boxed title="Valódi folyam használata">
        <![CDATA[
        Használhatod az eredeti <i>Stream</i>-et az implementációdban, de azt javaslom, hogy ne tedd, 
		mivel ez zavart okozhat (a metódusnevek ugyanazok lesznek, mint a te metódusaid).
        ]]>
    </boxed>
    <solution>
        <text>
            <![CDATA[
            Létrehoztam a <i>MyStream</i> osztályt, amely minden szükséges műveletet megvalósít:
            ]]>
        </text>
        <code><![CDATA[
            
<font color="#E65100">public</font> <font color="#E65100">class</font> <font color="#999900">MyStream</font>&lt;<font color="#999900">T</font>> {
<br/>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//tárolja a folyam elemeit
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">private</font> <font color="#E65100">final</font> <font color="#999900">List</font>&lt;<font color="#999900">T</font>> elements;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//statikus metódus a folyamok létrehozására
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#E65100">static</font> &lt;<font color="#999900">T</font>> <font color="#999900">MyStream</font>&lt;<font color="#999900">T</font>> <font color="#ADD8E6">of</font>(<font color="#999900">Collection</font>&lt;<font color="#999900">T</font>> collection) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">return</font> <font color="#E65100">new</font> <font color="#999900">MyStream</font>&lt;>(collection);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//rejtett konstruktor
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">private</font> <font color="#999900">MyStream</font>(<font color="#999900">Collection</font>&lt;<font color="#999900">T</font>> collection) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;elements = <font color="#E65100">new</font> <font color="#999900">LinkedList</font>&lt;<font color="#999900">T</font>>(collection);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//begyűjtés listába
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#999900">List</font>&lt;<font color="#999900">T</font>> <font color="#ADD8E6">collectToList</font>() {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">return</font> <font color="#E65100">new</font> <font color="#999900">LinkedList</font>&lt;<font color="#999900">T</font>>(elements);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//begyűjtés halmazba
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#999900">Set</font>&lt;<font color="#999900">T</font>> <font color="#ADD8E6">collectToSet</font>() {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">return</font> <font color="#E65100">new</font> <font color="#999900">HashSet</font>&lt;<font color="#999900">T</font>>(elements);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//szűrés
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#999900">MyStream</font>&lt;<font color="#999900">T</font>> <font color="#ADD8E6">filter</font>(<font color="#999900">Predicate</font>&lt;<font color="#999900">T</font>> predicate) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">/*
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp; * Másolat készítése, mivel ConcurrentModificationException
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp; * keletkezik, ha az eredetiből távolítasz el elemeket.
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp; */</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">List</font>&lt;<font color="#999900">T</font>> copy = <font color="#E65100">new</font> <font color="#999900">LinkedList</font>&lt;>(elements);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//iterálás a másolaton és eltávolítás az eredetiből
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">for</font>(<font color="#999900">T</font> element: copy) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">if</font>(!predicate.<font color="#ADD8E6">test</font>(element)) elements.<font color="#ADD8E6">remove</font>(element);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">return</font> <font color="#E65100">this</font>;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//leképezés egy másik folyamba
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> &lt;<font color="#999900">S</font>> <font color="#999900">MyStream</font>&lt;<font color="#999900">S</font>> <font color="#ADD8E6">map</font>(<font color="#999900">Function</font>&lt;<font color="#999900">T</font>,<font color="#999900">S</font>> mapper) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">List</font>&lt;<font color="#999900">S</font>> newElements = <font color="#E65100">new</font> <font color="#999900">LinkedList</font>&lt;>();
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//összes átalakítása
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">for</font>(<font color="#999900">T</font> element: elements) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;newElements.<font color="#ADD8E6">add</font>(mapper.<font color="#ADD8E6">apply</font>(element));
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">return</font> <font color="#E65100">new</font> <font color="#999900">MyStream</font>&lt;>(newElements);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//anyMatch metódus
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#DF7401">boolean</font> <font color="#ADD8E6">anyMatch</font>(<font color="#999900">Predicate</font>&lt;<font color="#999900">T</font>> predicate) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">for</font>(<font color="#999900">T</font> element: elements) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">if</font>(predicate.<font color="#ADD8E6">test</font>(element)) <font color="#E65100">return true</font>;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">return false</font>;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//allMatch metódus
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#DF7401">boolean</font> <font color="#ADD8E6">allMatch</font>(<font color="#999900">Predicate</font>&lt;<font color="#999900">T</font>> predicate) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">for</font>(<font color="#999900">T</font> element: elements) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">if</font>(!predicate.<font color="#ADD8E6">test</font>(element)) <font color="#E65100">return false</font>;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">return true</font>;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//számlálás
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#DF7401">int</font> <font color="#ADD8E6">count</font>() {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">return</font> elements.<font color="#ADD8E6">size</font>();
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//iterálás
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#DF7401">void</font> <font color="#ADD8E6">forEach</font>(<font color="#999900">Consumer</font>&lt;<font color="#999900">T</font>> consumer) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">for</font>(<font color="#999900">T</font> element: elements) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;consumer.<font color="#ADD8E6">accept</font>(element);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//első elem, ha van
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#999900">Optional</font>&lt;<font color="#999900">T</font>> <font color="#ADD8E6">findFirst</font>() {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">if</font>(elements.<font color="#ADD8E6">size</font>() > <font color="#F0E130">0</font>) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">return</font> <font color="#999900">Optional</font>.<font color="#ADD8E6">of</font>(elements.<font color="#ADD8E6">get</font>(<font color="#F0E130">0</font>));
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;} <font color="#E65100">else</font> {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">return</font> <font color="#999900">Optional</font>.<font color="#ADD8E6">empty</font>();
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>}
            
        ]]></code>
    </solution>
</resources>
