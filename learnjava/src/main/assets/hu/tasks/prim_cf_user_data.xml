<?xml version="1.0" encoding="utf-8" standalone="no"?>
<!-- Task of course 'Primitives, control flow and I/O' --><resources>
    <taskdata>
        <id>101</id>
        <name>Felhasználó adatainak kezelése</name>
    </taskdata>

    <text>
        <![CDATA[
        A feladatod egy olyan program létrehozása, amely beolvassa a felhasználó adatait (név, életkor, stb...), és végrehajt néhány
        műveletet ezen adatok alapján. Végül a műveletel eredményeit megjeleníti a konzolon, és elmenti őket egy szöveges fájlba.
        ]]>
    </text>
    <boxed title="Jelenlegi év meghatározása">
        <![CDATA[
        Ennek a programnak ismernie kell majd az aktuális évet. Az aktuális év beleírása rossz szokás, mivel a kód így a jövő 
		évben futtatva már helytelen eredményt ad (valódi programoknál ez komoly hibákhoz vezet). Ehelyett nézzük meg a következő kódmintát, 
		amely megmutatja, hogyan kapjuk meg az aktuális évet egész számként változó:
        ]]>
    </boxed>
    <code><![CDATA[
        
        <font color="#DF7401">int</font> year = <font color="#999900">Year</font>.<font color="#ADD8E6">now</font>().<font color="#ADD8E6">getValue</font>();
        
    ]]></code>
    <text>
        <![CDATA[
        Ez a kód a <a href="https://docs.oracle.com/javase/8/docs/api/java/time/package-summary.html">java.time</a> csomagot 
		használja, amely a Java 8-cal jelent meg.
        ]]>
    </text>
    <title text="Szükséges inputok"/>
    <text>
        <![CDATA[
        A programnak egy parancssori argumentumra van szüksége. Ez lehet SAVE vagy NO_SAVE. Ha ez <b>SAVE</b>, akkor a program a
        a programnak el kell végeznie a "mentés fájlba" bekezdésben részletezett feladatokat. Ha <b>NO_SAVE</b>, akkor ezeket a feladatokat 
		a programnak nem kell végrehajtani.
        ]]>
    </text>
    <boxed title="Hibás parancssori argumentum">
        <![CDATA[
        Ha nem adunk meg argumentumot, vagy ha nem SAVE vagy NO_SAVE, akkor a <b>System.err</b> csatornát kell használni a
        jelezni a problémát, és a programnak meg kell állnia. A program leállításához használjuk az alábbi kódmintát.
        <br><br>
        A <i>String</i>-ek összehasonlításához használd az <a href="https://www.tutorialspoint.com/java/java_string_equals.htm">equals metódust</a> 
        a <b>==</b> operátor helyett! Ennek okait egy későbbi kurzusban ismertetjük.
        ]]>
    </boxed>
    <code><![CDATA[
        
        <font color="#999900">System</font>.<font color="#ADD8E6">exit</font>();
        
    ]]></code>
    <text>
        <![CDATA[
        Induláskor, a parancssori argumentum ellenőrzése után a programnak meg kell kérdeznie a felhasználótól a nevét, életkorát és foglalkozását. 
		Tárolja ezeket a megfelelő változókban, mivel ezeket a későbbiekben használni fogjuk.
        ]]>
    </text>
    <boxed title="Hibás inputok">
        <![CDATA[
        Próbáld meg a megadott adatokat validálni. Például a programod ne fogadja el, ha a felhasználó nem ad meg semmit a név vagy a 
		szakma esetében, vagy negatív életkort ad meg. Hibás input esetén írj a <i>System.err</i>-re üzenetet!
        ]]>
    </boxed>
    <advanced title="Korral kapcsolatos hibás kezelése">
        <![CDATA[
        A megadott életkor egész számra lesz konvertálva. Hogy a programodat stabilabbá tedd, megpróbálhatod implementálni a
        kivételkezelést a <b>NumberFormatException</b> esetére.
        <p>
        Használd a <a href="https://www.javatpoint.com/try-catch-block">try-catch blokkot</a>, hogy értesítsd a felhasználót a problémáról 
        a program összeomlása helyett. Persze mivel ezt még nem vettük, ezért nem kötelező.
        ]]>
    </advanced>
    <title text="Az adatok kezelése"/>
    <text>
        <![CDATA[
        Ezen a ponton a bemeneteket már biztosan helyesek. Számítsd ki és írd a konzolra a következő dolgokat:
        ]]>
    </text>
    <list>
        <![CDATA[
        <ul>
        <li>A felhasználó születési éve.</li>
        <li>Az év, amikor a felhasználó 18 éves lett. Ha még nem töltötte be a 18. életévét, akkor ezt kell kiírni.</li>
        <li>Az összes év, amelyben a felhasználó élt (a részleteket lásd alább).</li>
        </ul>
        ]]>
    </list>
    <boxed title="Évek">
        <![CDATA[
        Azon éveket, amikor a felhasználó élt egy <b>listában vagy tömbben</b> kell tárolni (a lista az elegánsabb). Az éveket ki kell írni a
        konzolra vesszővel elválasztva úgy, hogy minden 6. év után <b>sortörés</b> legyen.
        ]]>
    </boxed>
    <title text="Fájlba írás"/>
    <text>
        <![CDATA[
        Ha a felhasználó átadta a <b>SAVE</b> parancssori argumentumot, hajtsd végre a következő műveleteket:
        ]]>
    </text>
    <list>
        <![CDATA[
        <ul>
        <li>Hozz létre egy "userdata.txt" nevű fájlt.</li>
        <li>Minden futtatásnál törlődjön a fájl tartalma (azaz ne a hozzáírást használd).</li>
        <li>A fájlba írd be a nevet, a kort és a foglalkozást, formázottan.</li>
        <li>Az éveket, amikor a felhasználó élt, a fent megadott formázással írja be a fájlba.</li>
        </ul>
        ]]>
    </list>
    <text>
        <![CDATA[
        Nyugodtan használd a 'bemenet' és 'kimenet' fejezetekben bemutatott módot a fájlokkal kapcsolatos kivételek megkerülésére.
        ]]>
    </text>
    <advanced title="Fájlokkal kapcsolatos kivételek">
        <![CDATA[
        Ha azonban elegánsabbá szeretnéd tenni a kódot, próbáld meg kezelni a fájlokkal kapcsolatos kivételeket ahelyett, 
		hogy "elnyomnád" őket a <i>throws Exception</i> módszerrel.
        ]]>
    </advanced>
    <boxed title="Emlékeztető: szokások">
        <![CDATA[
        Ne felejtsd el betartani a kódolási konvenciókat. Kommentáld a kódodat! Írj metódusokat a részfeladatokhoz, és használd a
        paramétereket és visszatérési értékeket a közöttük való kommunikációhoz!
        ]]>
    </boxed>

    <solution>
    <text>
        <![CDATA[
        Ez a megoldás csak egy osztályt és néhány metódust használ. A kivételek kezelése nem volt kötelező, de
        ebben a példamegoldásban implementálva van.
        ]]>
    </text>
    <code><![CDATA[
        
<font color="#E65100">package</font> userinput;
<br/>
<br/><font color="#E65100">import</font> java.<font color="#ADD8E6">io</font>.<font color="#999900">IOException</font>;
<br/><font color="#E65100">import</font> java.<font color="#ADD8E6">io</font>.<font color="#999900">PrintWriter</font>;
<br/><font color="#E65100">import</font> java.<font color="#ADD8E6">time</font>.<font color="#999900">Year</font>;
<br/><font color="#E65100">import</font> java.<font color="#ADD8E6">util</font>.<font color="#999900">InputMismatchException</font>;
<br/><font color="#E65100">import</font> java.<font color="#ADD8E6">util</font>.<font color="#999900">Scanner</font>;
<br/>
<br/><font color="#E65100">public class</font> <font color="#999900">Main</font> {
<br/>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public static</font> <font color="#DF7401">void</font> <font color="#ADD8E6">main</font>(<font color="#999900">String</font>[] args) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//check the command line argument
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#DF7401">boolean</font> save = <font color="#ADD8E6">saveEnabled</font>(args);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//ask for user data
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">Scanner</font> scanner = <font color="#E65100">new</font> <font color="#999900">Scanner</font>(<font color="#999900">System</font>.<font color="#ADD8E6">in</font>);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">print</font>(<font color="#2E8B57">"Enter your name: "</font>);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">String</font> name = scanner.<font color="#ADD8E6">nextLine</font>();
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">print</font>(<font color="#2E8B57">"Enter your age: "</font>);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#DF7401">int</font> age = <font color="#F0E130">0</font>;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">try</font> { <font color="gray">//exception handling for age
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;age = <font color="#999900">Integer</font>.<font color="#ADD8E6">parseInt</font>(scanner.<font color="#ADD8E6">nextLine</font>());
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;} <font color="#E65100">catch</font>(<font color="#999900">InputMismatchException</font> e) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">err</font>.<font color="#ADD8E6">println</font>(<font color="#2E8B57">"Error: invalid age!"</font>);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">exit</font>(<font color="#F0E130">0</font>);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">print</font>("What is your profession? ");
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">String</font> prof = scanner.<font color="#ADD8E6">nextLine</font>();
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;scanner.<font color="#ADD8E6">close</font>();
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#ADD8E6">validateData</font>(name, prof, age); <font color="gray">//check inputs
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#ADD8E6">ageCalculations</font>(age); <font color="gray">//age related tasks
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">if</font>(save) { <font color="gray">//if saving is active, write to file
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#ADD8E6">saveToFile</font>(name, prof, age);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">/*
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;This method checks if saving is enabled using the command line arguments.
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;If the argument is valid a boolean is returned that indicates if saving is enabled.
<br/>	&nbsp;&nbsp;&nbsp;&nbsp; */</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">static</font> <font color="#DF7401">boolean</font> <font color="#ADD8E6">saveEnabled</font>(<font color="#999900">String</font>[] args) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">if</font>(args.<font color="#ADD8E6">length</font> != <font color="#F0E130">1</font>) { <font color="gray">//1 argument is allowed
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">err</font>.<font color="#ADD8E6">println</font>(<font color="#2E8B57">"Wrong number of args!"</font>);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">exit</font>(<font color="#F0E130">0</font>);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">if</font>(args[<font color="#F0E130">0</font>].<font color="#ADD8E6">equals</font>(<font color="#2E8B57">"SAVE"</font>)) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">return</font> true;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;} <font color="#E65100">else</font> <font color="#ADD8E6">if</font>(args[<font color="#F0E130">0</font>].<font color="#ADD8E6">equals</font>(<font color="#2E8B57">"NO_SAVE"</font>)) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">return</font> false;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;} <font color="#E65100">else</font> { <font color="gray">//unknown argument
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">err</font>.<font color="#ADD8E6">println</font>(<font color="#2E8B57">"Invalid argument: "</font> + args[<font color="#F0E130">0</font>]);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">exit</font>(<font color="#F0E130">0</font>);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">/*
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;the program won't get to this return statement,
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;but the compiler requires it.
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp; */</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">return</font> false;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//this method checks if the user entered valid inputs
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">static</font> <font color="#DF7401">void</font> <font color="#ADD8E6">validateData</font>(<font color="#999900">String</font> name, <font color="#999900">String</font> prof, <font color="#DF7401">int</font> age) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//the length method counts the characters in a string!
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">if</font>(name.<font color="#ADD8E6">length</font>() == <font color="#F0E130">0</font> || prof.<font color="#ADD8E6">length</font>() == <font color="#F0E130">0</font>) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">err</font>.<font color="#ADD8E6">println</font>(<font color="#2E8B57">"Empty string is not accepted!"</font>);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">exit</font>(<font color="#F0E130">0</font>);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">if</font>(age &lt; <font color="#F0E130">0</font>) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">err</font>.<font color="#ADD8E6">println</font>(<font color="#2E8B57">"Age can'</font>t be negative!");
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">exit</font>(<font color="#F0E130">0</font>);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//performs the age related tasks
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">static</font> <font color="#DF7401">void</font> <font color="#ADD8E6">ageCalculations</font>(<font color="#DF7401">int</font> age) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//calculate the birth year
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#DF7401">int</font> currentYear = <font color="#999900">Year</font>.<font color="#ADD8E6">now</font>().<font color="#ADD8E6">getValue</font>();
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#DF7401">int</font> birthYear = currentYear - age;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>("\nYou were born in " + birthYear);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//calculate the year of becoming 18
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">if</font>(age >= <font color="#F0E130">18</font>) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(<font color="#2E8B57">"You turned 18 in "</font> + (birthYear+<font color="#F0E130">18</font>));
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;} <font color="#E65100">else</font> {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(<font color="#2E8B57">"You are not yet 18!"</font>);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//print all years in which the user is/was alive
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(<font color="#2E8B57">"The years you were alive in are:"</font>);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(<font color="#ADD8E6">createYearsString</font>(age));
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">/*
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;Makes a string that contains the years the user was
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;alive in.
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;This is extracted to a method so it can be reused when
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;printing to the file as well.
<br/>	&nbsp;&nbsp;&nbsp;&nbsp; */</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">static</font> <font color="#999900">String</font> <font color="#ADD8E6">createYearsString</font>(<font color="#DF7401">int</font> age) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#DF7401">int</font> currentYear = <font color="#999900">Year</font>.<font color="#ADD8E6">now</font>().<font color="#ADD8E6">getValue</font>();
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#DF7401">int</font> birthYear = currentYear - age;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//the string is empty at the beginning
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">String</font> printedYears = "";
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#DF7401">int</font> columnCounter = <font color="#F0E130">0</font>; <font color="gray">//this is used to format the years
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">for</font>(<font color="#DF7401">int</font> year = birthYear; year &lt;= currentYear; year++) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//add the next year to the string
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;printedYears = printedYears + year + <font color="#2E8B57">", "</font>;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;columnCounter++;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">if</font>(columnCounter == <font color="#F0E130">6</font>) { <font color="gray">//break line at column 6
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;printedYears = printedYears + "\n";
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;columnCounter = <font color="#F0E130">0</font>;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">return</font> printedYears;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//creates a file and writes the data into it
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">static</font> <font color="#DF7401">void</font> <font color="#ADD8E6">saveToFile</font>(<font color="#999900">String</font> name, <font color="#999900">String</font> profession, <font color="#DF7401">int</font> age) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">try</font> { <font color="gray">//this solution uses exception handling
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">PrintWriter</font> writer = <font color="#E65100">new</font> <font color="#999900">PrintWriter</font>("userdata.<font color="#ADD8E6">txt</font><font color="#2E8B57">", "</font>UTF-8");
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//writer all data into the file
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;writer.<font color="#ADD8E6">println</font>(<font color="#2E8B57">"Name: "</font> + name);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;writer.<font color="#ADD8E6">println</font>(<font color="#2E8B57">"Age: "</font> + age);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;writer.<font color="#ADD8E6">println</font>(<font color="#2E8B57">"Profession:"</font> + profession);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;writer.<font color="#ADD8E6">println</font>(<font color="#2E8B57">"Years alive: "</font>);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;writer.<font color="#ADD8E6">println</font>(<font color="#ADD8E6">createYearsString</font>(age));
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;writer.<font color="#ADD8E6">close</font>();
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;} <font color="#E65100">catch</font>(<font color="#999900">IOException</font> e) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">err</font>.<font color="#ADD8E6">println</font>(<font color="#2E8B57">"File writing exception!"</font>);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>}
        
    ]]></code>
    <text>
        <![CDATA[
        Ha elemezni akarod, haladj metódusról metódusra, kezdve a <i>main</i>-től.
        <p>
        Attól függően, hogy melyik részeket szedted ki metódusba, a megoldásod teljesen másképp nézhet ki, de ez nem
        azt jelenti, hogy biztosan rossz!
        ]]>
    </text>
    </solution>
</resources>
