<?xml version="1.0" encoding="utf-8" standalone="no"?>
<resources>
    <taskdata>
        <id>251</id>
        <name>Étkező filozófusok</name>
    </taskdata>
    <text>
        <![CDATA[
        Az étkező filozófusok problémája egy híres párhuzamos programozási feladat, amelyet arra használnak, hogy bemutassák a 
        holtpontot és annak lehetséges megoldásait.
        ]]>
    </text>
    <title text="A probléma"/>
    <text>
        <![CDATA[
        Adott egy asztal, amelyen 5 tányér és 5 villa van, körben. Ezután 5 filozófus megpróbál leülni és enni (egymás után többször is).
        az asztalnál.
        ]]>
    </text>
    <image name="dining_philo"/>
    <text>
        <![CDATA[
        Az étkezések a következő szabályokat követik:
        ]]>
    </text>
    <list>
        <![CDATA[
        <ul>
        <li>A filozófusnak először le kell ülnie az asztalhoz.</li>
        <li>Ezután meg kell ragadnia a jobb oldali villáját.</li>
        <li>Aztán meg kell szereznie a bal villát is.</li>
        <li>Most a filozófus ehet.</li>
        <li>Az evés után el kell engednie mindkét villát, és fel kell állnia az asztaltól.</li>
        </ul>
        ]]>
    </list>
    <boxed title="Mi lesz a gond?">
        <![CDATA[
        A problémát az okozza, hogy csak 5 villa van az asztalon, a filozófusok pedig mohók, ők
        mindannyian igyekeznek minél hamarabb enni. Mindegyikük leül, és megfogja a jobb oldali villát. Aztán senki sem tud
        bal villához jutni, mivel az összes villa foglalt.
        <p>
        A filozófusok makacsok, és evés előtt nem engedik el a villát. Így jutottunk el a holtpontra.
        ]]>
    </boxed>
    <title text="A feladat"/>
    <text>
        <![CDATA[
        A feladatod ennek a problémának a megoldása. Először is, valósítsd meg úgy, hogy a holtpontra juss, 
        a fent leírtakhoz hasonlóan. Ezután javítsd ki tetszőleges megoldással.
        ]]>
    </text>
    <boxed title="Lehetséges megoldások">
        <![CDATA[
        Íme néhány tipp a holtpont feloldására. Mi lenne, ha az egyik filozófus balkezes lenne (azaz először a bal villát 
		ragadná meg)? Mi lenne, ha csak 4-en ülhetnének az asztalhoz (szemafor segítségével)?
        ]]>
    </boxed>
    <title text="Ajánlás"/>
    <text>
        <![CDATA[
        Készíts egy filozófus szál osztályt, és indíts el 5 ilyet. Az villákat megvalósíthatod szemaforként, amelyek csak egy 
        szálat engednek be (egy filozófust). Ezután létrehozhatsz 5 villát, és minden filozófus szálhoz hozzárendelhetsz egy bal és egy jobb oldalit.
        ]]>
    </text>
    <boxed title="Kiíratás">
        <![CDATA[
        Írass ki mindent a konzolra. Nevezd meg az 5 filozófust, és írd ki, ha bármelyikük leül vagy megragad egy villát, 
		vagy elengedi bármelyik villát, sőt azt is, ha feláll. Így láthatóvá válik, hogy mi történik.
        ]]>
    </boxed>
	<text>
		<![CDATA[
        Az rád van hagyva, hogy egy filozófus összesen hányszor eszik. Én a megoldásokban úgy csináltam, hogy mindegyikük 
		pont háromszor akar majd enni.
        ]]>
	</text>
    <solution>
        <title text="A holtpontra jutó program"/>
        <text>
            <![CDATA[
            Először is, itt van a filozófus osztály.
            ]]>
        </text>
        <code><![CDATA[
            
<font color="#E65100">class</font> <font color="#999900">Philosopher</font> <font color="#E65100">extends</font> <font color="#999900">Thread</font> {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">private</font> <font color="#999900">Semaphore</font> rightFork; <font color="gray">//ez a 2 szemafor a két villát reprezentálja
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">private</font> <font color="#999900">Semaphore</font> leftFork;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">private</font> <font color="#999900">String</font> name;
<br/>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#999900">Philosopher</font>(<font color="#999900">Semaphore</font> rightFork, <font color="#999900">Semaphore</font> leftFork, <font color="#999900">String</font> name) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">this</font>.<font color="#ADD8E6">rightFork</font> = rightFork;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">this</font>.<font color="#ADD8E6">leftFork</font> = leftFork;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">this</font>.<font color="#ADD8E6">name</font> = name;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//a filozófus 3-szor próbál meg enni
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">private static</font> <font color="#E65100">final</font> <font color="#DF7401">int</font> N_EAT = <font color="#F0E130">3</font>;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="red">@Override</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#DF7401">void</font> <font color="#ADD8E6">run</font>() { <font color="gray">//a run metódusban a filozófus megpróbál enni a N_EAT-szer
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">for</font>(<font color="#DF7401">int</font> i=<font color="#F0E130">0</font>; i&lt;N_EAT; i++) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#ADD8E6">eat</font>();
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">private</font> <font color="#DF7401">void</font> <font color="#ADD8E6">eat</font>() {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">try</font> {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;rightFork.<font color="#ADD8E6">acquire</font>(); <font color="gray">//villák megragadása
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(name + <font color="#2E8B57">" megfogta a jobb villát."</font>);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;leftFork.<font color="#ADD8E6">acquire</font>();
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(name + <font color="#2E8B57">" megfogta a bal villát."</font>);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">Thread</font>.<font color="#ADD8E6">sleep</font>(<font color="#F0E130">1000</font>); <font color="gray">//a várakozás szimulálja az evést
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;} <font color="#E65100">catch</font>(<font color="#999900">InterruptedException</font> e) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;e.<font color="#ADD8E6">printStackTrace</font>();
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;} <font color="#E65100">finally</font> { <font color="gray">//a finally blokkban kell történnie
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;rightFork.<font color="#ADD8E6">release</font>(); <font color="gray">//villák elengedése
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(name + <font color="#2E8B57">" elengedte a bal villát."</font>);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;leftFork.<font color="#ADD8E6">release</font>();
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(name + <font color="#2E8B57">" elengedte a jobb villát."</font>);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>}
            
        ]]></code>
        <text>
            <![CDATA[
            Ezután ezt hívjuk meg a fő osztályban:
            ]]>
        </text>
        <code><![CDATA[
            
            <font color="#E65100">public class</font> <font color="#999900">DiningPhilosophersDeadlock</font> {
<br/>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//konstansok
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">private static final</font> <font color="#DF7401">int</font> N_FILOS = <font color="#F0E130">5</font>, N_FORKS = <font color="#F0E130">5</font>;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//filozófus nevek, ezek akármik lehetnek
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">private static final</font> <font color="#999900">String</font>[] NAMES = {<font color="#2E8B57">"Arisztotelész"</font>, <font color="#2E8B57">"Plátó"</font>, <font color="#2E8B57">"Nietzsche"</font>, <font color="#2E8B57">"Voltaire"</font>, <font color="#2E8B57">"Cicero"</font>};
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public static</font> <font color="#DF7401">void</font> <font color="#ADD8E6">main</font>(<font color="#999900">String</font>[] args) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//az 5 villát reprezentáló szemaforok létrehozása
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">Semaphore</font>[] forks = <font color="#E65100">new</font> <font color="#999900">Semaphore</font>[N_FORKS];
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">for</font>(<font color="#DF7401">int</font> i=<font color="#F0E130">0</font>; i&lt;N_FORKS; i++) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;forks[i] = <font color="#E65100">new</font> <font color="#999900">Semaphore</font>(<font color="#F0E130">1</font>); <font color="gray">//mindegyik villát csak egy filozófus foghatja egyszerre
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//filozófusok létrehozása, villák átadása
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">List</font>&lt;<font color="#999900">Philosopher</font>> philos = <font color="#E65100">new</font> <font color="#999900">ArrayList</font>&lt;>();
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">for</font>(<font color="#DF7401">int</font> i=<font color="#F0E130">0</font>; i&lt;N_FILOS; i++) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">if</font>(i == N_FILOS - <font color="#F0E130">1</font>) { <font color="gray">//az utolsó
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;philos.<font color="#ADD8E6">add</font>(<font color="#E65100">new</font> <font color="#999900">Philosopher</font>(forks[i], forks[<font color="#F0E130">0</font>], NAMES[i]));
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;} <font color="#E65100">else</font> {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;philos.<font color="#ADD8E6">add</font>(<font color="#E65100">new</font> <font color="#999900">Philosopher</font>(forks[i], forks[i+<font color="#F0E130">1</font>], NAMES[i]));
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//a szálak, "filozófusok" indítása
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">for</font>(<font color="#999900">Philosopher</font> philo: philos) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;philo.<font color="#ADD8E6">start</font>();
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>}
            
        ]]></code>
        <text>
            <![CDATA[
            Ennek futtatása nagy valószínűséggel holtpontra vezet. Lehetséges azonban, hogy a szálak úgy vannak ütemezve, 
            hogy a filozófusoknak sikerüljön enni.
            ]]>
        </text>
        <title text="Megoldás szemaforral"/>
        <text>
            <![CDATA[
            A frissített filozófus osztály, amely most már rendelkezik a tábla szemaforral is. Ezt mindig megszerezzük
            mielőtt hozzáférnénk a villákhoz (ez azt jelenti, hogy a filozófus leül).
            ]]>
        </text>
        <code><![CDATA[
            
<font color="#E65100">class</font> <font color="#999900">Philosopher</font> <font color="#E65100">extends</font> <font color="#999900">Thread</font> {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">private</font> <font color="#999900">Semaphore</font> rightFork; <font color="gray">//ez a 2 szemafor a két villát reprezentálja
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">private</font> <font color="#999900">Semaphore</font> leftFork;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">private</font> <font color="#999900">Semaphore</font> table; <font color="gray">//a tábla szemaforja, 4-es kapacitással
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">private</font> <font color="#999900">String</font> name;
<br/>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#999900">Philosopher</font>(<font color="#999900">Semaphore</font> table, <font color="#999900">Semaphore</font> rightFork, <font color="#999900">Semaphore</font> leftFork, <font color="#999900">String</font> name) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">this</font>.<font color="#ADD8E6">rightFork</font> = rightFork;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">this</font>.<font color="#ADD8E6">leftFork</font> = leftFork;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">this</font>.<font color="#ADD8E6">name</font> = name;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">this</font>.<font color="#ADD8E6">table</font> = table;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//a filozófus 3-szor próbál meg enni
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">private static final</font> <font color="#DF7401">int</font> N_EAT = <font color="#F0E130">3</font>;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="red">@Override</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#DF7401">void</font> <font color="#ADD8E6">run</font>() { <font color="gray">//a run metódusban a filozófus megpróbál enni a N_EAT-szer
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">for</font>(<font color="#DF7401">int</font> i=<font color="#F0E130">0</font>; i&lt;N_EAT; i++) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#ADD8E6">eat</font>();
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">private</font> <font color="#DF7401">void</font> <font color="#ADD8E6">eat</font>() {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">try</font> {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;table.<font color="#ADD8E6">acquire</font>(); <font color="gray">//most már az asztalhoz ülésre is figyelni kell
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(name + <font color="#2E8B57">" leült az asztalhoz."</font>);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;rightFork.<font color="#ADD8E6">acquire</font>(); <font color="gray">//villák megragadása
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(name + <font color="#2E8B57">" megfogta a jobb villát."</font>);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;leftFork.<font color="#ADD8E6">acquire</font>();
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(name + <font color="#2E8B57">" megfogta a bal villát."</font>);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">Thread</font>.<font color="#ADD8E6">sleep</font>(<font color="#F0E130">1000</font>); <font color="gray">//evés szimulálása várakozással
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;} <font color="#E65100">catch</font>(<font color="#999900">InterruptedException</font> e) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;e.<font color="#ADD8E6">printStackTrace</font>();
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;} <font color="#E65100">finally</font> { <font color="gray">//az elengedéseknek a finally-ban kell történnie
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;rightFork.<font color="#ADD8E6">release</font>(); <font color="gray">//villák elengedése
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(name + <font color="#2E8B57">" letette a bal villát."</font>);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;leftFork.<font color="#ADD8E6">release</font>();
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(name + <font color="#2E8B57">" letette a jobb villát."</font>);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;table.<font color="#ADD8E6">release</font>(); <font color="gray">//asztal elhagyása
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#999900">System</font>.<font color="#ADD8E6">out</font>.<font color="#ADD8E6">println</font>(name + <font color="#2E8B57">" felállt az asztaltól."</font>);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>}
            
        ]]></code>
        <text>
            <![CDATA[
            Nem másolom ide a frissített <i>main</i> metódust, mivel az majdnem ugyanaz. Az egyetlen különbség az, hogy most
            egy 4-es kapacitású tábla szemafort hozunk létre, és ezt adjuk át a filozófus szálaknak (a
            a fent látható frissített konstruktorral).
            ]]>
        </text>
        <code><![CDATA[
            
<font color="gray">//tábla szemafor létrehozása</font>
<br/><font color="#999900">Semaphore</font> table = <font color="#E65100">new</font> <font color="#999900">Semaphore</font>(N_FILOS-<font color="#F0E130">1</font>);
            
        ]]></code>
        <title text="Megoldás bal kezes filozófussal"/>
        <text>
            <![CDATA[
            Valószínűleg a legegyszerűbb és legmeglepőbb megoldás, ha az egyik filozófust "balkezessé" tesszük, vagyis
            hogy először a bal villát próbálja megragadni a jobb helyett.
            ]]>
        </text>
        <boxed title="Megvalósítás">
            <![CDATA[
            A megvalósítás szempontjából csak egyetlen sort kell módosítani. Meg kell változtatnunk a sorrendet
            a két villa szemafor sorrendjét egyetlen filozófus esetében.
            ]]>
        </boxed>
        <text>
            <![CDATA[
            Például megváltoztattam a sorrendet az utolsó filozófus esetében, azaz ő lesz bal kezes:
            ]]>
        </text>
        <code><![CDATA[
            
<font color="#E65100">for</font>(<font color="#DF7401">int</font> i=<font color="#F0E130">0</font>; i&lt;N_FILOS; i++) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">if</font>(i == N_FILOS - <font color="#F0E130">1</font>) { <font color="gray">//az utolsó, aki bal kezes (fordítva kapja a két szemafort)
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;philos.<font color="#ADD8E6">add</font>(<font color="#E65100">new</font> <font color="#999900">Philosopher</font>(forks[<font color="#F0E130">0</font>], forks[i], NAMES[i]));
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;} <font color="#E65100">else</font> {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;philos.<font color="#ADD8E6">add</font>(<font color="#E65100">new</font> <font color="#999900">Philosopher</font>(forks[i], forks[i+<font color="#F0E130">1</font>], NAMES[i]));
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>}
            
        ]]></code>
    </solution>
</resources>
