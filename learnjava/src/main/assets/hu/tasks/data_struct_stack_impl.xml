<?xml version="1.0" encoding="utf-8" standalone="no"?>
<resources>
    <taskdata>
        <id>202</id>
        <name>Sor és verem implementációk</name>
    </taskdata>
    <boxed title="Függőség">
        <![CDATA[
        A feladat elvégzéséhez szükséged lesz az előző feladatból származó egyik lista implementációjára. Ha az a 
		feladat nincsen kész, és nem is szeretnéd megcsinálni, akkor használhatsz helyette egy listát a <i>JDK</i>-ból.
		<p>
		Ehhez a feladathoz ne hozz létre új projektet, hanem használd azt, ahol a listákat megvalósítottad.
        ]]>
    </boxed>
    <text>
        <![CDATA[
        A feladat egy sor és egy verem megvalósítása, <b>az egyik listát használva, amelyet a
        előző feladatban készítettünk</b>. Mivel a saját listáink implementációját használjuk, ezek az adatszerkezetek 
		sem lesznek generikusak.
        ]]>
    </text>
   <advanced title="Később kelleni fog">
        <![CDATA[
        Ennek a feladatnak az eredményére egy későbbi tanfolyam egyik feladatában szükség lesz! 
        ]]>
    </advanced>
    <title text="Sor"/>
    <text>
        <![CDATA[
        A sornak rendelkeznie kell metódusokkal az elemek hozzáadására, eltávolítására és <i>peek</i>-re (a sor 
        szabályainak megfelelően). Ha nem emlékszel a szabályokra, akkor lásd a megfelelő fejezetet.
		<p>
		Szükség van továbbá olyan segédmetódusokra, amelyek visszaadják a sor méretét, vagy kiürítik azt.
        ]]>
    </text>
    <title text="Verem"/>
    <text>
    <![CDATA[
       A veremnek rendelkeznie kell metódusokkalaz elemek hozzáadására, eltávolítására és <i>peek</i>-re (a verem 
       szabályainak megfelelően). Ha nem emlékszel a szabályokra, akkor lásd a megfelelő fejezetet.
    ]]>
    </text>
    <boxed title="Megjegyzés">
        <![CDATA[
        Ez a feladat <b>sokkal</b> egyszerűbb, hiszen a nehéz munkát már elvégeztük a lista implementációjánál. 
        Az egyetlen kihívás annak eldöntése, hogy hova illesszünk be és honnan távolítsunk el elemeket ezekből 
		az adatstruktúrákból.
        ]]>
    </boxed>
    <solution>
        <text>
            <![CDATA[
            A sor megvalósítása. A csomag struktúrája neked eltérhet, attól függően, hogy hova helyezted a 
			lista implementációkat az előző feladatban.
            ]]>
        </text>
        <code><![CDATA[
            
<font color="#E65100">package</font> task_queue_stack;
<br/>
<br/><font color="#E65100">import</font> task_lists.MyLinkedList; <font color="gray">//import the list implementation
</font>
<br/>
<br/><font color="#E65100">public class</font> <font color="#999900">MyQueue</font> {
<br/>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//the internal list
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">private</font> <font color="#999900">MyLinkedList</font> list;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#999900">MyQueue</font>() {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;list = <font color="#E65100">new</font> <font color="#999900">MyLinkedList</font>();
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray<font color="#2E8B57">">//add to the '</font>beginning' of the queue
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#DF7401">void</font> <font color="#ADD8E6">enque</font>(<font color="#999900">String</font> element) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">if</font>(list.<font color="#ADD8E6">size</font>() > <font color="#F0E130">0</font>) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;list.<font color="#ADD8E6">add</font>(element, <font color="#F0E130">0</font>);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;} <font color="#E65100">else</font> { <font color="gray">//the internal list is empty
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;list.<font color="#ADD8E6">add</font>(element);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//remove from the other side of the queue
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#999900">String</font> <font color="#ADD8E6">deque</font>() {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">if</font>(list.<font color="#ADD8E6">size</font>() == <font color="#F0E130">0</font>) <font color="#E65100">return null</font>;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">return</font> list.<font color="#ADD8E6">remove</font>(list.<font color="#ADD8E6">size</font>()<font color="#F0E130">-1</font>);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//peek the element that can be removed
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#999900">String</font> <font color="#ADD8E6">peek</font>() {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">if</font>(list.<font color="#ADD8E6">size</font>() == <font color="#F0E130">0</font>) <font color="#E65100">return null</font>;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">return</font> list.<font color="#ADD8E6">get</font>(list.<font color="#ADD8E6">size</font>()<font color="#F0E130">-1</font>);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//clear the queue
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#DF7401">void</font> <font color="#ADD8E6">clear</font>() {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;list.<font color="#ADD8E6">clear</font>();
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//size of the queue
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#DF7401">int</font> <font color="#ADD8E6">size</font>() {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">return</font> list.<font color="#ADD8E6">size</font>();
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>}
<br/>
            
        ]]></code>
        <text>
            <![CDATA[
            A verem megvalósítása. Nagyon hasonlít a sorhoz, az egyetlen különbség az, hogy itt csak az 
			adatstruktúra elejére szúrunk be és onnan is távolítjuk el az elemeket.
            ]]>
        </text>
        <code><![CDATA[
            
<font color="#E65100">package</font> task_queue_stack;
<br/>
<br/><font color="#E65100">import</font> task_lists.MyLinkedList;
<br/>
<br/><font color="#E65100">public class</font> <font color="#999900">MyStack</font> {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">private</font> <font color="#999900">MyLinkedList</font> list;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#999900">MyStack</font>() {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;list = <font color="#E65100">new</font> <font color="#999900">MyLinkedList</font>();
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//add the element to the back of the list.
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#DF7401">void</font> <font color="#ADD8E6">push</font>(<font color="#999900">String</font> element) {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;list.<font color="#ADD8E6">add</font>(element);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//remove the element at the back of the list.
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#999900">String</font> <font color="#ADD8E6">pop</font>() {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">return</font> list.<font color="#ADD8E6">remove</font>(list.<font color="#ADD8E6">size</font>()<font color="#F0E130">-1</font>);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//peek the element at the back of the list.
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#999900">String</font> <font color="#ADD8E6">peek</font>() {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">return</font> list.<font color="#ADD8E6">get</font>(list.<font color="#ADD8E6">size</font>()<font color="#F0E130">-1</font>);
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//clear the stack
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#DF7401">void</font> <font color="#ADD8E6">clear</font>() {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;list.<font color="#ADD8E6">clear</font>();
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="gray">//size of the stack
</font>
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">public</font> <font color="#DF7401">int</font> <font color="#ADD8E6">size</font>() {
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;<font color="#E65100">return</font> list.<font color="#ADD8E6">size</font>();
<br/>	&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>}
<br/>
            
        ]]></code>
    </solution>
</resources>
